(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"), require("unicode-trie"), require("stream"), require("zlib"), (function webpackLoadOptionalExternalModule() { try { return require("iconv-lite"); } catch(e) {} }()), require("util"), require("babel-runtime/core-js/object/get-own-property-descriptor"), require("babel-runtime/core-js/get-iterator"), require("babel-runtime/core-js/object/freeze"), require("babel-runtime/core-js/object/keys"), require("babel-runtime/helpers/typeof"), require("babel-runtime/core-js/object/define-property"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("babel-runtime/core-js/map"), require("babel-runtime/core-js/object/get-prototype-of"), require("babel-runtime/helpers/possibleConstructorReturn"), require("babel-runtime/helpers/inherits"), require("babel-runtime/core-js/object/define-properties"), require("deep-equal"), require("babel-runtime/helpers/get"), require("babel-runtime/core-js/object/assign"), require("babel-runtime/helpers/toConsumableArray"), require("babel-runtime/core-js/string/from-code-point"), require("babel-runtime/helpers/slicedToArray"), require("babel-runtime/core-js/array/from"), require("babel-runtime/core-js/set"), require("unicode-properties"), require("dfa"), require("clone"), require("tiny-inflate"), require("brotli/decompress"), require("events"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash", "unicode-trie", "stream", "zlib", "iconv-lite", "util", "babel-runtime/core-js/object/get-own-property-descriptor", "babel-runtime/core-js/get-iterator", "babel-runtime/core-js/object/freeze", "babel-runtime/core-js/object/keys", "babel-runtime/helpers/typeof", "babel-runtime/core-js/object/define-property", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/createClass", "babel-runtime/core-js/map", "babel-runtime/core-js/object/get-prototype-of", "babel-runtime/helpers/possibleConstructorReturn", "babel-runtime/helpers/inherits", "babel-runtime/core-js/object/define-properties", "deep-equal", "babel-runtime/helpers/get", "babel-runtime/core-js/object/assign", "babel-runtime/helpers/toConsumableArray", "babel-runtime/core-js/string/from-code-point", "babel-runtime/helpers/slicedToArray", "babel-runtime/core-js/array/from", "babel-runtime/core-js/set", "unicode-properties", "dfa", "clone", "tiny-inflate", "brotli/decompress", "events"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("lodash"), require("unicode-trie"), require("stream"), require("zlib"), (function webpackLoadOptionalExternalModule() { try { return require("iconv-lite"); } catch(e) {} }()), require("util"), require("babel-runtime/core-js/object/get-own-property-descriptor"), require("babel-runtime/core-js/get-iterator"), require("babel-runtime/core-js/object/freeze"), require("babel-runtime/core-js/object/keys"), require("babel-runtime/helpers/typeof"), require("babel-runtime/core-js/object/define-property"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("babel-runtime/core-js/map"), require("babel-runtime/core-js/object/get-prototype-of"), require("babel-runtime/helpers/possibleConstructorReturn"), require("babel-runtime/helpers/inherits"), require("babel-runtime/core-js/object/define-properties"), require("deep-equal"), require("babel-runtime/helpers/get"), require("babel-runtime/core-js/object/assign"), require("babel-runtime/helpers/toConsumableArray"), require("babel-runtime/core-js/string/from-code-point"), require("babel-runtime/helpers/slicedToArray"), require("babel-runtime/core-js/array/from"), require("babel-runtime/core-js/set"), require("unicode-properties"), require("dfa"), require("clone"), require("tiny-inflate"), require("brotli/decompress"), require("events")) : factory(root["lodash"], root["unicode-trie"], root["stream"], root["zlib"], root["iconv-lite"], root["util"], root["babel-runtime/core-js/object/get-own-property-descriptor"], root["babel-runtime/core-js/get-iterator"], root["babel-runtime/core-js/object/freeze"], root["babel-runtime/core-js/object/keys"], root["babel-runtime/helpers/typeof"], root["babel-runtime/core-js/object/define-property"], root["babel-runtime/helpers/classCallCheck"], root["babel-runtime/helpers/createClass"], root["babel-runtime/core-js/map"], root["babel-runtime/core-js/object/get-prototype-of"], root["babel-runtime/helpers/possibleConstructorReturn"], root["babel-runtime/helpers/inherits"], root["babel-runtime/core-js/object/define-properties"], root["deep-equal"], root["babel-runtime/helpers/get"], root["babel-runtime/core-js/object/assign"], root["babel-runtime/helpers/toConsumableArray"], root["babel-runtime/core-js/string/from-code-point"], root["babel-runtime/helpers/slicedToArray"], root["babel-runtime/core-js/array/from"], root["babel-runtime/core-js/set"], root["unicode-properties"], root["dfa"], root["clone"], root["tiny-inflate"], root["brotli/decompress"], root["events"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_40__, __WEBPACK_EXTERNAL_MODULE_45__, __WEBPACK_EXTERNAL_MODULE_56__, __WEBPACK_EXTERNAL_MODULE_57__, __WEBPACK_EXTERNAL_MODULE_58__, __WEBPACK_EXTERNAL_MODULE_59__, __WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_62__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_65__, __WEBPACK_EXTERNAL_MODULE_66__, __WEBPACK_EXTERNAL_MODULE_67__, __WEBPACK_EXTERNAL_MODULE_68__, __WEBPACK_EXTERNAL_MODULE_69__, __WEBPACK_EXTERNAL_MODULE_70__, __WEBPACK_EXTERNAL_MODULE_71__, __WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_73__, __WEBPACK_EXTERNAL_MODULE_74__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_76__, __WEBPACK_EXTERNAL_MODULE_77__, __WEBPACK_EXTERNAL_MODULE_78__, __WEBPACK_EXTERNAL_MODULE_79__, __WEBPACK_EXTERNAL_MODULE_80__, __WEBPACK_EXTERNAL_MODULE_81__, __WEBPACK_EXTERNAL_MODULE_87__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _pdfmake = __webpack_require__(1);

	var _pdfmake2 = _interopRequireDefault(_pdfmake);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var defaultFonts = {};

	var Pdf = function () {
	  function Pdf(template, fonts) {
	    var _this = this;

	    _classCallCheck(this, Pdf);

	    this.template = template;
	    this.fonts = fonts || defaultFonts;

	    Object.keys(this.fonts).forEach(function (fontName) {
	      var font = _this.fonts[fontName];
	      Object.keys(font).forEach(function (typeName) {
	        var type = font[typeName];
	        if (typeof type === "string") {
	          type = new Buffer(type, "base64");
	        }
	        font[typeName] = type;
	      });

	      _this.fonts[fontName] = font;
	    });
	  }

	  _createClass(Pdf, [{
	    key: "getPdfKitDoc",
	    value: function getPdfKitDoc(options) {
	      options = options || {};

	      var printer = new _pdfmake2.default(this.fonts);
	      return printer.createPdfKitDocument(this.template, options);
	    }
	  }, {
	    key: "getBuffer",
	    value: function getBuffer(options, done) {
	      options = options || {};

	      var doc = this.getPdfKitDoc(options);
	      var chunks = [];
	      doc.on("data", function (chunk) {
	        chunks.push(chunk);
	      });

	      doc.on("end", function () {
	        done(Buffer.concat(chunks));
	      });

	      doc.end();
	    }
	  }, {
	    key: "getBase64",
	    value: function getBase64(options, done) {
	      options = options || {};

	      this.getBuffer(options, function (buffer) {
	        done(buffer.toString("base64"));
	      });
	    }
	  }, {
	    key: "getDataUrl",
	    value: function getDataUrl(options, done) {
	      options = options || {};

	      this.getBase64(options, function (data) {
	        done("data:application/pdf;base64," + data);
	      });
	    }
	  }, {
	    key: "print",
	    value: function print(filename, options) {
	      filename = filename || "download.pdf";
	      options = options || {};

	      if (window.cordova && window.plugins.PrintPDF) {
	        this.getBase64(options, function (data) {
	          window.plugins.PrintPDF.print({
	            data: data
	          });
	        });
	      } else {
	        this.getBuffer(options, function (data) {
	          var blob = new Blob([data], {
	            type: "application/pdf"
	          });

	          if (window.navigator.msSaveOrOpenBlob) {
	            window.navigator.msSaveBlob(blob, filename);
	          } else {
	            var element = window.document.createElement("a");
	            element.href = window.URL.createObjectURL(blob);
	            element.download = filename;
	            element.style.display = "none";
	            document.body.appendChild(element);
	            element.click();
	            document.body.removeChild(element);
	          }
	        });
	      }
	    }
	  }]);

	  return Pdf;
	}();

	exports.default = Pdf;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var _ = __webpack_require__(2);
	var FontProvider = __webpack_require__(3);
	var LayoutBuilder = __webpack_require__(4);
	var PdfKit = __webpack_require__(23);
	var sizes = __webpack_require__(99);
	var ImageMeasure = __webpack_require__(100);
	var textDecorator = __webpack_require__(101);

	_.noConflict();

	////////////////////////////////////////
	// PdfPrinter

	/**
	 * @class Creates an instance of a PdfPrinter which turns document definition into a pdf
	 *
	 * @param {Object} fontDescriptors font definition dictionary
	 *
	 * @example
	 * var fontDescriptors = {
	 *	Roboto: {
	 *		normal: 'fonts/Roboto-Regular.ttf',
	 *		bold: 'fonts/Roboto-Medium.ttf',
	 *		italics: 'fonts/Roboto-Italic.ttf',
	 *		bolditalics: 'fonts/Roboto-MediumItalic.ttf'
	 *	}
	 * };
	 *
	 * var printer = new PdfPrinter(fontDescriptors);
	 */
	function PdfPrinter(fontDescriptors) {
		this.fontDescriptors = fontDescriptors;
	}

	/**
	 * Executes layout engine for the specified document and renders it into a pdfkit document
	 * ready to be saved.
	 *
	 * @param {Object} docDefinition document definition
	 * @param {Object} docDefinition.content an array describing the pdf structure (for more information take a look at the examples in the /examples folder)
	 * @param {Object} [docDefinition.defaultStyle] default (implicit) style definition
	 * @param {Object} [docDefinition.styles] dictionary defining all styles which can be used in the document
	 * @param {Object} [docDefinition.pageSize] page size (pdfkit units, A4 dimensions by default)
	 * @param {Number} docDefinition.pageSize.width width
	 * @param {Number} docDefinition.pageSize.height height
	 * @param {Object} [docDefinition.pageMargins] page margins (pdfkit units)
	 * @param {Number} docDefinition.maxPagesNumber maximum number of pages to render
	 *
	 * @example
	 *
	 * var docDefinition = {
	 * 	info: {
	 *		title: 'awesome Document',
	 *		author: 'john doe',
	 *		subject: 'subject of document',
	 *		keywords: 'keywords for document',
	 * 	},
	 *	content: [
	 *		'First paragraph',
	 *		'Second paragraph, this time a little bit longer',
	 *		{ text: 'Third paragraph, slightly bigger font size', fontSize: 20 },
	 *		{ text: 'Another paragraph using a named style', style: 'header' },
	 *		{ text: ['playing with ', 'inlines' ] },
	 *		{ text: ['and ', { text: 'restyling ', bold: true }, 'them'] },
	 *	],
	 *	styles: {
	 *		header: { fontSize: 30, bold: true }
	 *	}
	 * }
	 *
	 * var pdfKitDoc = printer.createPdfKitDocument(docDefinition);
	 *
	 * pdfKitDoc.pipe(fs.createWriteStream('sample.pdf'));
	 * pdfKitDoc.end();
	 *
	 * @return {Object} a pdfKit document object which can be saved or encode to data-url
	 */
	PdfPrinter.prototype.createPdfKitDocument = function (docDefinition, options) {
		options = options || {};

		var pageSize = fixPageSize(docDefinition.pageSize, docDefinition.pageOrientation);

		this.pdfKitDoc = new PdfKit({size: [pageSize.width, pageSize.height], autoFirstPage: false, compress: docDefinition.compress || true});
		setMetadata(docDefinition, this.pdfKitDoc);

		this.fontProvider = new FontProvider(this.fontDescriptors, this.pdfKitDoc);

		docDefinition.images = docDefinition.images || {};

		var builder = new LayoutBuilder(pageSize, fixPageMargins(docDefinition.pageMargins || 40), new ImageMeasure(this.pdfKitDoc, docDefinition.images));

		registerDefaultTableLayouts(builder);
		if (options.tableLayouts) {
			builder.registerTableLayouts(options.tableLayouts);
		}

		var pages = builder.layoutDocument(docDefinition.content, this.fontProvider, docDefinition.styles || {}, docDefinition.defaultStyle || {fontSize: 12, font: 'Roboto'}, docDefinition.background, docDefinition.header, docDefinition.footer, docDefinition.images, docDefinition.watermark, docDefinition.pageBreakBefore);
		var maxNumberPages = docDefinition.maxPagesNumber || -1;
		if (typeof maxNumberPages === 'number' && maxNumberPages > -1) {
			pages = pages.slice(0, maxNumberPages);
		}

		// if pageSize.height is set to Infinity, calculate the actual height of the page that
		// was laid out using the height of each of the items in the page.
		if (pageSize.height === Infinity) {
			var pageHeight = calculatePageHeight(pages, docDefinition.pageMargins);
			this.pdfKitDoc.options.size = [pageSize.width, pageHeight];
		}

		renderPages(pages, this.fontProvider, this.pdfKitDoc, options.progressCallback);

		if (options.autoPrint) {
			var printActionRef = this.pdfKitDoc.ref({
				Type: 'Action',
				S: 'Named',
				N: 'Print'
			});
			this.pdfKitDoc._root.data.OpenAction = printActionRef;
			printActionRef.end();
		}
		return this.pdfKitDoc;
	};

	function setMetadata(docDefinition, pdfKitDoc) {
		pdfKitDoc.info.Producer = 'pdfmake';
		pdfKitDoc.info.Creator = 'pdfmake';

		// pdf kit maintains the uppercase fieldnames from pdf spec
		// to keep the pdfmake api consistent, the info field are defined lowercase
		if (docDefinition.info) {
			var info = docDefinition.info;
			// check for falsey an set null, so that pdfkit always get either null or value
			pdfKitDoc.info.Title = info.title ? info.title : null;
			pdfKitDoc.info.Author = info.author ? info.author : null;
			pdfKitDoc.info.Subject = info.subject ? info.subject : null;
			pdfKitDoc.info.Keywords = info.keywords ? info.keywords : null;
			pdfKitDoc.info.CreationDate = info.creationDate ? info.creationDate : null;
		}
	}

	function calculatePageHeight(pages, margins) {
		function getItemHeight(item) {
			if (typeof item.item.getHeight === 'function') {
				return item.item.getHeight();
			} else if (item.item._height) {
				return item.item._height;
			} else {
				// TODO: add support for next item types
				return 0;
			}
		}

		var fixedMargins = fixPageMargins(margins || 40);
		var height = fixedMargins.top + fixedMargins.bottom;
		pages.forEach(function (page) {
			page.items.forEach(function (item) {
				height += getItemHeight(item);
			});
		});
		return height;
	}

	function fixPageSize(pageSize, pageOrientation) {
		// if pageSize.height is set to auto, set the height to infinity so there are no page breaks.
		if (pageSize && pageSize.height === 'auto') {
			pageSize.height = Infinity;
		}

		var size = pageSize2widthAndHeight(pageSize || 'A4');
		if (((pageOrientation === 'portrait') && (size.width > size.height)) ||
				((pageOrientation === 'landscape') && (size.width < size.height))) { // swap page sizes
			size = {width: size.height, height: size.width};
		}
		size.orientation = size.width > size.height ? 'landscape' : 'portrait';
		return size;
	}

	function fixPageMargins(margin) {
		if (!margin) {
			return null;
		}

		if (typeof margin === 'number' || margin instanceof Number) {
			margin = {left: margin, right: margin, top: margin, bottom: margin};
		} else if (Array.isArray(margin)) {
			if (margin.length === 2) {
				margin = {left: margin[0], top: margin[1], right: margin[0], bottom: margin[1]};
			} else if (margin.length === 4) {
				margin = {left: margin[0], top: margin[1], right: margin[2], bottom: margin[3]};
			} else {
				throw 'Invalid pageMargins definition';
			}
		}

		return margin;
	}

	function registerDefaultTableLayouts(layoutBuilder) {
		/*jshint unused: false */
		layoutBuilder.registerTableLayouts({
			noBorders: {
				hLineWidth: function (i) {
					return 0;
				},
				vLineWidth: function (i) {
					return 0;
				},
				paddingLeft: function (i) {
					return i && 4 || 0;
				},
				paddingRight: function (i, node) {
					return (i < node.table.widths.length - 1) ? 4 : 0;
				}
			},
			headerLineOnly: {
				hLineWidth: function (i, node) {
					if (i === 0 || i === node.table.body.length) {
						return 0;
					}
					return (i === node.table.headerRows) ? 2 : 0;
				},
				vLineWidth: function (i) {
					return 0;
				},
				paddingLeft: function (i) {
					return i === 0 ? 0 : 8;
				},
				paddingRight: function (i, node) {
					return (i === node.table.widths.length - 1) ? 0 : 8;
				}
			},
			lightHorizontalLines: {
				hLineWidth: function (i, node) {
					if (i === 0 || i === node.table.body.length) {
						return 0;
					}
					return (i === node.table.headerRows) ? 2 : 1;
				},
				vLineWidth: function (i) {
					return 0;
				},
				hLineColor: function (i) {
					return i === 1 ? 'black' : '#aaa';
				},
				paddingLeft: function (i) {
					return i === 0 ? 0 : 8;
				},
				paddingRight: function (i, node) {
					return (i === node.table.widths.length - 1) ? 0 : 8;
				}
			}
		});
	}

	function pageSize2widthAndHeight(pageSize) {
		if (typeof pageSize === 'string' || pageSize instanceof String) {
			var size = sizes[pageSize.toUpperCase()];
			if (!size) {
				throw 'Page size ' + pageSize + ' not recognized';
			}
			return {width: size[0], height: size[1]};
		}

		return pageSize;
	}

	function updatePageOrientationInOptions(currentPage, pdfKitDoc) {
		var previousPageOrientation = pdfKitDoc.options.size[0] > pdfKitDoc.options.size[1] ? 'landscape' : 'portrait';

		if (currentPage.pageSize.orientation !== previousPageOrientation) {
			var width = pdfKitDoc.options.size[0];
			var height = pdfKitDoc.options.size[1];
			pdfKitDoc.options.size = [height, width];
		}
	}

	function renderPages(pages, fontProvider, pdfKitDoc, progressCallback) {
		pdfKitDoc._pdfMakePages = pages;
		pdfKitDoc.addPage();

		var totalItems = progressCallback && _.sumBy(pages, function (page) {
			return page.items.length;
		});
		var renderedItems = 0;
		progressCallback = progressCallback || function () {};

		for (var i = 0; i < pages.length; i++) {
			if (i > 0) {
				updatePageOrientationInOptions(pages[i], pdfKitDoc);
				pdfKitDoc.addPage(pdfKitDoc.options);
			}

			var page = pages[i];
			for (var ii = 0, il = page.items.length; ii < il; ii++) {
				var item = page.items[ii];
				switch (item.type) {
					case 'vector':
						renderVector(item.item, pdfKitDoc);
						break;
					case 'line':
						renderLine(item.item, item.item.x, item.item.y, pdfKitDoc);
						break;
					case 'image':
						renderImage(item.item, item.item.x, item.item.y, pdfKitDoc);
						break;
				}
				renderedItems++;
				progressCallback(renderedItems / totalItems);
			}
			if (page.watermark) {
				renderWatermark(page, pdfKitDoc);
			}
		}
	}

	function renderLine(line, x, y, pdfKitDoc) {
		x = x || 0;
		y = y || 0;

		var lineHeight = line.getHeight();
		var ascenderHeight = line.getAscenderHeight();
		var descent = lineHeight - ascenderHeight;

		textDecorator.drawBackground(line, x, y, pdfKitDoc);

		//TODO: line.optimizeInlines();
		for (var i = 0, l = line.inlines.length; i < l; i++) {
			var inline = line.inlines[i];
			var shiftToBaseline = lineHeight - ((inline.font.ascender / 1000) * inline.fontSize) - descent;

			pdfKitDoc.fill(inline.color || 'black');

			pdfKitDoc._font = inline.font;
			pdfKitDoc.fontSize(inline.fontSize);
			pdfKitDoc.text(inline.text, x + inline.x, y + shiftToBaseline, {
				lineBreak: false,
				textWidth: inline.width,
				wordCount: 1,
				link: inline.link
			});
		}

		textDecorator.drawDecorations(line, x, y, pdfKitDoc);
	}

	function renderWatermark(page, pdfKitDoc) {
		var watermark = page.watermark;

		pdfKitDoc.fill(watermark.color);
		pdfKitDoc.opacity(watermark.opacity);

		pdfKitDoc.save();

		var angle = Math.atan2(pdfKitDoc.page.height, pdfKitDoc.page.width) * -180 / Math.PI;
		pdfKitDoc.rotate(angle, {origin: [pdfKitDoc.page.width / 2, pdfKitDoc.page.height / 2]});

		var x = pdfKitDoc.page.width / 2 - watermark.size.size.width / 2;
		var y = pdfKitDoc.page.height / 2 - watermark.size.size.height / 4;

		pdfKitDoc._font = watermark.font;
		pdfKitDoc.fontSize(watermark.size.fontSize);
		pdfKitDoc.text(watermark.text, x, y, {lineBreak: false});

		pdfKitDoc.restore();
	}

	function renderVector(vector, pdfKitDoc) {
		//TODO: pdf optimization (there's no need to write all properties everytime)
		pdfKitDoc.lineWidth(vector.lineWidth || 1);
		if (vector.dash) {
			pdfKitDoc.dash(vector.dash.length, {space: vector.dash.space || vector.dash.length, phase: vector.dash.phase || 0});
		} else {
			pdfKitDoc.undash();
		}
		pdfKitDoc.fillOpacity(vector.fillOpacity || 1);
		pdfKitDoc.strokeOpacity(vector.strokeOpacity || 1);
		pdfKitDoc.lineJoin(vector.lineJoin || 'miter');

		//TODO: clipping

		switch (vector.type) {
			case 'ellipse':
				pdfKitDoc.ellipse(vector.x, vector.y, vector.r1, vector.r2);
				break;
			case 'rect':
				if (vector.r) {
					pdfKitDoc.roundedRect(vector.x, vector.y, vector.w, vector.h, vector.r);
				} else {
					pdfKitDoc.rect(vector.x, vector.y, vector.w, vector.h);
				}

				if (vector.linearGradient) {
					var gradient = pdfKitDoc.linearGradient(vector.x, vector.y, vector.x + vector.w, vector.y);
					var step = 1 / (vector.linearGradient.length - 1);

					for (var i = 0; i < vector.linearGradient.length; i++) {
						gradient.stop(i * step, vector.linearGradient[i]);
					}

					vector.color = gradient;
				}
				break;
			case 'line':
				pdfKitDoc.moveTo(vector.x1, vector.y1);
				pdfKitDoc.lineTo(vector.x2, vector.y2);
				break;
			case 'polyline':
				if (vector.points.length === 0) {
					break;
				}

				pdfKitDoc.moveTo(vector.points[0].x, vector.points[0].y);
				for (var i = 1, l = vector.points.length; i < l; i++) {
					pdfKitDoc.lineTo(vector.points[i].x, vector.points[i].y);
				}

				if (vector.points.length > 1) {
					var p1 = vector.points[0];
					var pn = vector.points[vector.points.length - 1];

					if (vector.closePath || p1.x === pn.x && p1.y === pn.y) {
						pdfKitDoc.closePath();
					}
				}
				break;
		}

		if (vector.color && vector.lineColor) {
			pdfKitDoc.fillAndStroke(vector.color, vector.lineColor);
		} else if (vector.color) {
			pdfKitDoc.fill(vector.color);
		} else {
			pdfKitDoc.stroke(vector.lineColor || 'black');
		}
	}

	function renderImage(image, x, y, pdfKitDoc) {
		pdfKitDoc.image(image.image, image.x, image.y, {width: image._width, height: image._height});
		if (image.link) {
			pdfKitDoc.link(image.x, image.y, image._width, image._height, image.link);
		}
	}

	module.exports = PdfPrinter;


	/* temporary browser extension */
	PdfPrinter.prototype.fs = __webpack_require__(10);


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var _ = __webpack_require__(2);

	_.noConflict();

	function typeName(bold, italics) {
		var type = 'normal';
		if (bold && italics) {
			type = 'bolditalics';
		} else if (bold) {
			type = 'bold';
		} else if (italics) {
			type = 'italics';
		}
		return type;
	}

	function FontProvider(fontDescriptors, pdfKitDoc) {
		this.fonts = {};
		this.pdfKitDoc = pdfKitDoc;
		this.fontCache = {};

		for (var font in fontDescriptors) {
			if (fontDescriptors.hasOwnProperty(font)) {
				var fontDef = fontDescriptors[font];

				this.fonts[font] = {
					normal: fontDef.normal,
					bold: fontDef.bold,
					italics: fontDef.italics,
					bolditalics: fontDef.bolditalics
				};
			}
		}
	}

	FontProvider.prototype.provideFont = function (familyName, bold, italics) {
		var type = typeName(bold, italics);
		if (!this.fonts[familyName] || !this.fonts[familyName][type]) {
			throw new Error('Font \'' + familyName + '\' in style \'' + type + '\' is not defined in the font section of the document definition.');
		}

		this.fontCache[familyName] = this.fontCache[familyName] || {};

		if (!this.fontCache[familyName][type]) {
			var def = this.fonts[familyName][type];
			if (!Array.isArray(def)) {
				def = [def];
			}
			this.fontCache[familyName][type] = this.pdfKitDoc.font.apply(this.pdfKitDoc, def)._font;
		}

		return this.fontCache[familyName][type];
	};

	module.exports = FontProvider;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var _ = __webpack_require__(2);
	var TraversalTracker = __webpack_require__(5);
	var DocMeasure = __webpack_require__(6);
	var DocumentContext = __webpack_require__(18);
	var PageElementWriter = __webpack_require__(19);
	var ColumnCalculator = __webpack_require__(15);
	var TableProcessor = __webpack_require__(22);
	var Line = __webpack_require__(21);
	var pack = __webpack_require__(16).pack;
	var offsetVector = __webpack_require__(16).offsetVector;
	var fontStringify = __webpack_require__(16).fontStringify;
	var isFunction = __webpack_require__(16).isFunction;
	var TextTools = __webpack_require__(7);
	var StyleContextStack = __webpack_require__(14);

	function addAll(target, otherArray) {
		_.each(otherArray, function (item) {
			target.push(item);
		});
	}

	/**
	 * Creates an instance of LayoutBuilder - layout engine which turns document-definition-object
	 * into a set of pages, lines, inlines and vectors ready to be rendered into a PDF
	 *
	 * @param {Object} pageSize - an object defining page width and height
	 * @param {Object} pageMargins - an object defining top, left, right and bottom margins
	 */
	function LayoutBuilder(pageSize, pageMargins, imageMeasure) {
		this.pageSize = pageSize;
		this.pageMargins = pageMargins;
		this.tracker = new TraversalTracker();
		this.imageMeasure = imageMeasure;
		this.tableLayouts = {};
	}

	LayoutBuilder.prototype.registerTableLayouts = function (tableLayouts) {
		this.tableLayouts = pack(this.tableLayouts, tableLayouts);
	};

	/**
	 * Executes layout engine on document-definition-object and creates an array of pages
	 * containing positioned Blocks, Lines and inlines
	 *
	 * @param {Object} docStructure document-definition-object
	 * @param {Object} fontProvider font provider
	 * @param {Object} styleDictionary dictionary with style definitions
	 * @param {Object} defaultStyle default style definition
	 * @return {Array} an array of pages
	 */
	LayoutBuilder.prototype.layoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {

		function addPageBreaksIfNecessary(linearNodeList, pages) {

			if (!isFunction(pageBreakBeforeFct)) {
				return false;
			}

			linearNodeList = _.reject(linearNodeList, function (node) {
				return _.isEmpty(node.positions);
			});

			_.each(linearNodeList, function (node) {
				var nodeInfo = _.pick(node, [
					'id', 'text', 'ul', 'ol', 'table', 'image', 'qr', 'canvas', 'columns',
					'headlineLevel', 'style', 'pageBreak', 'pageOrientation',
					'width', 'height'
				]);
				nodeInfo.startPosition = _.first(node.positions);
				nodeInfo.pageNumbers = _.chain(node.positions).map('pageNumber').uniq().value();
				nodeInfo.pages = pages.length;
				nodeInfo.stack = _.isArray(node.stack);

				node.nodeInfo = nodeInfo;
			});

			return _.some(linearNodeList, function (node, index, followingNodeList) {
				if (node.pageBreak !== 'before' && !node.pageBreakCalculated) {
					node.pageBreakCalculated = true;
					var pageNumber = _.first(node.nodeInfo.pageNumbers);

					var followingNodesOnPage = _.chain(followingNodeList).drop(index + 1).filter(function (node0) {
						return _.includes(node0.nodeInfo.pageNumbers, pageNumber);
					}).value();

					var nodesOnNextPage = _.chain(followingNodeList).drop(index + 1).filter(function (node0) {
						return _.includes(node0.nodeInfo.pageNumbers, pageNumber + 1);
					}).value();

					var previousNodesOnPage = _.chain(followingNodeList).take(index).filter(function (node0) {
						return _.includes(node0.nodeInfo.pageNumbers, pageNumber);
					}).value();

					if (pageBreakBeforeFct(node.nodeInfo,
						_.map(followingNodesOnPage, 'nodeInfo'),
						_.map(nodesOnNextPage, 'nodeInfo'),
						_.map(previousNodesOnPage, 'nodeInfo'))) {
						node.pageBreak = 'before';
						return true;
					}
				}
			});
		}

		this.docMeasure = new DocMeasure(fontProvider, styleDictionary, defaultStyle, this.imageMeasure, this.tableLayouts, images);


		function resetXYs(result) {
			_.each(result.linearNodeList, function (node) {
				node.resetXY();
			});
		}

		var result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);
		while (addPageBreaksIfNecessary(result.linearNodeList, result.pages)) {
			resetXYs(result);
			result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);
		}

		return result.pages;
	};

	LayoutBuilder.prototype.tryLayoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {

		this.linearNodeList = [];
		docStructure = this.docMeasure.measureDocument(docStructure);

		this.writer = new PageElementWriter(
			new DocumentContext(this.pageSize, this.pageMargins), this.tracker);

		var _this = this;
		this.writer.context().tracker.startTracking('pageAdded', function () {
			_this.addBackground(background);
		});

		this.addBackground(background);
		this.processNode(docStructure);
		this.addHeadersAndFooters(header, footer);
		/* jshint eqnull:true */
		if (watermark != null) {
			this.addWatermark(watermark, fontProvider, defaultStyle);
		}

		return {pages: this.writer.context().pages, linearNodeList: this.linearNodeList};
	};


	LayoutBuilder.prototype.addBackground = function (background) {
		var backgroundGetter = isFunction(background) ? background : function () {
			return background;
		};

		var pageBackground = backgroundGetter(this.writer.context().page + 1);

		if (pageBackground) {
			var pageSize = this.writer.context().getCurrentPage().pageSize;
			this.writer.beginUnbreakableBlock(pageSize.width, pageSize.height);
			this.processNode(this.docMeasure.measureDocument(pageBackground));
			this.writer.commitUnbreakableBlock(0, 0);
		}
	};

	LayoutBuilder.prototype.addStaticRepeatable = function (headerOrFooter, sizeFunction) {
		this.addDynamicRepeatable(function () {
			return headerOrFooter;
		}, sizeFunction);
	};

	LayoutBuilder.prototype.addDynamicRepeatable = function (nodeGetter, sizeFunction) {
		var pages = this.writer.context().pages;

		for (var pageIndex = 0, l = pages.length; pageIndex < l; pageIndex++) {
			this.writer.context().page = pageIndex;

			var node = nodeGetter(pageIndex + 1, l, this.writer.context().pages[pageIndex].pageSize);

			if (node) {
				var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.pageMargins);
				this.writer.beginUnbreakableBlock(sizes.width, sizes.height);
				this.processNode(this.docMeasure.measureDocument(node));
				this.writer.commitUnbreakableBlock(sizes.x, sizes.y);
			}
		}
	};

	LayoutBuilder.prototype.addHeadersAndFooters = function (header, footer) {
		var headerSizeFct = function (pageSize, pageMargins) {
			return {
				x: 0,
				y: 0,
				width: pageSize.width,
				height: pageMargins.top
			};
		};

		var footerSizeFct = function (pageSize, pageMargins) {
			return {
				x: 0,
				y: pageSize.height - pageMargins.bottom,
				width: pageSize.width,
				height: pageMargins.bottom
			};
		};

		if (isFunction(header)) {
			this.addDynamicRepeatable(header, headerSizeFct);
		} else if (header) {
			this.addStaticRepeatable(header, headerSizeFct);
		}

		if (isFunction(footer)) {
			this.addDynamicRepeatable(footer, footerSizeFct);
		} else if (footer) {
			this.addStaticRepeatable(footer, footerSizeFct);
		}
	};

	LayoutBuilder.prototype.addWatermark = function (watermark, fontProvider, defaultStyle) {
		if (typeof watermark === 'string') {
			watermark = {'text': watermark};
		}

		if (!watermark.text) { // empty watermark text
			return;
		}

		watermark.font = watermark.font || defaultStyle.font || 'Roboto';
		watermark.color = watermark.color || 'black';
		watermark.opacity = watermark.opacity || 0.6;
		watermark.bold = watermark.bold || false;
		watermark.italics = watermark.italics || false;

		var watermarkObject = {
			text: watermark.text,
			font: fontProvider.provideFont(watermark.font, watermark.bold, watermark.italics),
			size: getSize(this.pageSize, watermark, fontProvider),
			color: watermark.color,
			opacity: watermark.opacity
		};

		var pages = this.writer.context().pages;
		for (var i = 0, l = pages.length; i < l; i++) {
			pages[i].watermark = watermarkObject;
		}

		function getSize(pageSize, watermark, fontProvider) {
			var width = pageSize.width;
			var height = pageSize.height;
			var targetWidth = Math.sqrt(width * width + height * height) * 0.8; /* page diagonal * sample factor */
			var textTools = new TextTools(fontProvider);
			var styleContextStack = new StyleContextStack(null, {font: watermark.font, bold: watermark.bold, italics: watermark.italics});
			var size;

			/**
			 * Binary search the best font size.
			 * Initial bounds [0, 1000]
			 * Break when range < 1
			 */
			var a = 0;
			var b = 1000;
			var c = (a + b) / 2;
			while (Math.abs(a - b) > 1) {
				styleContextStack.push({
					fontSize: c
				});
				size = textTools.sizeOfString(watermark.text, styleContextStack);
				if (size.width > targetWidth) {
					b = c;
					c = (a + b) / 2;
				} else if (size.width < targetWidth) {
					a = c;
					c = (a + b) / 2;
				}
				styleContextStack.pop();
			}
			/*
			 End binary search
			 */
			return {size: size, fontSize: c};
		}
	};

	function decorateNode(node) {
		var x = node.x, y = node.y;
		node.positions = [];

		_.each(node.canvas, function (vector) {
			var x = vector.x, y = vector.y, x1 = vector.x1, y1 = vector.y1, x2 = vector.x2, y2 = vector.y2;
			vector.resetXY = function () {
				vector.x = x;
				vector.y = y;
				vector.x1 = x1;
				vector.y1 = y1;
				vector.x2 = x2;
				vector.y2 = y2;
			};
		});

		node.resetXY = function () {
			node.x = x;
			node.y = y;
			_.each(node.canvas, function (vector) {
				vector.resetXY();
			});
		};
	}

	LayoutBuilder.prototype.processNode = function (node) {
		var self = this;

		this.linearNodeList.push(node);
		decorateNode(node);

		applyMargins(function () {
			var absPosition = node.absolutePosition;
			if (absPosition) {
				self.writer.context().beginDetachedBlock();
				self.writer.context().moveTo(absPosition.x || 0, absPosition.y || 0);
			}

			var relPosition = node.relativePosition;
			if (relPosition) {
				self.writer.context().beginDetachedBlock();
				self.writer.context().moveTo((relPosition.x || 0) + self.writer.context().x, (relPosition.y || 0) + self.writer.context().y);
			}

			if (node.stack) {
				self.processVerticalContainer(node);
			} else if (node.columns) {
				self.processColumns(node);
			} else if (node.ul) {
				self.processList(false, node);
			} else if (node.ol) {
				self.processList(true, node);
			} else if (node.table) {
				self.processTable(node);
			} else if (node.text !== undefined) {
				self.processLeaf(node);
			} else if (node.image) {
				self.processImage(node);
			} else if (node.canvas) {
				self.processCanvas(node);
			} else if (node.qr) {
				self.processQr(node);
			} else if (!node._span) {
				throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
			}

			if (absPosition || relPosition) {
				self.writer.context().endDetachedBlock();
			}
		});

		function applyMargins(callback) {
			var margin = node._margin;

			if (node.pageBreak === 'before') {
				self.writer.moveToNextPage(node.pageOrientation);
			}

			if (margin) {
				self.writer.context().moveDown(margin[1]);
				self.writer.context().addMargin(margin[0], margin[2]);
			}

			callback();

			if (margin) {
				self.writer.context().addMargin(-margin[0], -margin[2]);
				self.writer.context().moveDown(margin[3]);
			}

			if (node.pageBreak === 'after') {
				self.writer.moveToNextPage(node.pageOrientation);
			}
		}
	};

	// vertical container
	LayoutBuilder.prototype.processVerticalContainer = function (node) {
		var self = this;
		node.stack.forEach(function (item) {
			self.processNode(item);
			addAll(node.positions, item.positions);

			//TODO: paragraph gap
		});
	};

	// columns
	LayoutBuilder.prototype.processColumns = function (columnNode) {
		var columns = columnNode.columns;
		var availableWidth = this.writer.context().availableWidth;
		var gaps = gapArray(columnNode._gap);

		if (gaps) {
			availableWidth -= (gaps.length - 1) * columnNode._gap;
		}

		ColumnCalculator.buildColumnWidths(columns, availableWidth);
		var result = this.processRow(columns, columns, gaps);
		addAll(columnNode.positions, result.positions);


		function gapArray(gap) {
			if (!gap) {
				return null;
			}

			var gaps = [];
			gaps.push(0);

			for (var i = columns.length - 1; i > 0; i--) {
				gaps.push(gap);
			}

			return gaps;
		}
	};

	LayoutBuilder.prototype.processRow = function (columns, widths, gaps, tableBody, tableRow) {
		var self = this;
		var pageBreaks = [], positions = [];

		this.tracker.auto('pageChanged', storePageBreakData, function () {
			widths = widths || columns;

			self.writer.context().beginColumnGroup();

			for (var i = 0, l = columns.length; i < l; i++) {
				var column = columns[i];
				var width = widths[i]._calcWidth;
				var leftOffset = colLeftOffset(i);

				if (column.colSpan && column.colSpan > 1) {
					for (var j = 1; j < column.colSpan; j++) {
						width += widths[++i]._calcWidth + gaps[i];
					}
				}

				self.writer.context().beginColumn(width, leftOffset, getEndingCell(column, i));
				if (!column._span) {
					self.processNode(column);
					addAll(positions, column.positions);
				} else if (column._columnEndingContext) {
					// row-span ending
					self.writer.context().markEnding(column);
				}
			}

			self.writer.context().completeColumnGroup();
		});

		return {pageBreaks: pageBreaks, positions: positions};

		function storePageBreakData(data) {
			var pageDesc;

			for (var i = 0, l = pageBreaks.length; i < l; i++) {
				var desc = pageBreaks[i];
				if (desc.prevPage === data.prevPage) {
					pageDesc = desc;
					break;
				}
			}

			if (!pageDesc) {
				pageDesc = data;
				pageBreaks.push(pageDesc);
			}
			pageDesc.prevY = Math.max(pageDesc.prevY, data.prevY);
			pageDesc.y = Math.min(pageDesc.y, data.y);
		}

		function colLeftOffset(i) {
			if (gaps && gaps.length > i) {
				return gaps[i];
			}
			return 0;
		}

		function getEndingCell(column, columnIndex) {
			if (column.rowSpan && column.rowSpan > 1) {
				var endingRow = tableRow + column.rowSpan - 1;
				if (endingRow >= tableBody.length) {
					throw 'Row span for column ' + columnIndex + ' (with indexes starting from 0) exceeded row count';
				}
				return tableBody[endingRow][columnIndex];
			}

			return null;
		}
	};

	// lists
	LayoutBuilder.prototype.processList = function (orderedList, node) {
		var self = this,
			items = orderedList ? node.ol : node.ul,
			gapSize = node._gapSize;

		this.writer.context().addMargin(gapSize.width);

		var nextMarker;
		this.tracker.auto('lineAdded', addMarkerToFirstLeaf, function () {
			items.forEach(function (item) {
				nextMarker = item.listMarker;
				self.processNode(item);
				addAll(node.positions, item.positions);
			});
		});

		this.writer.context().addMargin(-gapSize.width);

		function addMarkerToFirstLeaf(line) {
			// I'm not very happy with the way list processing is implemented
			// (both code and algorithm should be rethinked)
			if (nextMarker) {
				var marker = nextMarker;
				nextMarker = null;

				if (marker.canvas) {
					var vector = marker.canvas[0];

					offsetVector(vector, -marker._minWidth, 0);
					self.writer.addVector(vector);
				} else if (marker._inlines) {
					var markerLine = new Line(self.pageSize.width);
					markerLine.addInline(marker._inlines[0]);
					markerLine.x = -marker._minWidth;
					markerLine.y = line.getAscenderHeight() - markerLine.getAscenderHeight();
					self.writer.addLine(markerLine, true);
				}
			}
		}
	};

	// tables
	LayoutBuilder.prototype.processTable = function (tableNode) {
		var processor = new TableProcessor(tableNode);

		processor.beginTable(this.writer);

		for (var i = 0, l = tableNode.table.body.length; i < l; i++) {
			processor.beginRow(i, this.writer);

			var result = this.processRow(tableNode.table.body[i], tableNode.table.widths, tableNode._offsets.offsets, tableNode.table.body, i);
			addAll(tableNode.positions, result.positions);

			processor.endRow(i, this.writer, result.pageBreaks);
		}

		processor.endTable(this.writer);
	};

	// leafs (texts)
	LayoutBuilder.prototype.processLeaf = function (node) {
		var line = this.buildNextLine(node);
		var currentHeight = (line) ? line.getHeight() : 0;
		var maxHeight = node.maxHeight || -1;

		while (line && (maxHeight === -1 || currentHeight < maxHeight)) {
			var positions = this.writer.addLine(line);
			node.positions.push(positions);
			line = this.buildNextLine(node);
			if (line) {
				currentHeight += line.getHeight();
			}
		}
	};

	LayoutBuilder.prototype.buildNextLine = function (textNode) {
		if (!textNode._inlines || textNode._inlines.length === 0) {
			return null;
		}

		var line = new Line(this.writer.context().availableWidth);

		while (textNode._inlines && textNode._inlines.length > 0 && line.hasEnoughSpaceForInline(textNode._inlines[0])) {
			line.addInline(textNode._inlines.shift());
		}

		line.lastLineInParagraph = textNode._inlines.length === 0;

		return line;
	};

	// images
	LayoutBuilder.prototype.processImage = function (node) {
		var position = this.writer.addImage(node);
		node.positions.push(position);
	};

	LayoutBuilder.prototype.processCanvas = function (node) {
		var height = node._minHeight;

		if (this.writer.context().availableHeight < height) {
			// TODO: support for canvas larger than a page
			// TODO: support for other overflow methods

			this.writer.moveToNextPage();
		}

		node.canvas.forEach(function (vector) {
			var position = this.writer.addVector(vector);
			node.positions.push(position);
		}, this);

		this.writer.context().moveDown(height);
	};

	LayoutBuilder.prototype.processQr = function (node) {
		var position = this.writer.addQr(node);
		node.positions.push(position);
	};

	module.exports = LayoutBuilder;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	/**
	 * Creates an instance of TraversalTracker
	 *
	 * @constructor
	 */
	function TraversalTracker() {
		this.events = {};
	}

	TraversalTracker.prototype.startTracking = function (event, cb) {
		var callbacks = (this.events[event] || (this.events[event] = []));

		if (callbacks.indexOf(cb) < 0) {
			callbacks.push(cb);
		}
	};

	TraversalTracker.prototype.stopTracking = function (event, cb) {
		var callbacks = this.events[event];

		if (callbacks) {
			var index = callbacks.indexOf(cb);
			if (index >= 0) {
				callbacks.splice(index, 1);
			}
		}
	};

	TraversalTracker.prototype.emit = function (event) {
		var args = Array.prototype.slice.call(arguments, 1);

		var callbacks = this.events[event];

		if (callbacks) {
			callbacks.forEach(function (cb) {
				cb.apply(this, args);
			});
		}
	};

	TraversalTracker.prototype.auto = function (event, cb, innerBlock) {
		this.startTracking(event, cb);
		innerBlock();
		this.stopTracking(event, cb);
	};

	module.exports = TraversalTracker;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var TextTools = __webpack_require__(7);
	var StyleContextStack = __webpack_require__(14);
	var ColumnCalculator = __webpack_require__(15);
	var fontStringify = __webpack_require__(16).fontStringify;
	var pack = __webpack_require__(16).pack;
	var qrEncoder = __webpack_require__(17);

	/**
	 * @private
	 */
	function DocMeasure(fontProvider, styleDictionary, defaultStyle, imageMeasure, tableLayouts, images) {
		this.textTools = new TextTools(fontProvider);
		this.styleStack = new StyleContextStack(styleDictionary, defaultStyle);
		this.imageMeasure = imageMeasure;
		this.tableLayouts = tableLayouts;
		this.images = images;
		this.autoImageIndex = 1;
	}

	/**
	 * Measures all nodes and sets min/max-width properties required for the second
	 * layout-pass.
	 * @param  {Object} docStructure document-definition-object
	 * @return {Object}              document-measurement-object
	 */
	DocMeasure.prototype.measureDocument = function (docStructure) {
		return this.measureNode(docStructure);
	};

	DocMeasure.prototype.measureNode = function (node) {
		// expand shortcuts
		if (Array.isArray(node)) {
			node = {stack: node};
		} else if (typeof node === 'string' || node instanceof String) {
			node = {text: node};
		} else if (typeof node === 'number' || typeof node === 'boolean') {
			node = {text: node.toString()};
		} else if (node === null) {
			node = {text: ''};
		}

		// Deal with empty nodes to prevent crash in getNodeMargin
		if (Object.keys(node).length === 0) {
			// A warning could be logged: console.warn('pdfmake: Empty node, ignoring it');
			node = {text: ''};
		}

		var self = this;

		return this.styleStack.auto(node, function () {
			// TODO: refactor + rethink whether this is the proper way to handle margins
			node._margin = getNodeMargin(node);

			if (node.columns) {
				return extendMargins(self.measureColumns(node));
			} else if (node.stack) {
				return extendMargins(self.measureVerticalContainer(node));
			} else if (node.ul) {
				return extendMargins(self.measureUnorderedList(node));
			} else if (node.ol) {
				return extendMargins(self.measureOrderedList(node));
			} else if (node.table) {
				return extendMargins(self.measureTable(node));
			} else if (node.text !== undefined) {
				return extendMargins(self.measureLeaf(node));
			} else if (node.image) {
				return extendMargins(self.measureImage(node));
			} else if (node.canvas) {
				return extendMargins(self.measureCanvas(node));
			} else if (node.qr) {
				return extendMargins(self.measureQr(node));
			} else {
				throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
			}
		});

		function extendMargins(node) {
			var margin = node._margin;

			if (margin) {
				node._minWidth += margin[0] + margin[2];
				node._maxWidth += margin[0] + margin[2];
			}

			return node;
		}

		function getNodeMargin() {

			function processSingleMargins(node, currentMargin) {
				if (node.marginLeft || node.marginTop || node.marginRight || node.marginBottom) {
					return [
						node.marginLeft || currentMargin[0] || 0,
						node.marginTop || currentMargin[1] || 0,
						node.marginRight || currentMargin[2] || 0,
						node.marginBottom || currentMargin[3] || 0
					];
				}
				return currentMargin;
			}

			function flattenStyleArray(styleArray) {
				var flattenedStyles = {};
				for (var i = styleArray.length - 1; i >= 0; i--) {
					var styleName = styleArray[i];
					var style = self.styleStack.styleDictionary[styleName];
					for (var key in style) {
						if (style.hasOwnProperty(key)) {
							flattenedStyles[key] = style[key];
						}
					}
				}
				return flattenedStyles;
			}

			function convertMargin(margin) {
				if (typeof margin === 'number' || margin instanceof Number) {
					margin = [margin, margin, margin, margin];
				} else if (Array.isArray(margin)) {
					if (margin.length === 2) {
						margin = [margin[0], margin[1], margin[0], margin[1]];
					}
				}
				return margin;
			}

			var margin = [undefined, undefined, undefined, undefined];

			if (node.style) {
				var styleArray = (Array.isArray(node.style)) ? node.style : [node.style];
				var flattenedStyleArray = flattenStyleArray(styleArray);

				if (flattenedStyleArray) {
					margin = processSingleMargins(flattenedStyleArray, margin);
				}

				if (flattenedStyleArray.margin) {
					margin = convertMargin(flattenedStyleArray.margin);
				}
			}

			margin = processSingleMargins(node, margin);

			if (node.margin) {
				margin = convertMargin(node.margin);
			}

			if (margin[0] === undefined && margin[1] === undefined && margin[2] === undefined && margin[3] === undefined) {
				return null;
			} else {
				return margin;
			}
		}
	};

	DocMeasure.prototype.convertIfBase64Image = function (node) {
		if (/^data:image\/(jpeg|jpg|png);base64,/.test(node.image)) {
			var label = '$$pdfmake$$' + this.autoImageIndex++;
			this.images[label] = node.image;
			node.image = label;
		}
	};

	DocMeasure.prototype.measureImage = function (node) {
		if (this.images) {
			this.convertIfBase64Image(node);
		}

		var imageSize = this.imageMeasure.measureImage(node.image);

		if (node.fit) {
			var factor = (imageSize.width / imageSize.height > node.fit[0] / node.fit[1]) ? node.fit[0] / imageSize.width : node.fit[1] / imageSize.height;
			node._width = node._minWidth = node._maxWidth = imageSize.width * factor;
			node._height = imageSize.height * factor;
		} else {
			node._width = node._minWidth = node._maxWidth = node.width || imageSize.width;
			node._height = node.height || (imageSize.height * node._width / imageSize.width);
		}

		node._alignment = this.styleStack.getProperty('alignment');
		return node;
	};

	DocMeasure.prototype.measureLeaf = function (node) {

		// Make sure style properties of the node itself are considered when building inlines.
		// We could also just pass [node] to buildInlines, but that fails for bullet points.
		var styleStack = this.styleStack.clone();
		styleStack.push(node);

		var data = this.textTools.buildInlines(node.text, styleStack);

		node._inlines = data.items;
		node._minWidth = data.minWidth;
		node._maxWidth = data.maxWidth;

		return node;
	};

	DocMeasure.prototype.measureVerticalContainer = function (node) {
		var items = node.stack;

		node._minWidth = 0;
		node._maxWidth = 0;

		for (var i = 0, l = items.length; i < l; i++) {
			items[i] = this.measureNode(items[i]);

			node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
			node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);
		}

		return node;
	};

	DocMeasure.prototype.gapSizeForList = function () {
		return this.textTools.sizeOfString('9. ', this.styleStack);
	};

	DocMeasure.prototype.buildUnorderedMarker = function (styleStack, gapSize, type) {
		function buildDisc(gapSize, color) {
			// TODO: ascender-based calculations
			var radius = gapSize.fontSize / 6;
			return {
				canvas: [{
						x: radius,
						y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,
						r1: radius,
						r2: radius,
						type: 'ellipse',
						color: color
					}]
			};
		}

		function buildSquare(gapSize, color) {
			// TODO: ascender-based calculations
			var size = gapSize.fontSize / 3;
			return {
				canvas: [{
						x: 0,
						y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - (gapSize.fontSize / 3) - (size / 2),
						h: size,
						w: size,
						type: 'rect',
						color: color
					}]
			};
		}

		function buildCircle(gapSize, color) {
			// TODO: ascender-based calculations
			var radius = gapSize.fontSize / 6;
			return {
				canvas: [{
						x: radius,
						y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,
						r1: radius,
						r2: radius,
						type: 'ellipse',
						lineColor: color
					}]
			};
		}

		var marker;
		var color = styleStack.getProperty('markerColor') || styleStack.getProperty('color') || 'black';

		switch (type) {
			case 'circle':
				marker = buildCircle(gapSize, color);
				break;

			case 'square':
				marker = buildSquare(gapSize, color);
				break;

			case 'none':
				marker = {};
				break;

			case 'disc':
			default:
				marker = buildDisc(gapSize, color);
				break;
		}

		marker._minWidth = marker._maxWidth = gapSize.width;
		marker._minHeight = marker._maxHeight = gapSize.height;

		return marker;
	};

	DocMeasure.prototype.buildOrderedMarker = function (counter, styleStack, type, separator) {
		function prepareAlpha(counter) {
			function toAlpha(num) {
				return (num >= 26 ? toAlpha((num / 26 >> 0) - 1) : '') + 'abcdefghijklmnopqrstuvwxyz'[num % 26 >> 0];
			}

			if (counter < 1) {
				return counter.toString();
			}

			return toAlpha(counter - 1);
		}

		function prepareRoman(counter) {
			if (counter < 1 || counter > 4999) {
				return counter.toString();
			}
			var num = counter;
			var lookup = {M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1}, roman = '', i;
			for (i in lookup) {
				while (num >= lookup[i]) {
					roman += i;
					num -= lookup[i];
				}
			}
			return roman;
		}

		function prepareDecimal(counter) {
			return counter.toString();
		}

		var counterText;
		switch (type) {
			case 'none':
				counterText = null;
				break;

			case 'upper-alpha':
				counterText = prepareAlpha(counter).toUpperCase();
				break;

			case 'lower-alpha':
				counterText = prepareAlpha(counter);
				break;

			case 'upper-roman':
				counterText = prepareRoman(counter);
				break;

			case 'lower-roman':
				counterText = prepareRoman(counter).toLowerCase();
				break;

			case 'decimal':
			default:
				counterText = prepareDecimal(counter);
				break;
		}

		if (counterText === null) {
			return {};
		}

		if (separator) {
			if (Array.isArray(separator)) {
				if (separator[0]) {
					counterText = separator[0] + counterText;
				}

				if (separator[1]) {
					counterText += separator[1];
				}
				counterText += ' ';
			} else {
				counterText += separator + ' ';
			}
		}

		var textArray = {text: counterText};
		var markerColor = styleStack.getProperty('markerColor');
		if (markerColor) {
			textArray.color = markerColor;
		}

		return {_inlines: this.textTools.buildInlines(textArray, styleStack).items};
	};

	DocMeasure.prototype.measureUnorderedList = function (node) {
		var style = this.styleStack.clone();
		var items = node.ul;
		node.type = node.type || 'disc';
		node._gapSize = this.gapSizeForList();
		node._minWidth = 0;
		node._maxWidth = 0;

		for (var i = 0, l = items.length; i < l; i++) {
			var item = items[i] = this.measureNode(items[i]);

			if (!item.ol && !item.ul) {
				item.listMarker = this.buildUnorderedMarker(style, node._gapSize, node.type);
			}

			node._minWidth = Math.max(node._minWidth, items[i]._minWidth + node._gapSize.width);
			node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth + node._gapSize.width);
		}

		return node;
	};

	DocMeasure.prototype.measureOrderedList = function (node) {
		var style = this.styleStack.clone();
		var items = node.ol;
		node.type = node.type || 'decimal';
		node.separator = node.separator || '.';
		node.reversed = node.reversed || false;
		if (!node.start) {
			node.start = node.reversed ? items.length : 1;
		}
		node._gapSize = this.gapSizeForList();
		node._minWidth = 0;
		node._maxWidth = 0;

		var counter = node.start;
		for (var i = 0, l = items.length; i < l; i++) {
			var item = items[i] = this.measureNode(items[i]);

			if (!item.ol && !item.ul) {
				item.listMarker = this.buildOrderedMarker(item.counter || counter, style, node.type, node.separator);
				if (item.listMarker._inlines) {
					node._gapSize.width = Math.max(node._gapSize.width, item.listMarker._inlines[0].width);
				}
			}  // TODO: else - nested lists numbering

			node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
			node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);

			if (node.reversed) {
				counter--;
			} else {
				counter++;
			}
		}

		node._minWidth += node._gapSize.width;
		node._maxWidth += node._gapSize.width;

		for (var i = 0, l = items.length; i < l; i++) {
			var item = items[i];
			if (!item.ol && !item.ul) {
				item.listMarker._minWidth = item.listMarker._maxWidth = node._gapSize.width;
			}
		}

		return node;
	};

	DocMeasure.prototype.measureColumns = function (node) {
		var columns = node.columns;
		node._gap = this.styleStack.getProperty('columnGap') || 0;

		for (var i = 0, l = columns.length; i < l; i++) {
			columns[i] = this.measureNode(columns[i]);
		}

		var measures = ColumnCalculator.measureMinMax(columns);

		node._minWidth = measures.min + node._gap * (columns.length - 1);
		node._maxWidth = measures.max + node._gap * (columns.length - 1);

		return node;
	};

	DocMeasure.prototype.measureTable = function (node) {
		extendTableWidths(node);
		node._layout = getLayout(this.tableLayouts);
		node._offsets = getOffsets(node._layout);

		var colSpans = [];
		var col, row, cols, rows;

		for (col = 0, cols = node.table.body[0].length; col < cols; col++) {
			var c = node.table.widths[col];
			c._minWidth = 0;
			c._maxWidth = 0;

			for (row = 0, rows = node.table.body.length; row < rows; row++) {
				var rowData = node.table.body[row];
				var data = rowData[col];
				if (data === undefined) {
					console.error('Malformed table row ', rowData, 'in node ', node);
					throw 'Malformed table row, a cell is undefined.';
				}
				if (data === null) { // transform to object
					data = '';
				}
				if (!data._span) {
					data = rowData[col] = this.styleStack.auto(data, measureCb(this, data));

					if (data.colSpan && data.colSpan > 1) {
						markSpans(rowData, col, data.colSpan);
						colSpans.push({col: col, span: data.colSpan, minWidth: data._minWidth, maxWidth: data._maxWidth});
					} else {
						c._minWidth = Math.max(c._minWidth, data._minWidth);
						c._maxWidth = Math.max(c._maxWidth, data._maxWidth);
					}
				}

				if (data.rowSpan && data.rowSpan > 1) {
					markVSpans(node.table, row, col, data.rowSpan);
				}
			}
		}

		extendWidthsForColSpans();

		var measures = ColumnCalculator.measureMinMax(node.table.widths);

		node._minWidth = measures.min + node._offsets.total;
		node._maxWidth = measures.max + node._offsets.total;

		return node;

		function measureCb(_this, data) {
			return function () {
				if (data !== null && typeof data === 'object') {
					data.fillColor = _this.styleStack.getProperty('fillColor');
				}
				return _this.measureNode(data);
			};
		}

		function getLayout(tableLayouts) {
			var layout = node.layout;

			if (typeof node.layout === 'string' || node instanceof String) {
				layout = tableLayouts[layout];
			}

			/*jshint unused: false */
			var defaultLayout = {
				hLineWidth: function (i, node) {
					return 1;
				},
				vLineWidth: function (i, node) {
					return 1;
				},
				hLineColor: function (i, node) {
					return 'black';
				},
				vLineColor: function (i, node) {
					return 'black';
				},
				paddingLeft: function (i, node) {
					return 4;
				},
				paddingRight: function (i, node) {
					return 4;
				},
				paddingTop: function (i, node) {
					return 2;
				},
				paddingBottom: function (i, node) {
					return 2;
				},
				fillColor: function (i, node) {
					return null;
				},
				defaultBorder: true
			};

			return pack(defaultLayout, layout);
		}

		function getOffsets(layout) {
			var offsets = [];
			var totalOffset = 0;
			var prevRightPadding = 0;

			for (var i = 0, l = node.table.widths.length; i < l; i++) {
				var lOffset = prevRightPadding + layout.vLineWidth(i, node) + layout.paddingLeft(i, node);
				offsets.push(lOffset);
				totalOffset += lOffset;
				prevRightPadding = layout.paddingRight(i, node);
			}

			totalOffset += prevRightPadding + layout.vLineWidth(node.table.widths.length, node);

			return {
				total: totalOffset,
				offsets: offsets
			};
		}

		function extendWidthsForColSpans() {
			var q, j;

			for (var i = 0, l = colSpans.length; i < l; i++) {
				var span = colSpans[i];

				var currentMinMax = getMinMax(span.col, span.span, node._offsets);
				var minDifference = span.minWidth - currentMinMax.minWidth;
				var maxDifference = span.maxWidth - currentMinMax.maxWidth;

				if (minDifference > 0) {
					q = minDifference / span.span;

					for (j = 0; j < span.span; j++) {
						node.table.widths[span.col + j]._minWidth += q;
					}
				}

				if (maxDifference > 0) {
					q = maxDifference / span.span;

					for (j = 0; j < span.span; j++) {
						node.table.widths[span.col + j]._maxWidth += q;
					}
				}
			}
		}

		function getMinMax(col, span, offsets) {
			var result = {minWidth: 0, maxWidth: 0};

			for (var i = 0; i < span; i++) {
				result.minWidth += node.table.widths[col + i]._minWidth + (i ? offsets.offsets[col + i] : 0);
				result.maxWidth += node.table.widths[col + i]._maxWidth + (i ? offsets.offsets[col + i] : 0);
			}

			return result;
		}

		function markSpans(rowData, col, span) {
			for (var i = 1; i < span; i++) {
				rowData[col + i] = {
					_span: true,
					_minWidth: 0,
					_maxWidth: 0,
					rowSpan: rowData[col].rowSpan
				};
			}
		}

		function markVSpans(table, row, col, span) {
			for (var i = 1; i < span; i++) {
				table.body[row + i][col] = {
					_span: true,
					_minWidth: 0,
					_maxWidth: 0,
					fillColor: table.body[row][col].fillColor
				};
			}
		}

		function extendTableWidths(node) {
			if (!node.table.widths) {
				node.table.widths = 'auto';
			}

			if (typeof node.table.widths === 'string' || node.table.widths instanceof String) {
				node.table.widths = [node.table.widths];

				while (node.table.widths.length < node.table.body[0].length) {
					node.table.widths.push(node.table.widths[node.table.widths.length - 1]);
				}
			}

			for (var i = 0, l = node.table.widths.length; i < l; i++) {
				var w = node.table.widths[i];
				if (typeof w === 'number' || w instanceof Number || typeof w === 'string' || w instanceof String) {
					node.table.widths[i] = {width: w};
				}
			}
		}
	};

	DocMeasure.prototype.measureCanvas = function (node) {
		var w = 0, h = 0;

		for (var i = 0, l = node.canvas.length; i < l; i++) {
			var vector = node.canvas[i];

			switch (vector.type) {
				case 'ellipse':
					w = Math.max(w, vector.x + vector.r1);
					h = Math.max(h, vector.y + vector.r2);
					break;
				case 'rect':
					w = Math.max(w, vector.x + vector.w);
					h = Math.max(h, vector.y + vector.h);
					break;
				case 'line':
					w = Math.max(w, vector.x1, vector.x2);
					h = Math.max(h, vector.y1, vector.y2);
					break;
				case 'polyline':
					for (var i2 = 0, l2 = vector.points.length; i2 < l2; i2++) {
						w = Math.max(w, vector.points[i2].x);
						h = Math.max(h, vector.points[i2].y);
					}
					break;
			}
		}

		node._minWidth = node._maxWidth = w;
		node._minHeight = node._maxHeight = h;

		return node;
	};

	DocMeasure.prototype.measureQr = function (node) {
		node = qrEncoder.measure(node);
		node._alignment = this.styleStack.getProperty('alignment');
		return node;
	};

	module.exports = DocMeasure;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var LineBreaker = __webpack_require__(8);

	var LEADING = /^(\s)+/g;
	var TRAILING = /(\s)+$/g;

	/**
	 * Creates an instance of TextTools - text measurement utility
	 *
	 * @constructor
	 * @param {FontProvider} fontProvider
	 */
	function TextTools(fontProvider) {
		this.fontProvider = fontProvider;
	}

	/**
	 * Converts an array of strings (or inline-definition-objects) into a collection
	 * of inlines and calculated minWidth/maxWidth.
	 * and their min/max widths
	 * @param  {Object} textArray - an array of inline-definition-objects (or strings)
	 * @param  {Object} styleContextStack current style stack
	 * @return {Object}                   collection of inlines, minWidth, maxWidth
	 */
	TextTools.prototype.buildInlines = function (textArray, styleContextStack) {
		var measured = measure(this.fontProvider, textArray, styleContextStack);

		var minWidth = 0,
			maxWidth = 0,
			currentLineWidth;

		measured.forEach(function (inline) {
			minWidth = Math.max(minWidth, inline.width - inline.leadingCut - inline.trailingCut);

			if (!currentLineWidth) {
				currentLineWidth = {width: 0, leadingCut: inline.leadingCut, trailingCut: 0};
			}

			currentLineWidth.width += inline.width;
			currentLineWidth.trailingCut = inline.trailingCut;

			maxWidth = Math.max(maxWidth, getTrimmedWidth(currentLineWidth));

			if (inline.lineEnd) {
				currentLineWidth = null;
			}
		});

		if (getStyleProperty({}, styleContextStack, 'noWrap', false)) {
			minWidth = maxWidth;
		}

		return {
			items: measured,
			minWidth: minWidth,
			maxWidth: maxWidth
		};

		function getTrimmedWidth(item) {
			return Math.max(0, item.width - item.leadingCut - item.trailingCut);
		}
	};

	/**
	 * Returns size of the specified string (without breaking it) using the current style
	 * @param  {String} text              text to be measured
	 * @param  {Object} styleContextStack current style stack
	 * @return {Object}                   size of the specified string
	 */
	TextTools.prototype.sizeOfString = function (text, styleContextStack) {
		text = text ? text.toString().replace('\t', '    ') : '';

		//TODO: refactor - extract from measure
		var fontName = getStyleProperty({}, styleContextStack, 'font', 'Roboto');
		var fontSize = getStyleProperty({}, styleContextStack, 'fontSize', 12);
		var bold = getStyleProperty({}, styleContextStack, 'bold', false);
		var italics = getStyleProperty({}, styleContextStack, 'italics', false);
		var lineHeight = getStyleProperty({}, styleContextStack, 'lineHeight', 1);

		var font = this.fontProvider.provideFont(fontName, bold, italics);

		return {
			width: font.widthOfString(text, fontSize),
			height: font.lineHeight(fontSize) * lineHeight,
			fontSize: fontSize,
			lineHeight: lineHeight,
			ascender: font.ascender / 1000 * fontSize,
			descender: font.descender / 1000 * fontSize
		};
	};

	function splitWords(text, noWrap) {
		var results = [];
		text = text.replace('\t', '    ');

		if (noWrap) {
			results.push({text: text});
			return results;
		}

		var breaker = new LineBreaker(text);
		var last = 0;
		var bk;

		while (bk = breaker.nextBreak()) {
			var word = text.slice(last, bk.position);

			if (bk.required || word.match(/\r?\n$|\r$/)) { // new line
				word = word.replace(/\r?\n$|\r$/, '');
				results.push({text: word, lineEnd: true});
			} else {
				results.push({text: word});
			}

			last = bk.position;
		}

		return results;
	}

	function copyStyle(source, destination) {
		destination = destination || {};
		source = source || {}; //TODO: default style

		for (var key in source) {
			if (key != 'text' && source.hasOwnProperty(key)) {
				destination[key] = source[key];
			}
		}

		return destination;
	}

	function normalizeTextArray(array, styleContextStack) {
		var results = [];

		if (!Array.isArray(array)) {
			array = [array];
		}

		for (var i = 0, l = array.length; i < l; i++) {
			var item = array[i];
			var style = null;
			var words;

			var noWrap = getStyleProperty(item || {}, styleContextStack, 'noWrap', false);
			if (item !== null && (typeof item === 'object' || item instanceof Object)) {
				words = splitWords(normalizeString(item.text), noWrap);
				style = copyStyle(item);
			} else {
				words = splitWords(normalizeString(item), noWrap);
			}

			for (var i2 = 0, l2 = words.length; i2 < l2; i2++) {
				var result = {
					text: words[i2].text
				};

				if (words[i2].lineEnd) {
					result.lineEnd = true;
				}

				copyStyle(style, result);

				results.push(result);
			}
		}

		return results;
	}

	function normalizeString(value) {
		if (value === undefined || value === null) {
			return '';
		} else if (typeof value === 'number') {
			return value.toString();
		} else if (typeof value === 'string' || value instanceof String) {
			return value;
		} else {
			return value.toString();
		}
	}

	function getStyleProperty(item, styleContextStack, property, defaultValue) {
		var value;

		if (item[property] !== undefined && item[property] !== null) {
			// item defines this property
			return item[property];
		}

		if (!styleContextStack) {
			return defaultValue;
		}

		styleContextStack.auto(item, function () {
			value = styleContextStack.getProperty(property);
		});

		if (value !== null && value !== undefined) {
			return value;
		} else {
			return defaultValue;
		}
	}

	function measure(fontProvider, textArray, styleContextStack) {
		var normalized = normalizeTextArray(textArray, styleContextStack);

		normalized.forEach(function (item) {
			var fontName = getStyleProperty(item, styleContextStack, 'font', 'Roboto');
			var fontSize = getStyleProperty(item, styleContextStack, 'fontSize', 12);
			var bold = getStyleProperty(item, styleContextStack, 'bold', false);
			var italics = getStyleProperty(item, styleContextStack, 'italics', false);
			var color = getStyleProperty(item, styleContextStack, 'color', 'black');
			var decoration = getStyleProperty(item, styleContextStack, 'decoration', null);
			var decorationColor = getStyleProperty(item, styleContextStack, 'decorationColor', null);
			var decorationStyle = getStyleProperty(item, styleContextStack, 'decorationStyle', null);
			var background = getStyleProperty(item, styleContextStack, 'background', null);
			var lineHeight = getStyleProperty(item, styleContextStack, 'lineHeight', 1);
			var link = getStyleProperty(item, styleContextStack, 'link', null);

			var font = fontProvider.provideFont(fontName, bold, italics);

			// TODO: character spacing
			item.width = font.widthOfString(item.text, fontSize);
			item.height = font.lineHeight(fontSize) * lineHeight;

			var leadingSpaces = item.text.match(LEADING);
			var trailingSpaces = item.text.match(TRAILING);
			if (leadingSpaces) {
				item.leadingCut = font.widthOfString(leadingSpaces[0], fontSize);
			} else {
				item.leadingCut = 0;
			}

			if (trailingSpaces) {
				item.trailingCut = font.widthOfString(trailingSpaces[0], fontSize);
			} else {
				item.trailingCut = 0;
			}

			item.alignment = getStyleProperty(item, styleContextStack, 'alignment', 'left');
			item.font = font;
			item.fontSize = fontSize;
			item.color = color;
			item.decoration = decoration;
			item.decorationColor = decorationColor;
			item.decorationStyle = decorationStyle;
			item.background = background;
			item.link = link;
		});

		return normalized;
	}

	/****TESTS**** (add a leading '/' to uncomment)
	 TextTools.prototype.splitWords = splitWords;
	 TextTools.prototype.normalizeTextArray = normalizeTextArray;
	 TextTools.prototype.measure = measure;
	 // */


	module.exports = TextTools;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, base64, characterClasses, classTrie, data, fs, pairTable, _ref, _ref1;

	  UnicodeTrie = __webpack_require__(9);

	  fs = __webpack_require__(10);

	  base64 = __webpack_require__(11);

	  _ref = __webpack_require__(12), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;

	  _ref1 = __webpack_require__(13), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;

	  data = base64.toByteArray(fs.readFileSync(__dirname + '/classes.trie', 'base64'));

	  classTrie = new UnicodeTrie(data);

	  LineBreaker = (function() {
	    var Break, mapClass, mapFirst;

	    function LineBreaker(string) {
	      this.string = string;
	      this.pos = 0;
	      this.lastPos = 0;
	      this.curClass = null;
	      this.nextClass = null;
	    }

	    LineBreaker.prototype.nextCodePoint = function() {
	      var code, next;
	      code = this.string.charCodeAt(this.pos++);
	      next = this.string.charCodeAt(this.pos);
	      if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {
	        this.pos++;
	        return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;
	      }
	      return code;
	    };

	    mapClass = function(c) {
	      switch (c) {
	        case AI:
	          return AL;
	        case SA:
	        case SG:
	        case XX:
	          return AL;
	        case CJ:
	          return NS;
	        default:
	          return c;
	      }
	    };

	    mapFirst = function(c) {
	      switch (c) {
	        case LF:
	        case NL:
	          return BK;
	        case CB:
	          return BA;
	        case SP:
	          return WJ;
	        default:
	          return c;
	      }
	    };

	    LineBreaker.prototype.nextCharClass = function(first) {
	      if (first == null) {
	        first = false;
	      }
	      return mapClass(classTrie.get(this.nextCodePoint()));
	    };

	    Break = (function() {
	      function Break(position, required) {
	        this.position = position;
	        this.required = required != null ? required : false;
	      }

	      return Break;

	    })();

	    LineBreaker.prototype.nextBreak = function() {
	      var cur, lastClass, shouldBreak;
	      if (this.curClass == null) {
	        this.curClass = mapFirst(this.nextCharClass());
	      }
	      while (this.pos < this.string.length) {
	        this.lastPos = this.pos;
	        lastClass = this.nextClass;
	        this.nextClass = this.nextCharClass();
	        if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {
	          this.curClass = mapFirst(mapClass(this.nextClass));
	          return new Break(this.lastPos, true);
	        }
	        cur = (function() {
	          switch (this.nextClass) {
	            case SP:
	              return this.curClass;
	            case BK:
	            case LF:
	            case NL:
	              return BK;
	            case CR:
	              return CR;
	            case CB:
	              return BA;
	          }
	        }).call(this);
	        if (cur != null) {
	          this.curClass = cur;
	          if (this.nextClass === CB) {
	            return new Break(this.lastPos);
	          }
	          continue;
	        }
	        shouldBreak = false;
	        switch (pairTable[this.curClass][this.nextClass]) {
	          case DI_BRK:
	            shouldBreak = true;
	            break;
	          case IN_BRK:
	            shouldBreak = lastClass === SP;
	            break;
	          case CI_BRK:
	            shouldBreak = lastClass === SP;
	            if (!shouldBreak) {
	              continue;
	            }
	            break;
	          case CP_BRK:
	            if (lastClass !== SP) {
	              continue;
	            }
	        }
	        this.curClass = this.nextClass;
	        if (shouldBreak) {
	          return new Break(this.lastPos);
	        }
	      }
	      if (this.pos >= this.string.length) {
	        if (this.lastPos < this.string.length) {
	          this.lastPos = this.string.length;
	          return new Break(this.string.length);
	        } else {
	          return null;
	        }
	      }
	    };

	    return LineBreaker;

	  })();

	  module.exports = LineBreaker;

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 12 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;

	  exports.OP = OP = 0;

	  exports.CL = CL = 1;

	  exports.CP = CP = 2;

	  exports.QU = QU = 3;

	  exports.GL = GL = 4;

	  exports.NS = NS = 5;

	  exports.EX = EX = 6;

	  exports.SY = SY = 7;

	  exports.IS = IS = 8;

	  exports.PR = PR = 9;

	  exports.PO = PO = 10;

	  exports.NU = NU = 11;

	  exports.AL = AL = 12;

	  exports.HL = HL = 13;

	  exports.ID = ID = 14;

	  exports.IN = IN = 15;

	  exports.HY = HY = 16;

	  exports.BA = BA = 17;

	  exports.BB = BB = 18;

	  exports.B2 = B2 = 19;

	  exports.ZW = ZW = 20;

	  exports.CM = CM = 21;

	  exports.WJ = WJ = 22;

	  exports.H2 = H2 = 23;

	  exports.H3 = H3 = 24;

	  exports.JL = JL = 25;

	  exports.JV = JV = 26;

	  exports.JT = JT = 27;

	  exports.RI = RI = 28;

	  exports.AI = AI = 29;

	  exports.BK = BK = 30;

	  exports.CB = CB = 31;

	  exports.CJ = CJ = 32;

	  exports.CR = CR = 33;

	  exports.LF = LF = 34;

	  exports.NL = NL = 35;

	  exports.SA = SA = 36;

	  exports.SG = SG = 37;

	  exports.SP = SP = 38;

	  exports.XX = XX = 39;

	}).call(this);


/***/ },
/* 13 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;

	  exports.DI_BRK = DI_BRK = 0;

	  exports.IN_BRK = IN_BRK = 1;

	  exports.CI_BRK = CI_BRK = 2;

	  exports.CP_BRK = CP_BRK = 3;

	  exports.PR_BRK = PR_BRK = 4;

	  exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];

	}).call(this);


/***/ },
/* 14 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	/**
	 * Creates an instance of StyleContextStack used for style inheritance and style overrides
	 *
	 * @constructor
	 * @this {StyleContextStack}
	 * @param {Object} named styles dictionary
	 * @param {Object} optional default style definition
	 */
	function StyleContextStack(styleDictionary, defaultStyle) {
		this.defaultStyle = defaultStyle || {};
		this.styleDictionary = styleDictionary;
		this.styleOverrides = [];
	}

	/**
	 * Creates cloned version of current stack
	 * @return {StyleContextStack} current stack snapshot
	 */
	StyleContextStack.prototype.clone = function () {
		var stack = new StyleContextStack(this.styleDictionary, this.defaultStyle);

		this.styleOverrides.forEach(function (item) {
			stack.styleOverrides.push(item);
		});

		return stack;
	};

	/**
	 * Pushes style-name or style-overrides-object onto the stack for future evaluation
	 *
	 * @param {String|Object} styleNameOrOverride style-name (referring to styleDictionary) or
	 *                                            a new dictionary defining overriding properties
	 */
	StyleContextStack.prototype.push = function (styleNameOrOverride) {
		this.styleOverrides.push(styleNameOrOverride);
	};

	/**
	 * Removes last style-name or style-overrides-object from the stack
	 *
	 * @param {Number} howMany - optional number of elements to be popped (if not specified,
	 *                           one element will be removed from the stack)
	 */
	StyleContextStack.prototype.pop = function (howMany) {
		howMany = howMany || 1;

		while (howMany-- > 0) {
			this.styleOverrides.pop();
		}
	};

	/**
	 * Creates a set of named styles or/and a style-overrides-object based on the item,
	 * pushes those elements onto the stack for future evaluation and returns the number
	 * of elements pushed, so they can be easily poped then.
	 *
	 * @param {Object} item - an object with optional style property and/or style overrides
	 * @return the number of items pushed onto the stack
	 */
	StyleContextStack.prototype.autopush = function (item) {
		if (typeof item === 'string' || item instanceof String) {
			return 0;
		}

		var styleNames = [];

		if (item.style) {
			if (Array.isArray(item.style)) {
				styleNames = item.style;
			} else {
				styleNames = [item.style];
			}
		}

		for (var i = 0, l = styleNames.length; i < l; i++) {
			this.push(styleNames[i]);
		}

		var styleOverrideObject = {};
		var pushSOO = false;

		[
			'font',
			'fontSize',
			'bold',
			'italics',
			'alignment',
			'color',
			'columnGap',
			'fillColor',
			'decoration',
			'decorationStyle',
			'decorationColor',
			'background',
			'lineHeight',
			'noWrap',
			'markerColor'
				//'tableCellPadding'
				// 'cellBorder',
				// 'headerCellBorder',
				// 'oddRowCellBorder',
				// 'evenRowCellBorder',
				// 'tableBorder'
		].forEach(function (key) {
			if (item[key] !== undefined && item[key] !== null) {
				styleOverrideObject[key] = item[key];
				pushSOO = true;
			}
		});

		if (pushSOO) {
			this.push(styleOverrideObject);
		}

		return styleNames.length + (pushSOO ? 1 : 0);
	};

	/**
	 * Automatically pushes elements onto the stack, using autopush based on item,
	 * executes callback and then pops elements back. Returns value returned by callback
	 *
	 * @param  {Object}   item - an object with optional style property and/or style overrides
	 * @param  {Function} function to be called between autopush and pop
	 * @return {Object} value returned by callback
	 */
	StyleContextStack.prototype.auto = function (item, callback) {
		var pushedItems = this.autopush(item);
		var result = callback();

		if (pushedItems > 0) {
			this.pop(pushedItems);
		}

		return result;
	};

	/**
	 * Evaluates stack and returns value of a named property
	 *
	 * @param {String} property - property name
	 * @return property value or null if not found
	 */
	StyleContextStack.prototype.getProperty = function (property) {
		if (this.styleOverrides) {
			for (var i = this.styleOverrides.length - 1; i >= 0; i--) {
				var item = this.styleOverrides[i];

				if (typeof item === 'string' || item instanceof String) {
					// named-style-override

					var style = this.styleDictionary[item];
					if (style && style[property] !== null && style[property] !== undefined) {
						return style[property];
					}
				} else {
					// style-overrides-object
					if (item[property] !== undefined && item[property] !== null) {
						return item[property];
					}
				}
			}
		}

		return this.defaultStyle && this.defaultStyle[property];
	};

	module.exports = StyleContextStack;


/***/ },
/* 15 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	function buildColumnWidths(columns, availableWidth) {
		var autoColumns = [],
			autoMin = 0, autoMax = 0,
			starColumns = [],
			starMaxMin = 0,
			starMaxMax = 0,
			fixedColumns = [],
			initial_availableWidth = availableWidth;

		columns.forEach(function (column) {
			if (isAutoColumn(column)) {
				autoColumns.push(column);
				autoMin += column._minWidth;
				autoMax += column._maxWidth;
			} else if (isStarColumn(column)) {
				starColumns.push(column);
				starMaxMin = Math.max(starMaxMin, column._minWidth);
				starMaxMax = Math.max(starMaxMax, column._maxWidth);
			} else {
				fixedColumns.push(column);
			}
		});

		fixedColumns.forEach(function (col) {
			// width specified as %
			if (typeof col.width === 'string' && /\d+%/.test(col.width)) {
				col.width = parseFloat(col.width) * initial_availableWidth / 100;
			}
			if (col.width < (col._minWidth) && col.elasticWidth) {
				col._calcWidth = col._minWidth;
			} else {
				col._calcWidth = col.width;
			}

			availableWidth -= col._calcWidth;
		});

		// http://www.freesoft.org/CIE/RFC/1942/18.htm
		// http://www.w3.org/TR/CSS2/tables.html#width-layout
		// http://dev.w3.org/csswg/css3-tables-algorithms/Overview.src.htm
		var minW = autoMin + starMaxMin * starColumns.length;
		var maxW = autoMax + starMaxMax * starColumns.length;
		if (minW >= availableWidth) {
			// case 1 - there's no way to fit all columns within available width
			// that's actually pretty bad situation with PDF as we have no horizontal scroll
			// no easy workaround (unless we decide, in the future, to split single words)
			// currently we simply use minWidths for all columns
			autoColumns.forEach(function (col) {
				col._calcWidth = col._minWidth;
			});

			starColumns.forEach(function (col) {
				col._calcWidth = starMaxMin; // starMaxMin already contains padding
			});
		} else {
			if (maxW < availableWidth) {
				// case 2 - we can fit rest of the table within available space
				autoColumns.forEach(function (col) {
					col._calcWidth = col._maxWidth;
					availableWidth -= col._calcWidth;
				});
			} else {
				// maxW is too large, but minW fits within available width
				var W = availableWidth - minW;
				var D = maxW - minW;

				autoColumns.forEach(function (col) {
					var d = col._maxWidth - col._minWidth;
					col._calcWidth = col._minWidth + d * W / D;
					availableWidth -= col._calcWidth;
				});
			}

			if (starColumns.length > 0) {
				var starSize = availableWidth / starColumns.length;

				starColumns.forEach(function (col) {
					col._calcWidth = starSize;
				});
			}
		}
	}

	function isAutoColumn(column) {
		return column.width === 'auto';
	}

	function isStarColumn(column) {
		return column.width === null || column.width === undefined || column.width === '*' || column.width === 'star';
	}

	//TODO: refactor and reuse in measureTable
	function measureMinMax(columns) {
		var result = {min: 0, max: 0};

		var maxStar = {min: 0, max: 0};
		var starCount = 0;

		for (var i = 0, l = columns.length; i < l; i++) {
			var c = columns[i];

			if (isStarColumn(c)) {
				maxStar.min = Math.max(maxStar.min, c._minWidth);
				maxStar.max = Math.max(maxStar.max, c._maxWidth);
				starCount++;
			} else if (isAutoColumn(c)) {
				result.min += c._minWidth;
				result.max += c._maxWidth;
			} else {
				result.min += ((c.width !== undefined && c.width) || c._minWidth);
				result.max += ((c.width !== undefined && c.width) || c._maxWidth);
			}
		}

		if (starCount) {
			result.min += starCount * maxStar.min;
			result.max += starCount * maxStar.max;
		}

		return result;
	}

	/**
	 * Calculates column widths
	 * @private
	 */
	module.exports = {
		buildColumnWidths: buildColumnWidths,
		measureMinMax: measureMinMax,
		isAutoColumn: isAutoColumn,
		isStarColumn: isStarColumn
	};


/***/ },
/* 16 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	function pack() {
		var result = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var obj = arguments[i];

			if (obj) {
				for (var key in obj) {
					if (obj.hasOwnProperty(key)) {
						result[key] = obj[key];
					}
				}
			}
		}

		return result;
	}

	function offsetVector(vector, x, y) {
		switch (vector.type) {
			case 'ellipse':
			case 'rect':
				vector.x += x;
				vector.y += y;
				break;
			case 'line':
				vector.x1 += x;
				vector.x2 += x;
				vector.y1 += y;
				vector.y2 += y;
				break;
			case 'polyline':
				for (var i = 0, l = vector.points.length; i < l; i++) {
					vector.points[i].x += x;
					vector.points[i].y += y;
				}
				break;
		}
	}

	function fontStringify(key, val) {
		if (key === 'font') {
			return 'font';
		}
		return val;
	}

	function isFunction(functionToCheck) {
		var getType = {};
		return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}


	module.exports = {
		pack: pack,
		fontStringify: fontStringify,
		offsetVector: offsetVector,
		isFunction: isFunction
	};


/***/ },
/* 17 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';
	/*jshint -W004 */
	/* qr.js -- QR code generator in Javascript (revision 2011-01-19)
	 * Written by Kang Seonghoon <public+qrjs@mearie.org>.
	 *
	 * This source code is in the public domain; if your jurisdiction does not
	 * recognize the public domain the terms of Creative Commons CC0 license
	 * apply. In the other words, you can always do what you want.
	 */


	// per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)
	//
	// [0]: the degree of generator polynomial by ECC levels
	// [1]: # of code blocks by ECC levels
	// [2]: left-top positions of alignment patterns
	//
	// the number in this table (in particular, [0]) does not exactly match with
	// the numbers in the specficiation. see augumenteccs below for the reason.
	var VERSIONS = [
		null,
		[[10, 7, 17, 13], [1, 1, 1, 1], []],
		[[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]],
		[[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]],
		[[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]],
		[[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]],
		[[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]],
		[[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]],
		[[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]],
		[[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]],
		[[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]],
		[[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]],
		[[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]],
		[[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]],
		[[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]],
		[[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]],
		[[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]],
		[[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]],
		[[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]],
		[[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]],
		[[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]],
		[[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]],
		[[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]],
		[[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]],
		[[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]],
		[[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]],
		[[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]],
		[[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]],
		[[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]],
		[[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]],
		[[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]],
		[[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]],
		[[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]],
		[[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]],
		[[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]],
		[[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]],
		[[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]],
		[[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]],
		[[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]],
		[[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]],
		[[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]];

	// mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)
	var MODE_TERMINATOR = 0;
	var MODE_NUMERIC = 1, MODE_ALPHANUMERIC = 2, MODE_OCTET = 4, MODE_KANJI = 8;

	// validation regexps
	var NUMERIC_REGEXP = /^\d*$/;
	var ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\-./:]*$/;
	var ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\-./:]*$/;

	// ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)
	var ECCLEVEL_L = 1, ECCLEVEL_M = 0, ECCLEVEL_Q = 3, ECCLEVEL_H = 2;

	// GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1
	// invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)
	var GF256_MAP = [], GF256_INVMAP = [-1];
	for (var i = 0, v = 1; i < 255; ++i) {
		GF256_MAP.push(v);
		GF256_INVMAP[v] = i;
		v = (v * 2) ^ (v >= 128 ? 0x11d : 0);
	}

	// generator polynomials up to degree 30
	// (should match with polynomials in JIS X 0510:2004 Appendix A)
	//
	// generator polynomial of degree K is product of (x-\alpha^0), (x-\alpha^1),
	// ..., (x-\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)
	// from the result; also other coefficients are written in terms of the exponent
	// to \alpha to avoid the redundant calculation. (see also calculateecc below.)
	var GF256_GENPOLY = [[]];
	for (var i = 0; i < 30; ++i) {
		var prevpoly = GF256_GENPOLY[i], poly = [];
		for (var j = 0; j <= i; ++j) {
			var a = (j < i ? GF256_MAP[prevpoly[j]] : 0);
			var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];
			poly.push(GF256_INVMAP[a ^ b]);
		}
		GF256_GENPOLY.push(poly);
	}

	// alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)
	var ALPHANUMERIC_MAP = {};
	for (var i = 0; i < 45; ++i) {
		ALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;
	}

	// mask functions in terms of row # and column #
	// (cf. Table 20 in JIS X 0510:2004 p. 42)
	/*jshint unused: false */
	var MASKFUNCS = [
		function (i, j) {
			return (i + j) % 2 === 0;
		},
		function (i, j) {
			return i % 2 === 0;
		},
		function (i, j) {
			return j % 3 === 0;
		},
		function (i, j) {
			return (i + j) % 3 === 0;
		},
		function (i, j) {
			return (((i / 2) | 0) + ((j / 3) | 0)) % 2 === 0;
		},
		function (i, j) {
			return (i * j) % 2 + (i * j) % 3 === 0;
		},
		function (i, j) {
			return ((i * j) % 2 + (i * j) % 3) % 2 === 0;
		},
		function (i, j) {
			return ((i + j) % 2 + (i * j) % 3) % 2 === 0;
		}];

	// returns true when the version information has to be embeded.
	var needsverinfo = function (ver) {
		return ver > 6;
	};

	// returns the size of entire QR code for given version.
	var getsizebyver = function (ver) {
		return 4 * ver + 17;
	};

	// returns the number of bits available for code words in this version.
	var nfullbits = function (ver) {
		/*
		 * |<--------------- n --------------->|
		 * |        |<----- n-17 ---->|        |
		 * +-------+                ///+-------+ ----
		 * |       |                ///|       |    ^
		 * |  9x9  |       @@@@@    ///|  9x8  |    |
		 * |       | # # # @5x5@ # # # |       |    |
		 * +-------+       @@@@@       +-------+    |
		 *       #                               ---|
		 *                                        ^ |
		 *       #                                |
		 *     @@@@@       @@@@@       @@@@@      | n
		 *     @5x5@       @5x5@       @5x5@   n-17
		 *     @@@@@       @@@@@       @@@@@      | |
		 *       #                                | |
		 * //////                                 v |
		 * //////#                               ---|
		 * +-------+       @@@@@       @@@@@        |
		 * |       |       @5x5@       @5x5@        |
		 * |  8x9  |       @@@@@       @@@@@        |
		 * |       |                                v
		 * +-------+                             ----
		 *
		 * when the entire code has n^2 modules and there are m^2-3 alignment
		 * patterns, we have:
		 * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and
		 *   format information;
		 * - 2n-34 (= 2(n-17)) modules for timing patterns;
		 * - 36 (= 3x6 + 6x3) modules for version information, if any;
		 * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns
		 *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with
		 *   timing patterns.
		 */
		var v = VERSIONS[ver];
		var nbits = 16 * ver * ver + 128 * ver + 64; // finder, timing and format info.
		if (needsverinfo(ver))
			nbits -= 36; // version information
		if (v[2].length) { // alignment patterns
			nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;
		}
		return nbits;
	};

	// returns the number of bits available for data portions (i.e. excludes ECC
	// bits but includes mode and length bits) in this version and ECC level.
	var ndatabits = function (ver, ecclevel) {
		var nbits = nfullbits(ver) & ~7; // no sub-octet code words
		var v = VERSIONS[ver];
		nbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits
		return nbits;
	};

	// returns the number of bits required for the length of data.
	// (cf. Table 3 in JIS X 0510:2004 p. 16)
	var ndatalenbits = function (ver, mode) {
		switch (mode) {
			case MODE_NUMERIC:
				return (ver < 10 ? 10 : ver < 27 ? 12 : 14);
			case MODE_ALPHANUMERIC:
				return (ver < 10 ? 9 : ver < 27 ? 11 : 13);
			case MODE_OCTET:
				return (ver < 10 ? 8 : 16);
			case MODE_KANJI:
				return (ver < 10 ? 8 : ver < 27 ? 10 : 12);
		}
	};

	// returns the maximum length of data possible in given configuration.
	var getmaxdatalen = function (ver, mode, ecclevel) {
		var nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits
		switch (mode) {
			case MODE_NUMERIC:
				return ((nbits / 10) | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);
			case MODE_ALPHANUMERIC:
				return ((nbits / 11) | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);
			case MODE_OCTET:
				return (nbits / 8) | 0;
			case MODE_KANJI:
				return (nbits / 13) | 0;
		}
	};

	// checks if the given data can be encoded in given mode, and returns
	// the converted data for the further processing if possible. otherwise
	// returns null.
	//
	// this function does not check the length of data; it is a duty of
	// encode function below (as it depends on the version and ECC level too).
	var validatedata = function (mode, data) {
		switch (mode) {
			case MODE_NUMERIC:
				if (!data.match(NUMERIC_REGEXP))
					return null;
				return data;

			case MODE_ALPHANUMERIC:
				if (!data.match(ALPHANUMERIC_REGEXP))
					return null;
				return data.toUpperCase();

			case MODE_OCTET:
				if (typeof data === 'string') { // encode as utf-8 string
					var newdata = [];
					for (var i = 0; i < data.length; ++i) {
						var ch = data.charCodeAt(i);
						if (ch < 0x80) {
							newdata.push(ch);
						} else if (ch < 0x800) {
							newdata.push(0xc0 | (ch >> 6),
								0x80 | (ch & 0x3f));
						} else if (ch < 0x10000) {
							newdata.push(0xe0 | (ch >> 12),
								0x80 | ((ch >> 6) & 0x3f),
								0x80 | (ch & 0x3f));
						} else {
							newdata.push(0xf0 | (ch >> 18),
								0x80 | ((ch >> 12) & 0x3f),
								0x80 | ((ch >> 6) & 0x3f),
								0x80 | (ch & 0x3f));
						}
					}
					return newdata;
				} else {
					return data;
				}
		}
	};

	// returns the code words (sans ECC bits) for given data and configurations.
	// requires data to be preprocessed by validatedata. no length check is
	// performed, and everything has to be checked before calling this function.
	var encode = function (ver, mode, data, maxbuflen) {
		var buf = [];
		var bits = 0, remaining = 8;
		var datalen = data.length;

		// this function is intentionally no-op when n=0.
		var pack = function (x, n) {
			if (n >= remaining) {
				buf.push(bits | (x >> (n -= remaining)));
				while (n >= 8)
					buf.push((x >> (n -= 8)) & 255);
				bits = 0;
				remaining = 8;
			}
			if (n > 0)
				bits |= (x & ((1 << n) - 1)) << (remaining -= n);
		};

		var nlenbits = ndatalenbits(ver, mode);
		pack(mode, 4);
		pack(datalen, nlenbits);

		switch (mode) {
			case MODE_NUMERIC:
				for (var i = 2; i < datalen; i += 3) {
					pack(parseInt(data.substring(i - 2, i + 1), 10), 10);
				}
				pack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);
				break;

			case MODE_ALPHANUMERIC:
				for (var i = 1; i < datalen; i += 2) {
					pack(ALPHANUMERIC_MAP[data.charAt(i - 1)] * 45 +
						ALPHANUMERIC_MAP[data.charAt(i)], 11);
				}
				if (datalen % 2 == 1) {
					pack(ALPHANUMERIC_MAP[data.charAt(i - 1)], 6);
				}
				break;

			case MODE_OCTET:
				for (var i = 0; i < datalen; ++i) {
					pack(data[i], 8);
				}
				break;
		}

		// final bits. it is possible that adding terminator causes the buffer
		// to overflow, but then the buffer truncated to the maximum size will
		// be valid as the truncated terminator mode bits and padding is
		// identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).
		pack(MODE_TERMINATOR, 4);
		if (remaining < 8)
			buf.push(bits);

		// the padding to fill up the remaining space. we should not add any
		// words when the overflow already occurred.
		while (buf.length + 1 < maxbuflen)
			buf.push(0xec, 0x11);
		if (buf.length < maxbuflen)
			buf.push(0xec);
		return buf;
	};

	// calculates ECC code words for given code words and generator polynomial.
	//
	// this is quite similar to CRC calculation as both Reed-Solomon and CRC use
	// the certain kind of cyclic codes, which is effectively the division of
	// zero-augumented polynomial by the generator polynomial. the only difference
	// is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon
	// uses the different generator polynomial than CRC's.
	var calculateecc = function (poly, genpoly) {
		var modulus = poly.slice(0);
		var polylen = poly.length, genpolylen = genpoly.length;
		for (var i = 0; i < genpolylen; ++i)
			modulus.push(0);
		for (var i = 0; i < polylen; ) {
			var quotient = GF256_INVMAP[modulus[i++]];
			if (quotient >= 0) {
				for (var j = 0; j < genpolylen; ++j) {
					modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];
				}
			}
		}
		return modulus.slice(polylen);
	};

	// auguments ECC code words to given code words. the resulting words are
	// ready to be encoded in the matrix.
	//
	// the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.
	// the code is simplified using the fact that the size of each code & ECC
	// blocks is almost same; for example, when we have 4 blocks and 46 data words
	// the number of code words in those blocks are 11, 11, 12, 12 respectively.
	var augumenteccs = function (poly, nblocks, genpoly) {
		var subsizes = [];
		var subsize = (poly.length / nblocks) | 0, subsize0 = 0;
		var pivot = nblocks - poly.length % nblocks;
		for (var i = 0; i < pivot; ++i) {
			subsizes.push(subsize0);
			subsize0 += subsize;
		}
		for (var i = pivot; i < nblocks; ++i) {
			subsizes.push(subsize0);
			subsize0 += subsize + 1;
		}
		subsizes.push(subsize0);

		var eccs = [];
		for (var i = 0; i < nblocks; ++i) {
			eccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly));
		}

		var result = [];
		var nitemsperblock = (poly.length / nblocks) | 0;
		for (var i = 0; i < nitemsperblock; ++i) {
			for (var j = 0; j < nblocks; ++j) {
				result.push(poly[subsizes[j] + i]);
			}
		}
		for (var j = pivot; j < nblocks; ++j) {
			result.push(poly[subsizes[j + 1] - 1]);
		}
		for (var i = 0; i < genpoly.length; ++i) {
			for (var j = 0; j < nblocks; ++j) {
				result.push(eccs[j][i]);
			}
		}
		return result;
	};

	// auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper
	// genpoly. the both input and output are in binary numbers, and unlike
	// calculateecc genpoly should include the 1 bit for the highest degree.
	//
	// actual polynomials used for this procedure are as follows:
	// - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)
	// - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)
	var augumentbch = function (poly, p, genpoly, q) {
		var modulus = poly << q;
		for (var i = p - 1; i >= 0; --i) {
			if ((modulus >> (q + i)) & 1)
				modulus ^= genpoly << i;
		}
		return (poly << q) | modulus;
	};

	// creates the base matrix for given version. it returns two matrices, one of
	// them is the actual one and the another represents the "reserved" portion
	// (e.g. finder and timing patterns) of the matrix.
	//
	// some entries in the matrix may be undefined, rather than 0 or 1. this is
	// intentional (no initialization needed!), and putdata below will fill
	// the remaining ones.
	var makebasematrix = function (ver) {
		var v = VERSIONS[ver], n = getsizebyver(ver);
		var matrix = [], reserved = [];
		for (var i = 0; i < n; ++i) {
			matrix.push([]);
			reserved.push([]);
		}

		var blit = function (y, x, h, w, bits) {
			for (var i = 0; i < h; ++i) {
				for (var j = 0; j < w; ++j) {
					matrix[y + i][x + j] = (bits[i] >> j) & 1;
					reserved[y + i][x + j] = 1;
				}
			}
		};

		// finder patterns and a part of timing patterns
		// will also mark the format information area (not yet written) as reserved.
		blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);
		blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);
		blit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]);

		// the rest of timing patterns
		for (var i = 9; i < n - 8; ++i) {
			matrix[6][i] = matrix[i][6] = ~i & 1;
			reserved[6][i] = reserved[i][6] = 1;
		}

		// alignment patterns
		var aligns = v[2], m = aligns.length;
		for (var i = 0; i < m; ++i) {
			var minj = (i === 0 || i === m - 1 ? 1 : 0), maxj = (i === 0 ? m - 1 : m);
			for (var j = minj; j < maxj; ++j) {
				blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);
			}
		}

		// version information
		if (needsverinfo(ver)) {
			var code = augumentbch(ver, 6, 0x1f25, 12);
			var k = 0;
			for (var i = 0; i < 6; ++i) {
				for (var j = 0; j < 3; ++j) {
					matrix[i][(n - 11) + j] = matrix[(n - 11) + j][i] = (code >> k++) & 1;
					reserved[i][(n - 11) + j] = reserved[(n - 11) + j][i] = 1;
				}
			}
		}

		return {matrix: matrix, reserved: reserved};
	};

	// fills the data portion (i.e. unmarked in reserved) of the matrix with given
	// code words. the size of code words should be no more than available bits,
	// and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).
	var putdata = function (matrix, reserved, buf) {
		var n = matrix.length;
		var k = 0, dir = -1;
		for (var i = n - 1; i >= 0; i -= 2) {
			if (i == 6)
				--i; // skip the entire timing pattern column
			var jj = (dir < 0 ? n - 1 : 0);
			for (var j = 0; j < n; ++j) {
				for (var ii = i; ii > i - 2; --ii) {
					if (!reserved[jj][ii]) {
						// may overflow, but (undefined >> x)
						// is 0 so it will auto-pad to zero.
						matrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;
						++k;
					}
				}
				jj += dir;
			}
			dir = -dir;
		}
		return matrix;
	};

	// XOR-masks the data portion of the matrix. repeating the call with the same
	// arguments will revert the prior call (convenient in the matrix evaluation).
	var maskdata = function (matrix, reserved, mask) {
		var maskf = MASKFUNCS[mask];
		var n = matrix.length;
		for (var i = 0; i < n; ++i) {
			for (var j = 0; j < n; ++j) {
				if (!reserved[i][j])
					matrix[i][j] ^= maskf(i, j);
			}
		}
		return matrix;
	};

	// puts the format information.
	var putformatinfo = function (matrix, reserved, ecclevel, mask) {
		var n = matrix.length;
		var code = augumentbch((ecclevel << 3) | mask, 5, 0x537, 10) ^ 0x5412;
		for (var i = 0; i < 15; ++i) {
			var r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];
			var c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];
			matrix[r][8] = matrix[8][c] = (code >> i) & 1;
			// we don't have to mark those bits reserved; always done
			// in makebasematrix above.
		}
		return matrix;
	};

	// evaluates the resulting matrix and returns the score (lower is better).
	// (cf. JIS X 0510:2004 sec 8.8.2)
	//
	// the evaluation procedure tries to avoid the problematic patterns naturally
	// occuring from the original matrix. for example, it penaltizes the patterns
	// which just look like the finder pattern which will confuse the decoder.
	// we choose the mask which results in the lowest score among 8 possible ones.
	//
	// note: zxing seems to use the same procedure and in many cases its choice
	// agrees to ours, but sometimes it does not. practically it doesn't matter.
	var evaluatematrix = function (matrix) {
		// N1+(k-5) points for each consecutive row of k same-colored modules,
		// where k >= 5. no overlapping row counts.
		var PENALTY_CONSECUTIVE = 3;
		// N2 points for each 2x2 block of same-colored modules.
		// overlapping block does count.
		var PENALTY_TWOBYTWO = 3;
		// N3 points for each pattern with >4W:1B:1W:3B:1W:1B or
		// 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,
		// but 13W:3B:3W:9B:3W:3B counts).
		var PENALTY_FINDERLIKE = 40;
		// N4*k points for every (5*k)% deviation from 50% black density.
		// i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.
		var PENALTY_DENSITY = 10;

		var evaluategroup = function (groups) { // assumes [W,B,W,B,W,...,B,W]
			var score = 0;
			for (var i = 0; i < groups.length; ++i) {
				if (groups[i] >= 5)
					score += PENALTY_CONSECUTIVE + (groups[i] - 5);
			}
			for (var i = 5; i < groups.length; i += 2) {
				var p = groups[i];
				if (groups[i - 1] == p && groups[i - 2] == 3 * p && groups[i - 3] == p &&
					groups[i - 4] == p && (groups[i - 5] >= 4 * p || groups[i + 1] >= 4 * p)) {
					// this part differs from zxing...
					score += PENALTY_FINDERLIKE;
				}
			}
			return score;
		};

		var n = matrix.length;
		var score = 0, nblacks = 0;
		for (var i = 0; i < n; ++i) {
			var row = matrix[i];
			var groups;

			// evaluate the current row
			groups = [0]; // the first empty group of white
			for (var j = 0; j < n; ) {
				var k;
				for (k = 0; j < n && row[j]; ++k)
					++j;
				groups.push(k);
				for (k = 0; j < n && !row[j]; ++k)
					++j;
				groups.push(k);
			}
			score += evaluategroup(groups);

			// evaluate the current column
			groups = [0];
			for (var j = 0; j < n; ) {
				var k;
				for (k = 0; j < n && matrix[j][i]; ++k)
					++j;
				groups.push(k);
				for (k = 0; j < n && !matrix[j][i]; ++k)
					++j;
				groups.push(k);
			}
			score += evaluategroup(groups);

			// check the 2x2 box and calculate the density
			var nextrow = matrix[i + 1] || [];
			nblacks += row[0];
			for (var j = 1; j < n; ++j) {
				var p = row[j];
				nblacks += p;
				// at least comparison with next row should be strict...
				if (row[j - 1] == p && nextrow[j] === p && nextrow[j - 1] === p) {
					score += PENALTY_TWOBYTWO;
				}
			}
		}

		score += PENALTY_DENSITY * ((Math.abs(nblacks / n / n - 0.5) / 0.05) | 0);
		return score;
	};

	// returns the fully encoded QR code matrix which contains given data.
	// it also chooses the best mask automatically when mask is -1.
	var generate = function (data, ver, mode, ecclevel, mask) {
		var v = VERSIONS[ver];
		var buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);
		buf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);

		var result = makebasematrix(ver);
		var matrix = result.matrix, reserved = result.reserved;
		putdata(matrix, reserved, buf);

		if (mask < 0) {
			// find the best mask
			maskdata(matrix, reserved, 0);
			putformatinfo(matrix, reserved, ecclevel, 0);
			var bestmask = 0, bestscore = evaluatematrix(matrix);
			maskdata(matrix, reserved, 0);
			for (mask = 1; mask < 8; ++mask) {
				maskdata(matrix, reserved, mask);
				putformatinfo(matrix, reserved, ecclevel, mask);
				var score = evaluatematrix(matrix);
				if (bestscore > score) {
					bestscore = score;
					bestmask = mask;
				}
				maskdata(matrix, reserved, mask);
			}
			mask = bestmask;
		}

		maskdata(matrix, reserved, mask);
		putformatinfo(matrix, reserved, ecclevel, mask);
		return matrix;
	};

	// the public interface is trivial; the options available are as follows:
	//
	// - version: an integer in [1,40]. when omitted (or -1) the smallest possible
	//   version is chosen.
	// - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest
	//   possible mode is chosen.
	// - eccLevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.
	// - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.
	//

	function generateFrame(data, options) {
		var MODES = {'numeric': MODE_NUMERIC, 'alphanumeric': MODE_ALPHANUMERIC,
			'octet': MODE_OCTET};
		var ECCLEVELS = {'L': ECCLEVEL_L, 'M': ECCLEVEL_M, 'Q': ECCLEVEL_Q,
			'H': ECCLEVEL_H};

		options = options || {};
		var ver = options.version || -1;
		var ecclevel = ECCLEVELS[(options.eccLevel || 'L').toUpperCase()];
		var mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;
		var mask = 'mask' in options ? options.mask : -1;

		if (mode < 0) {
			if (typeof data === 'string') {
				if (data.match(NUMERIC_REGEXP)) {
					mode = MODE_NUMERIC;
				} else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {
					// while encode supports case-insensitive encoding, we restrict the data to be uppercased when auto-selecting the mode.
					mode = MODE_ALPHANUMERIC;
				} else {
					mode = MODE_OCTET;
				}
			} else {
				mode = MODE_OCTET;
			}
		} else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC ||
			mode == MODE_OCTET)) {
			throw 'invalid or unsupported mode';
		}

		data = validatedata(mode, data);
		if (data === null)
			throw 'invalid data format';

		if (ecclevel < 0 || ecclevel > 3)
			throw 'invalid ECC level';

		if (ver < 0) {
			for (ver = 1; ver <= 40; ++ver) {
				if (data.length <= getmaxdatalen(ver, mode, ecclevel))
					break;
			}
			if (ver > 40)
				throw 'too large data for the Qr format';
		} else if (ver < 1 || ver > 40) {
			throw 'invalid Qr version! should be between 1 and 40';
		}

		if (mask != -1 && (mask < 0 || mask > 8))
			throw 'invalid mask';
		//console.log('version:', ver, 'mode:', mode, 'ECC:', ecclevel, 'mask:', mask )
		return generate(data, ver, mode, ecclevel, mask);
	}


	// options
	// - modulesize: a number. this is a size of each modules in pixels, and
	//   defaults to 5px.
	// - margin: a number. this is a size of margin in *modules*, and defaults to
	//   4 (white modules). the specficiation mandates the margin no less than 4
	//   modules, so it is better not to alter this value unless you know what
	//   you're doing.
	function buildCanvas(data, options) {

		var canvas = [];
		var background = data.background || '#fff';
		var foreground = data.foreground || '#000';
		//var margin = options.margin || 4;
		var matrix = generateFrame(data, options);
		var n = matrix.length;
		var modSize = Math.floor(options.fit ? options.fit / n : 5);
		var size = n * modSize;

		canvas.push({
			type: 'rect',
			x: 0, y: 0, w: size, h: size, lineWidth: 0, color: background
		});

		for (var i = 0; i < n; ++i) {
			for (var j = 0; j < n; ++j) {
				if (matrix[i][j]) {
					canvas.push({
						type: 'rect',
						x: modSize * j,
						y: modSize * i,
						w: modSize,
						h: modSize,
						lineWidth: 0,
						color: foreground
					});
				}
			}
		}

		return {
			canvas: canvas,
			size: size
		};

	}

	function measure(node) {
		var cd = buildCanvas(node.qr, node);
		node._canvas = cd.canvas;
		node._width = node._height = node._minWidth = node._maxWidth = node._minHeight = node._maxHeight = cd.size;
		return node;
	}

	module.exports = {
		measure: measure
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var TraversalTracker = __webpack_require__(5);

	/**
	 * Creates an instance of DocumentContext - a store for current x, y positions and available width/height.
	 * It facilitates column divisions and vertical sync
	 */
	function DocumentContext(pageSize, pageMargins) {
		this.pages = [];

		this.pageMargins = pageMargins;

		this.x = pageMargins.left;
		this.availableWidth = pageSize.width - pageMargins.left - pageMargins.right;
		this.availableHeight = 0;
		this.page = -1;

		this.snapshots = [];

		this.endingCell = null;

		this.tracker = new TraversalTracker();

		this.addPage(pageSize);
	}

	DocumentContext.prototype.beginColumnGroup = function () {
		this.snapshots.push({
			x: this.x,
			y: this.y,
			availableHeight: this.availableHeight,
			availableWidth: this.availableWidth,
			page: this.page,
			bottomMost: {y: this.y, page: this.page},
			endingCell: this.endingCell,
			lastColumnWidth: this.lastColumnWidth
		});

		this.lastColumnWidth = 0;
	};

	DocumentContext.prototype.beginColumn = function (width, offset, endingCell) {
		var saved = this.snapshots[this.snapshots.length - 1];

		this.calculateBottomMost(saved);

		this.endingCell = endingCell;
		this.page = saved.page;
		this.x = this.x + this.lastColumnWidth + (offset || 0);
		this.y = saved.y;
		this.availableWidth = width;	//saved.availableWidth - offset;
		this.availableHeight = saved.availableHeight;

		this.lastColumnWidth = width;
	};

	DocumentContext.prototype.calculateBottomMost = function (destContext) {
		if (this.endingCell) {
			this.saveContextInEndingCell(this.endingCell);
			this.endingCell = null;
		} else {
			destContext.bottomMost = bottomMostContext(this, destContext.bottomMost);
		}
	};

	DocumentContext.prototype.markEnding = function (endingCell) {
		this.page = endingCell._columnEndingContext.page;
		this.x = endingCell._columnEndingContext.x;
		this.y = endingCell._columnEndingContext.y;
		this.availableWidth = endingCell._columnEndingContext.availableWidth;
		this.availableHeight = endingCell._columnEndingContext.availableHeight;
		this.lastColumnWidth = endingCell._columnEndingContext.lastColumnWidth;
	};

	DocumentContext.prototype.saveContextInEndingCell = function (endingCell) {
		endingCell._columnEndingContext = {
			page: this.page,
			x: this.x,
			y: this.y,
			availableHeight: this.availableHeight,
			availableWidth: this.availableWidth,
			lastColumnWidth: this.lastColumnWidth
		};
	};

	DocumentContext.prototype.completeColumnGroup = function () {
		var saved = this.snapshots.pop();

		this.calculateBottomMost(saved);

		this.endingCell = null;
		this.x = saved.x;
		this.y = saved.bottomMost.y;
		this.page = saved.bottomMost.page;
		this.availableWidth = saved.availableWidth;
		this.availableHeight = saved.bottomMost.availableHeight;
		this.lastColumnWidth = saved.lastColumnWidth;
	};

	DocumentContext.prototype.addMargin = function (left, right) {
		this.x += left;
		this.availableWidth -= left + (right || 0);
	};

	DocumentContext.prototype.moveDown = function (offset) {
		this.y += offset;
		this.availableHeight -= offset;

		return this.availableHeight > 0;
	};

	DocumentContext.prototype.initializePage = function () {
		this.y = this.pageMargins.top;
		this.availableHeight = this.getCurrentPage().pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
		this.pageSnapshot().availableWidth = this.getCurrentPage().pageSize.width - this.pageMargins.left - this.pageMargins.right;
	};

	DocumentContext.prototype.pageSnapshot = function () {
		if (this.snapshots[0]) {
			return this.snapshots[0];
		} else {
			return this;
		}
	};

	DocumentContext.prototype.moveTo = function (x, y) {
		if (x !== undefined && x !== null) {
			this.x = x;
			this.availableWidth = this.getCurrentPage().pageSize.width - this.x - this.pageMargins.right;
		}
		if (y !== undefined && y !== null) {
			this.y = y;
			this.availableHeight = this.getCurrentPage().pageSize.height - this.y - this.pageMargins.bottom;
		}
	};

	DocumentContext.prototype.beginDetachedBlock = function () {
		this.snapshots.push({
			x: this.x,
			y: this.y,
			availableHeight: this.availableHeight,
			availableWidth: this.availableWidth,
			page: this.page,
			endingCell: this.endingCell,
			lastColumnWidth: this.lastColumnWidth
		});
	};

	DocumentContext.prototype.endDetachedBlock = function () {
		var saved = this.snapshots.pop();

		this.x = saved.x;
		this.y = saved.y;
		this.availableWidth = saved.availableWidth;
		this.availableHeight = saved.availableHeight;
		this.page = saved.page;
		this.endingCell = saved.endingCell;
		this.lastColumnWidth = saved.lastColumnWidth;
	};

	function pageOrientation(pageOrientationString, currentPageOrientation) {
		if (pageOrientationString === undefined) {
			return currentPageOrientation;
		} else if (pageOrientationString === 'landscape') {
			return 'landscape';
		} else {
			return 'portrait';
		}
	}

	var getPageSize = function (currentPage, newPageOrientation) {

		newPageOrientation = pageOrientation(newPageOrientation, currentPage.pageSize.orientation);

		if (newPageOrientation !== currentPage.pageSize.orientation) {
			return {
				orientation: newPageOrientation,
				width: currentPage.pageSize.height,
				height: currentPage.pageSize.width
			};
		} else {
			return {
				orientation: currentPage.pageSize.orientation,
				width: currentPage.pageSize.width,
				height: currentPage.pageSize.height
			};
		}

	};


	DocumentContext.prototype.moveToNextPage = function (pageOrientation) {
		var nextPageIndex = this.page + 1;

		var prevPage = this.page;
		var prevY = this.y;

		var createNewPage = nextPageIndex >= this.pages.length;
		if (createNewPage) {
			var currentAvailableWidth = this.availableWidth;
			var currentPageOrientation = this.getCurrentPage().pageSize.orientation;

			var pageSize = getPageSize(this.getCurrentPage(), pageOrientation);
			this.addPage(pageSize);

			if (currentPageOrientation === pageSize.orientation) {
				this.availableWidth = currentAvailableWidth;
			}
		} else {
			this.page = nextPageIndex;
			this.initializePage();
		}

		return {
			newPageCreated: createNewPage,
			prevPage: prevPage,
			prevY: prevY,
			y: this.y
		};
	};


	DocumentContext.prototype.addPage = function (pageSize) {
		var page = {items: [], pageSize: pageSize};
		this.pages.push(page);
		this.page = this.pages.length - 1;
		this.initializePage();

		this.tracker.emit('pageAdded');

		return page;
	};

	DocumentContext.prototype.getCurrentPage = function () {
		if (this.page < 0 || this.page >= this.pages.length) {
			return null;
		}

		return this.pages[this.page];
	};

	DocumentContext.prototype.getCurrentPosition = function () {
		var pageSize = this.getCurrentPage().pageSize;
		var innerHeight = pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
		var innerWidth = pageSize.width - this.pageMargins.left - this.pageMargins.right;

		return {
			pageNumber: this.page + 1,
			pageOrientation: pageSize.orientation,
			pageInnerHeight: innerHeight,
			pageInnerWidth: innerWidth,
			left: this.x,
			top: this.y,
			verticalRatio: ((this.y - this.pageMargins.top) / innerHeight),
			horizontalRatio: ((this.x - this.pageMargins.left) / innerWidth)
		};
	};

	function bottomMostContext(c1, c2) {
		var r;

		if (c1.page > c2.page) {
			r = c1;
		} else if (c2.page > c1.page) {
			r = c2;
		} else {
			r = (c1.y > c2.y) ? c1 : c2;
		}

		return {
			page: r.page,
			x: r.x,
			y: r.y,
			availableHeight: r.availableHeight,
			availableWidth: r.availableWidth
		};
	}

	/****TESTS**** (add a leading '/' to uncomment)
	 DocumentContext.bottomMostContext = bottomMostContext;
	 // */

	module.exports = DocumentContext;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var ElementWriter = __webpack_require__(20);

	/**
	 * Creates an instance of PageElementWriter - an extended ElementWriter
	 * which can handle:
	 * - page-breaks (it adds new pages when there's not enough space left),
	 * - repeatable fragments (like table-headers, which are repeated everytime
	 *                         a page-break occurs)
	 * - transactions (used for unbreakable-blocks when we want to make sure
	 *                 whole block will be rendered on the same page)
	 */
	function PageElementWriter(context, tracker) {
		this.transactionLevel = 0;
		this.repeatables = [];
		this.tracker = tracker;
		this.writer = new ElementWriter(context, tracker);
	}

	function fitOnPage(self, addFct) {
		var position = addFct(self);
		if (!position) {
			self.moveToNextPage();
			position = addFct(self);
		}
		return position;
	}

	PageElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
		return fitOnPage(this, function (self) {
			return self.writer.addLine(line, dontUpdateContextPosition, index);
		});
	};

	PageElementWriter.prototype.addImage = function (image, index) {
		return fitOnPage(this, function (self) {
			return self.writer.addImage(image, index);
		});
	};

	PageElementWriter.prototype.addQr = function (qr, index) {
		return fitOnPage(this, function (self) {
			return self.writer.addQr(qr, index);
		});
	};

	PageElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
		return this.writer.addVector(vector, ignoreContextX, ignoreContextY, index);
	};

	PageElementWriter.prototype.addFragment = function (fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
		if (!this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition)) {
			this.moveToNextPage();
			this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition);
		}
	};

	PageElementWriter.prototype.moveToNextPage = function (pageOrientation) {

		var nextPage = this.writer.context.moveToNextPage(pageOrientation);

		if (nextPage.newPageCreated) {
			this.repeatables.forEach(function (rep) {
				this.writer.addFragment(rep, true);
			}, this);
		} else {
			this.repeatables.forEach(function (rep) {
				this.writer.context.moveDown(rep.height);
			}, this);
		}

		this.writer.tracker.emit('pageChanged', {
			prevPage: nextPage.prevPage,
			prevY: nextPage.prevY,
			y: nextPage.y
		});
	};

	PageElementWriter.prototype.beginUnbreakableBlock = function (width, height) {
		if (this.transactionLevel++ === 0) {
			this.originalX = this.writer.context.x;
			this.writer.pushContext(width, height);
		}
	};

	PageElementWriter.prototype.commitUnbreakableBlock = function (forcedX, forcedY) {
		if (--this.transactionLevel === 0) {
			var unbreakableContext = this.writer.context;
			this.writer.popContext();

			var nbPages = unbreakableContext.pages.length;
			if (nbPages > 0) {
				// no support for multi-page unbreakableBlocks
				var fragment = unbreakableContext.pages[0];
				fragment.xOffset = forcedX;
				fragment.yOffset = forcedY;

				//TODO: vectors can influence height in some situations
				if (nbPages > 1) {
					// on out-of-context blocs (headers, footers, background) height should be the whole DocumentContext height
					if (forcedX !== undefined || forcedY !== undefined) {
						fragment.height = unbreakableContext.getCurrentPage().pageSize.height - unbreakableContext.pageMargins.top - unbreakableContext.pageMargins.bottom;
					} else {
						fragment.height = this.writer.context.getCurrentPage().pageSize.height - this.writer.context.pageMargins.top - this.writer.context.pageMargins.bottom;
						for (var i = 0, l = this.repeatables.length; i < l; i++) {
							fragment.height -= this.repeatables[i].height;
						}
					}
				} else {
					fragment.height = unbreakableContext.y;
				}

				if (forcedX !== undefined || forcedY !== undefined) {
					this.writer.addFragment(fragment, true, true, true);
				} else {
					this.addFragment(fragment);
				}
			}
		}
	};

	PageElementWriter.prototype.currentBlockToRepeatable = function () {
		var unbreakableContext = this.writer.context;
		var rep = {items: []};

		unbreakableContext.pages[0].items.forEach(function (item) {
			rep.items.push(item);
		});

		rep.xOffset = this.originalX;

		//TODO: vectors can influence height in some situations
		rep.height = unbreakableContext.y;

		return rep;
	};

	PageElementWriter.prototype.pushToRepeatables = function (rep) {
		this.repeatables.push(rep);
	};

	PageElementWriter.prototype.popFromRepeatables = function () {
		this.repeatables.pop();
	};

	PageElementWriter.prototype.context = function () {
		return this.writer.context;
	};

	module.exports = PageElementWriter;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var Line = __webpack_require__(21);
	var pack = __webpack_require__(16).pack;
	var offsetVector = __webpack_require__(16).offsetVector;
	var DocumentContext = __webpack_require__(18);

	/**
	 * Creates an instance of ElementWriter - a line/vector writer, which adds
	 * elements to current page and sets their positions based on the context
	 */
	function ElementWriter(context, tracker) {
		this.context = context;
		this.contextStack = [];
		this.tracker = tracker;
	}

	function addPageItem(page, item, index) {
		if (index === null || index === undefined || index < 0 || index > page.items.length) {
			page.items.push(item);
		} else {
			page.items.splice(index, 0, item);
		}
	}

	ElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
		var height = line.getHeight();
		var context = this.context;
		var page = context.getCurrentPage(),
			position = this.getCurrentPositionOnPage();

		if (context.availableHeight < height || !page) {
			return false;
		}

		line.x = context.x + (line.x || 0);
		line.y = context.y + (line.y || 0);

		this.alignLine(line);

		addPageItem(page, {
			type: 'line',
			item: line
		}, index);
		this.tracker.emit('lineAdded', line);

		if (!dontUpdateContextPosition) {
			context.moveDown(height);
		}

		return position;
	};

	ElementWriter.prototype.alignLine = function (line) {
		var width = this.context.availableWidth;
		var lineWidth = line.getWidth();

		var alignment = line.inlines && line.inlines.length > 0 && line.inlines[0].alignment;

		var offset = 0;
		switch (alignment) {
			case 'right':
				offset = width - lineWidth;
				break;
			case 'center':
				offset = (width - lineWidth) / 2;
				break;
		}

		if (offset) {
			line.x = (line.x || 0) + offset;
		}

		if (alignment === 'justify' &&
			!line.newLineForced &&
			!line.lastLineInParagraph &&
			line.inlines.length > 1) {
			var additionalSpacing = (width - lineWidth) / (line.inlines.length - 1);

			for (var i = 1, l = line.inlines.length; i < l; i++) {
				offset = i * additionalSpacing;

				line.inlines[i].x += offset;
			}
		}
	};

	ElementWriter.prototype.addImage = function (image, index) {
		var context = this.context;
		var page = context.getCurrentPage(),
			position = this.getCurrentPositionOnPage();

		if (context.availableHeight < image._height || !page) {
			return false;
		}

		if (image._x === undefined) {
			image._x = image.x || 0;
		}

		image.x = context.x + image._x;
		image.y = context.y;

		this.alignImage(image);

		addPageItem(page, {
			type: 'image',
			item: image
		}, index);

		context.moveDown(image._height);

		return position;
	};

	ElementWriter.prototype.addQr = function (qr, index) {
		var context = this.context;
		var page = context.getCurrentPage(),
			position = this.getCurrentPositionOnPage();

		if (context.availableHeight < qr._height || !page) {
			return false;
		}

		if (qr._x === undefined) {
			qr._x = qr.x || 0;
		}

		qr.x = context.x + qr._x;
		qr.y = context.y;

		this.alignImage(qr);

		for (var i = 0, l = qr._canvas.length; i < l; i++) {
			var vector = qr._canvas[i];
			vector.x += qr.x;
			vector.y += qr.y;
			this.addVector(vector, true, true, index);
		}

		context.moveDown(qr._height);

		return position;
	};

	ElementWriter.prototype.alignImage = function (image) {
		var width = this.context.availableWidth;
		var imageWidth = image._minWidth;
		var offset = 0;
		switch (image._alignment) {
			case 'right':
				offset = width - imageWidth;
				break;
			case 'center':
				offset = (width - imageWidth) / 2;
				break;
		}

		if (offset) {
			image.x = (image.x || 0) + offset;
		}
	};

	ElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
		var context = this.context;
		var page = context.getCurrentPage(),
			position = this.getCurrentPositionOnPage();

		if (page) {
			offsetVector(vector, ignoreContextX ? 0 : context.x, ignoreContextY ? 0 : context.y);
			addPageItem(page, {
				type: 'vector',
				item: vector
			}, index);
			return position;
		}
	};

	function cloneLine(line) {
		var result = new Line(line.maxWidth);

		for (var key in line) {
			if (line.hasOwnProperty(key)) {
				result[key] = line[key];
			}
		}

		return result;
	}

	ElementWriter.prototype.addFragment = function (block, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
		var ctx = this.context;
		var page = ctx.getCurrentPage();

		if (!useBlockXOffset && block.height > ctx.availableHeight) {
			return false;
		}

		block.items.forEach(function (item) {
			switch (item.type) {
				case 'line':
					var l = cloneLine(item.item);

					l.x = (l.x || 0) + (useBlockXOffset ? (block.xOffset || 0) : ctx.x);
					l.y = (l.y || 0) + (useBlockYOffset ? (block.yOffset || 0) : ctx.y);

					page.items.push({
						type: 'line',
						item: l
					});
					break;

				case 'vector':
					var v = pack(item.item);

					offsetVector(v, useBlockXOffset ? (block.xOffset || 0) : ctx.x, useBlockYOffset ? (block.yOffset || 0) : ctx.y);
					page.items.push({
						type: 'vector',
						item: v
					});
					break;

				case 'image':
					var img = pack(item.item);

					img.x = (img.x || 0) + (useBlockXOffset ? (block.xOffset || 0) : ctx.x);
					img.y = (img.y || 0) + (useBlockYOffset ? (block.yOffset || 0) : ctx.y);

					page.items.push({
						type: 'image',
						item: img
					});
					break;
			}
		});

		if (!dontUpdateContextPosition) {
			ctx.moveDown(block.height);
		}

		return true;
	};

	/**
	 * Pushes the provided context onto the stack or creates a new one
	 *
	 * pushContext(context) - pushes the provided context and makes it current
	 * pushContext(width, height) - creates and pushes a new context with the specified width and height
	 * pushContext() - creates a new context for unbreakable blocks (with current availableWidth and full-page-height)
	 */
	ElementWriter.prototype.pushContext = function (contextOrWidth, height) {
		if (contextOrWidth === undefined) {
			height = this.context.getCurrentPage().height - this.context.pageMargins.top - this.context.pageMargins.bottom;
			contextOrWidth = this.context.availableWidth;
		}

		if (typeof contextOrWidth === 'number' || contextOrWidth instanceof Number) {
			contextOrWidth = new DocumentContext({width: contextOrWidth, height: height}, {left: 0, right: 0, top: 0, bottom: 0});
		}

		this.contextStack.push(this.context);
		this.context = contextOrWidth;
	};

	ElementWriter.prototype.popContext = function () {
		this.context = this.contextStack.pop();
	};

	ElementWriter.prototype.getCurrentPositionOnPage = function () {
		return (this.contextStack[0] || this.context).getCurrentPosition();
	};


	module.exports = ElementWriter;


/***/ },
/* 21 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	/**
	 * Creates an instance of Line
	 *
	 * @constructor
	 * @this {Line}
	 * @param {Number} Maximum width this line can have
	 */
	function Line(maxWidth) {
		this.maxWidth = maxWidth;
		this.leadingCut = 0;
		this.trailingCut = 0;
		this.inlineWidths = 0;
		this.inlines = [];
	}

	Line.prototype.getAscenderHeight = function () {
		var y = 0;

		this.inlines.forEach(function (inline) {
			y = Math.max(y, inline.font.ascender / 1000 * inline.fontSize);
		});
		return y;
	};

	Line.prototype.hasEnoughSpaceForInline = function (inline) {
		if (this.inlines.length === 0) {
			return true;
		}
		if (this.newLineForced) {
			return false;
		}

		return this.inlineWidths + inline.width - this.leadingCut - (inline.trailingCut || 0) <= this.maxWidth;
	};

	Line.prototype.addInline = function (inline) {
		if (this.inlines.length === 0) {
			this.leadingCut = inline.leadingCut || 0;
		}
		this.trailingCut = inline.trailingCut || 0;

		inline.x = this.inlineWidths - this.leadingCut;

		this.inlines.push(inline);
		this.inlineWidths += inline.width;

		if (inline.lineEnd) {
			this.newLineForced = true;
		}
	};

	Line.prototype.getWidth = function () {
		return this.inlineWidths - this.leadingCut - this.trailingCut;
	};

	/**
	 * Returns line height
	 * @return {Number}
	 */
	Line.prototype.getHeight = function () {
		var max = 0;

		this.inlines.forEach(function (item) {
			max = Math.max(max, item.height || 0);
		});

		return max;
	};

	module.exports = Line;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var ColumnCalculator = __webpack_require__(15);

	function TableProcessor(tableNode) {
		this.tableNode = tableNode;
	}

	TableProcessor.prototype.beginTable = function (writer) {
		var tableNode;
		var availableWidth;
		var self = this;

		tableNode = this.tableNode;
		this.offsets = tableNode._offsets;
		this.layout = tableNode._layout;

		availableWidth = writer.context().availableWidth - this.offsets.total;
		ColumnCalculator.buildColumnWidths(tableNode.table.widths, availableWidth);

		this.tableWidth = tableNode._offsets.total + getTableInnerContentWidth();
		this.rowSpanData = prepareRowSpanData();
		this.cleanUpRepeatables = false;

		this.headerRows = tableNode.table.headerRows || 0;
		this.rowsWithoutPageBreak = this.headerRows + (tableNode.table.keepWithHeaderRows || 0);
		this.dontBreakRows = tableNode.table.dontBreakRows || false;

		if (this.rowsWithoutPageBreak) {
			writer.beginUnbreakableBlock();
		}

		// update the border properties of all cells before drawing any lines
		prepareCellBorders(this.tableNode.table.body);

		this.drawHorizontalLine(0, writer);

		function getTableInnerContentWidth() {
			var width = 0;

			tableNode.table.widths.forEach(function (w) {
				width += w._calcWidth;
			});

			return width;
		}

		function prepareRowSpanData() {
			var rsd = [];
			var x = 0;
			var lastWidth = 0;

			rsd.push({left: 0, rowSpan: 0});

			for (var i = 0, l = self.tableNode.table.body[0].length; i < l; i++) {
				var paddings = self.layout.paddingLeft(i, self.tableNode) + self.layout.paddingRight(i, self.tableNode);
				var lBorder = self.layout.vLineWidth(i, self.tableNode);
				lastWidth = paddings + lBorder + self.tableNode.table.widths[i]._calcWidth;
				rsd[rsd.length - 1].width = lastWidth;
				x += lastWidth;
				rsd.push({left: x, rowSpan: 0, width: 0});
			}

			return rsd;
		}

		// Iterate through all cells. If the current cell is the start of a
		// rowSpan/colSpan, update the border property of the cells on its
		// bottom/right accordingly. This is needed since each iteration of the
		// line-drawing loops draws lines for a single cell, not for an entire
		// rowSpan/colSpan.
		function prepareCellBorders(body) {
			for (var rowIndex = 0; rowIndex < body.length; rowIndex++) {
				var row = body[rowIndex];

				for (var colIndex = 0; colIndex < row.length; colIndex++) {
					var cell = row[colIndex];

					if (cell.border) {
						var rowSpan = cell.rowSpan || 1;
						var colSpan = cell.colSpan || 1;

						for (var rowOffset = 0; rowOffset < rowSpan; rowOffset++) {
							// set left border
							if (cell.border[0] !== undefined && rowOffset > 0) {
								setBorder(rowIndex + rowOffset, colIndex, 0, cell.border[0]);
							}

							// set right border
							if (cell.border[2] !== undefined) {
								setBorder(rowIndex + rowOffset, colIndex + colSpan - 1, 2, cell.border[2]);
							}
						}

						for (var colOffset = 0; colOffset < colSpan; colOffset++) {
							// set top border
							if (cell.border[1] !== undefined && colOffset > 0) {
								setBorder(rowIndex, colIndex + colOffset, 1, cell.border[1]);
							}

							// set bottom border
							if (cell.border[3] !== undefined) {
								setBorder(rowIndex + rowSpan - 1, colIndex + colOffset, 3, cell.border[3]);
							}
						}
					}
				}
			}

			// helper function to set the border for a given cell
			function setBorder(rowIndex, colIndex, borderIndex, borderValue) {
				var cell = body[rowIndex][colIndex];
				cell.border = cell.border || {};
				cell.border[borderIndex] = borderValue;
			}
		}
	};

	TableProcessor.prototype.onRowBreak = function (rowIndex, writer) {
		var self = this;
		return function () {
			//console.log('moving by : ', topLineWidth, rowPaddingTop);
			var offset = self.rowPaddingTop + (!self.headerRows ? self.topLineWidth : 0);
			writer.context().moveDown(offset);
		};

	};

	TableProcessor.prototype.beginRow = function (rowIndex, writer) {
		this.topLineWidth = this.layout.hLineWidth(rowIndex, this.tableNode);
		this.rowPaddingTop = this.layout.paddingTop(rowIndex, this.tableNode);
		this.bottomLineWidth = this.layout.hLineWidth(rowIndex + 1, this.tableNode);
		this.rowPaddingBottom = this.layout.paddingBottom(rowIndex, this.tableNode);

		this.rowCallback = this.onRowBreak(rowIndex, writer);
		writer.tracker.startTracking('pageChanged', this.rowCallback);
		if (this.dontBreakRows) {
			writer.beginUnbreakableBlock();
		}
		this.rowTopY = writer.context().y;
		this.reservedAtBottom = this.bottomLineWidth + this.rowPaddingBottom;

		writer.context().availableHeight -= this.reservedAtBottom;

		writer.context().moveDown(this.rowPaddingTop);
	};

	TableProcessor.prototype.drawHorizontalLine = function (lineIndex, writer, overrideY) {
		var lineWidth = this.layout.hLineWidth(lineIndex, this.tableNode);
		if (lineWidth) {
			var offset = lineWidth / 2;
			var currentLine = null;
			var body = this.tableNode.table.body;

			for (var i = 0, l = this.rowSpanData.length; i < l; i++) {
				var data = this.rowSpanData[i];
				var shouldDrawLine = !data.rowSpan;

				// draw only if the current cell requires a top border or the cell in the
				// row above requires a bottom border
				if (shouldDrawLine && i < l - 1) {
					var topBorder = false, bottomBorder = false;

					// the current cell
					if (lineIndex < body.length) {
						var cell = body[lineIndex][i];
						topBorder = cell.border ? cell.border[1] : this.layout.defaultBorder;
					}

					// the cell in the row above
					if (lineIndex > 0) {
						var cellAbove = body[lineIndex - 1][i];
						bottomBorder = cellAbove.border ? cellAbove.border[3] : this.layout.defaultBorder;
					}

					shouldDrawLine = topBorder || bottomBorder;
				}

				if (!currentLine && shouldDrawLine) {
					currentLine = {left: data.left, width: 0};
				}

				if (shouldDrawLine) {
					currentLine.width += (data.width || 0);
				}

				var y = (overrideY || 0) + offset;

				if (!shouldDrawLine || i === l - 1) {
					if (currentLine && currentLine.width) {
						writer.addVector({
							type: 'line',
							x1: currentLine.left,
							x2: currentLine.left + currentLine.width,
							y1: y,
							y2: y,
							lineWidth: lineWidth,
							lineColor: typeof this.layout.hLineColor === 'function' ? this.layout.hLineColor(lineIndex, this.tableNode) : this.layout.hLineColor
						}, false, overrideY);
						currentLine = null;
					}
				}
			}

			writer.context().moveDown(lineWidth);
		}
	};

	TableProcessor.prototype.drawVerticalLine = function (x, y0, y1, vLineIndex, writer) {
		var width = this.layout.vLineWidth(vLineIndex, this.tableNode);
		if (width === 0) {
			return;
		}
		writer.addVector({
			type: 'line',
			x1: x + width / 2,
			x2: x + width / 2,
			y1: y0,
			y2: y1,
			lineWidth: width,
			lineColor: typeof this.layout.vLineColor === 'function' ? this.layout.vLineColor(vLineIndex, this.tableNode) : this.layout.vLineColor
		}, false, true);
	};

	TableProcessor.prototype.endTable = function (writer) {
		if (this.cleanUpRepeatables) {
			writer.popFromRepeatables();
		}
	};

	TableProcessor.prototype.endRow = function (rowIndex, writer, pageBreaks) {
		var l, i;
		var self = this;
		writer.tracker.stopTracking('pageChanged', this.rowCallback);
		writer.context().moveDown(this.layout.paddingBottom(rowIndex, this.tableNode));
		writer.context().availableHeight += this.reservedAtBottom;

		var endingPage = writer.context().page;
		var endingY = writer.context().y;

		var xs = getLineXs();

		var ys = [];

		var hasBreaks = pageBreaks && pageBreaks.length > 0;
		var body = this.tableNode.table.body;

		ys.push({
			y0: this.rowTopY,
			page: hasBreaks ? pageBreaks[0].prevPage : endingPage
		});

		if (hasBreaks) {
			for (i = 0, l = pageBreaks.length; i < l; i++) {
				var pageBreak = pageBreaks[i];
				ys[ys.length - 1].y1 = pageBreak.prevY;

				ys.push({y0: pageBreak.y, page: pageBreak.prevPage + 1});
			}
		}

		ys[ys.length - 1].y1 = endingY;

		var skipOrphanePadding = (ys[0].y1 - ys[0].y0 === this.rowPaddingTop);
		for (var yi = (skipOrphanePadding ? 1 : 0), yl = ys.length; yi < yl; yi++) {
			var willBreak = yi < ys.length - 1;
			var rowBreakWithoutHeader = (yi > 0 && !this.headerRows);
			var hzLineOffset = rowBreakWithoutHeader ? 0 : this.topLineWidth;
			var y1 = ys[yi].y0;
			var y2 = ys[yi].y1;

			if (willBreak) {
				y2 = y2 + this.rowPaddingBottom;
			}

			if (writer.context().page != ys[yi].page) {
				writer.context().page = ys[yi].page;

				//TODO: buggy, availableHeight should be updated on every pageChanged event
				// TableProcessor should be pageChanged listener, instead of processRow
				this.reservedAtBottom = 0;
			}

			for (i = 0, l = xs.length; i < l; i++) {
				var leftBorder = false, rightBorder = false;
				var colIndex = xs[i].index;

				// the current cell
				if (colIndex < body[rowIndex].length) {
					var cell = body[rowIndex][colIndex];
					leftBorder = cell.border ? cell.border[0] : this.layout.defaultBorder;
				}

				// the cell from before column
				if (colIndex > 0) {
					var cell = body[rowIndex][colIndex - 1];
					rightBorder = cell.border ? cell.border[2] : this.layout.defaultBorder;
				}

				if (leftBorder || rightBorder) {
					this.drawVerticalLine(xs[i].x, y1 - hzLineOffset, y2 + this.bottomLineWidth, xs[i].index, writer);
				}

				if (i < l - 1) {
					var fillColor = body[rowIndex][colIndex].fillColor;
					if (!fillColor) {
						fillColor = typeof this.layout.fillColor === 'function' ? this.layout.fillColor(rowIndex, this.tableNode) : this.layout.fillColor;
					}
					if (fillColor) {
						var wBorder = (leftBorder || rightBorder) ? this.layout.vLineWidth(colIndex, this.tableNode) : 0;
						var xf = xs[i].x + wBorder;
						var yf = this.dontBreakRows ? y1 : y1 - hzLineOffset;
						writer.addVector({
							type: 'rect',
							x: xf,
							y: yf,
							w: xs[i + 1].x - xf,
							h: y2 + this.bottomLineWidth - yf,
							lineWidth: 0,
							color: fillColor
						}, false, true, 0);
					}
				}
			}

			if (willBreak && this.layout.hLineWhenBroken !== false) {
				this.drawHorizontalLine(rowIndex + 1, writer, y2);
			}
			if (rowBreakWithoutHeader && this.layout.hLineWhenBroken !== false) {
				this.drawHorizontalLine(rowIndex, writer, y1);
			}
		}

		writer.context().page = endingPage;
		writer.context().y = endingY;

		var row = this.tableNode.table.body[rowIndex];
		for (i = 0, l = row.length; i < l; i++) {
			if (row[i].rowSpan) {
				this.rowSpanData[i].rowSpan = row[i].rowSpan;

				// fix colSpans
				if (row[i].colSpan && row[i].colSpan > 1) {
					for (var j = 1; j < row[i].rowSpan; j++) {
						this.tableNode.table.body[rowIndex + j][i]._colSpan = row[i].colSpan;
					}
				}
			}

			if (this.rowSpanData[i].rowSpan > 0) {
				this.rowSpanData[i].rowSpan--;
			}
		}

		this.drawHorizontalLine(rowIndex + 1, writer);

		if (this.headerRows && rowIndex === this.headerRows - 1) {
			this.headerRepeatable = writer.currentBlockToRepeatable();
		}

		if (this.dontBreakRows) {
			writer.tracker.auto('pageChanged',
				function () {
					if (!self.headerRows && self.layout.hLineWhenBroken !== false) {
						self.drawHorizontalLine(rowIndex, writer);
					}
				},
				function () {
					writer.commitUnbreakableBlock();
				}
			);
		}

		if (this.headerRepeatable && (rowIndex === (this.rowsWithoutPageBreak - 1) || rowIndex === this.tableNode.table.body.length - 1)) {
			writer.commitUnbreakableBlock();
			writer.pushToRepeatables(this.headerRepeatable);
			this.cleanUpRepeatables = true;
			this.headerRepeatable = null;
		}

		function getLineXs() {
			var result = [];
			var cols = 0;

			for (var i = 0, l = self.tableNode.table.body[rowIndex].length; i < l; i++) {
				if (!cols) {
					result.push({x: self.rowSpanData[i].left, index: i});

					var item = self.tableNode.table.body[rowIndex][i];
					cols = (item._colSpan || item.colSpan || 0);
				}
				if (cols > 0) {
					cols--;
				}
			}

			result.push({x: self.rowSpanData[self.rowSpanData.length - 1].left, index: self.rowSpanData.length - 1});

			return result;
		}
	};

	module.exports = TableProcessor;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/*
	PDFDocument - represents an entire PDF document
	By Devon Govett
	 */

	(function() {
	  var PDFDocument, PDFObject, PDFPage, PDFReference, fs, stream,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  stream = __webpack_require__(24);

	  fs = __webpack_require__(10);

	  PDFObject = __webpack_require__(25);

	  PDFReference = __webpack_require__(26);

	  PDFPage = __webpack_require__(28);

	  PDFDocument = (function(superClass) {
	    var mixin;

	    extend(PDFDocument, superClass);

	    function PDFDocument(options1) {
	      var key, ref1, ref2, val;
	      this.options = options1 != null ? options1 : {};
	      PDFDocument.__super__.constructor.apply(this, arguments);
	      this.version = 1.3;
	      this.compress = (ref1 = this.options.compress) != null ? ref1 : true;
	      this._pageBuffer = [];
	      this._pageBufferStart = 0;
	      this._offsets = [];
	      this._waiting = 0;
	      this._ended = false;
	      this._offset = 0;
	      this._root = this.ref({
	        Type: 'Catalog',
	        Pages: this.ref({
	          Type: 'Pages',
	          Count: 0,
	          Kids: []
	        })
	      });
	      this.page = null;
	      this.initColor();
	      this.initVector();
	      this.initFonts();
	      this.initText();
	      this.initImages();
	      this.info = {
	        Producer: 'PDFKit',
	        Creator: 'PDFKit',
	        CreationDate: new Date()
	      };
	      if (this.options.info) {
	        ref2 = this.options.info;
	        for (key in ref2) {
	          val = ref2[key];
	          this.info[key] = val;
	        }
	      }
	      this._write("%PDF-" + this.version);
	      this._write("%\xFF\xFF\xFF\xFF");
	      if (this.options.autoFirstPage !== false) {
	        this.addPage();
	      }
	    }

	    mixin = function(methods) {
	      var method, name, results;
	      results = [];
	      for (name in methods) {
	        method = methods[name];
	        results.push(PDFDocument.prototype[name] = method);
	      }
	      return results;
	    };

	    mixin(__webpack_require__(29));

	    mixin(__webpack_require__(31));

	    mixin(__webpack_require__(33));

	    mixin(__webpack_require__(85));

	    mixin(__webpack_require__(92));

	    mixin(__webpack_require__(98));

	    PDFDocument.prototype.addPage = function(options) {
	      var pages;
	      if (options == null) {
	        options = this.options;
	      }
	      if (!this.options.bufferPages) {
	        this.flushPages();
	      }
	      this.page = new PDFPage(this, options);
	      this._pageBuffer.push(this.page);
	      pages = this._root.data.Pages.data;
	      pages.Kids.push(this.page.dictionary);
	      pages.Count++;
	      this.x = this.page.margins.left;
	      this.y = this.page.margins.top;
	      this._ctm = [1, 0, 0, 1, 0, 0];
	      this.transform(1, 0, 0, -1, 0, this.page.height);
	      this.emit('pageAdded');
	      return this;
	    };

	    PDFDocument.prototype.bufferedPageRange = function() {
	      return {
	        start: this._pageBufferStart,
	        count: this._pageBuffer.length
	      };
	    };

	    PDFDocument.prototype.switchToPage = function(n) {
	      var page;
	      if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
	        throw new Error("switchToPage(" + n + ") out of bounds, current buffer covers pages " + this._pageBufferStart + " to " + (this._pageBufferStart + this._pageBuffer.length - 1));
	      }
	      return this.page = page;
	    };

	    PDFDocument.prototype.flushPages = function() {
	      var i, len, page, pages;
	      pages = this._pageBuffer;
	      this._pageBuffer = [];
	      this._pageBufferStart += pages.length;
	      for (i = 0, len = pages.length; i < len; i++) {
	        page = pages[i];
	        page.end();
	      }
	    };

	    PDFDocument.prototype.ref = function(data) {
	      var ref;
	      ref = new PDFReference(this, this._offsets.length + 1, data);
	      this._offsets.push(null);
	      this._waiting++;
	      return ref;
	    };

	    PDFDocument.prototype._read = function() {};

	    PDFDocument.prototype._write = function(data) {
	      if (!Buffer.isBuffer(data)) {
	        data = new Buffer(data + '\n', 'binary');
	      }
	      this.push(data);
	      return this._offset += data.length;
	    };

	    PDFDocument.prototype.addContent = function(data) {
	      this.page.write(data);
	      return this;
	    };

	    PDFDocument.prototype._refEnd = function(ref) {
	      this._offsets[ref.id - 1] = ref.offset;
	      if (--this._waiting === 0 && this._ended) {
	        this._finalize();
	        return this._ended = false;
	      }
	    };

	    PDFDocument.prototype.write = function(filename, fn) {
	      var err;
	      err = new Error('PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.');
	      console.warn(err.stack);
	      this.pipe(fs.createWriteStream(filename));
	      this.end();
	      return this.once('end', fn);
	    };

	    PDFDocument.prototype.output = function(fn) {
	      throw new Error('PDFDocument#output is deprecated, and has been removed from PDFKit. Please pipe the document into a Node stream.');
	    };

	    PDFDocument.prototype.end = function() {
	      var font, key, name, ref1, ref2, val;
	      this.flushPages();
	      this._info = this.ref();
	      ref1 = this.info;
	      for (key in ref1) {
	        val = ref1[key];
	        if (typeof val === 'string') {
	          val = new String(val);
	        }
	        this._info.data[key] = val;
	      }
	      this._info.end();
	      ref2 = this._fontFamilies;
	      for (name in ref2) {
	        font = ref2[name];
	        font.finalize();
	      }
	      this._root.end();
	      this._root.data.Pages.end();
	      if (this._waiting === 0) {
	        return this._finalize();
	      } else {
	        return this._ended = true;
	      }
	    };

	    PDFDocument.prototype._finalize = function(fn) {
	      var i, len, offset, ref1, xRefOffset;
	      xRefOffset = this._offset;
	      this._write("xref");
	      this._write("0 " + (this._offsets.length + 1));
	      this._write("0000000000 65535 f ");
	      ref1 = this._offsets;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        offset = ref1[i];
	        offset = ('0000000000' + offset).slice(-10);
	        this._write(offset + ' 00000 n ');
	      }
	      this._write('trailer');
	      this._write(PDFObject.convert({
	        Size: this._offsets.length + 1,
	        Root: this._root,
	        Info: this._info
	      }));
	      this._write('startxref');
	      this._write("" + xRefOffset);
	      this._write('%%EOF');
	      return this.push(null);
	    };

	    PDFDocument.prototype.toString = function() {
	      return "[object PDFDocument]";
	    };

	    return PDFDocument;

	  })(stream.Readable);

	  module.exports = PDFDocument;

	}).call(this);


/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_24__;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/*
	PDFObject - converts JavaScript types into their corrisponding PDF types.
	By Devon Govett
	 */

	(function() {
	  var PDFObject, PDFReference;

	  PDFObject = (function() {
	    var escapable, escapableRe, pad, swapBytes;

	    function PDFObject() {}

	    pad = function(str, length) {
	      return (Array(length + 1).join('0') + str).slice(-length);
	    };

	    escapableRe = /[\n\r\t\b\f\(\)\\]/g;

	    escapable = {
	      '\n': '\\n',
	      '\r': '\\r',
	      '\t': '\\t',
	      '\b': '\\b',
	      '\f': '\\f',
	      '\\': '\\\\',
	      '(': '\\(',
	      ')': '\\)'
	    };

	    swapBytes = function(buff) {
	      var a, i, j, l, ref;
	      l = buff.length;
	      if (l & 0x01) {
	        throw new Error("Buffer length must be even");
	      } else {
	        for (i = j = 0, ref = l - 1; j < ref; i = j += 2) {
	          a = buff[i];
	          buff[i] = buff[i + 1];
	          buff[i + 1] = a;
	        }
	      }
	      return buff;
	    };

	    PDFObject.convert = function(object) {
	      var e, i, isUnicode, items, j, key, out, ref, string, val;
	      if (typeof object === 'string') {
	        return '/' + object;
	      } else if (object instanceof String) {
	        string = object.replace(escapableRe, function(c) {
	          return escapable[c];
	        });
	        isUnicode = false;
	        for (i = j = 0, ref = string.length; j < ref; i = j += 1) {
	          if (string.charCodeAt(i) > 0x7f) {
	            isUnicode = true;
	            break;
	          }
	        }
	        if (isUnicode) {
	          string = swapBytes(new Buffer('\ufeff' + string, 'utf16le')).toString('binary');
	        }
	        return '(' + string + ')';
	      } else if (Buffer.isBuffer(object)) {
	        return '<' + object.toString('hex') + '>';
	      } else if (object instanceof PDFReference) {
	        return object.toString();
	      } else if (object instanceof Date) {
	        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
	      } else if (Array.isArray(object)) {
	        items = ((function() {
	          var k, len, results;
	          results = [];
	          for (k = 0, len = object.length; k < len; k++) {
	            e = object[k];
	            results.push(PDFObject.convert(e));
	          }
	          return results;
	        })()).join(' ');
	        return '[' + items + ']';
	      } else if ({}.toString.call(object) === '[object Object]') {
	        out = ['<<'];
	        for (key in object) {
	          val = object[key];
	          out.push('/' + key + ' ' + PDFObject.convert(val));
	        }
	        out.push('>>');
	        return out.join('\n');
	      } else {
	        return '' + object;
	      }
	    };

	    return PDFObject;

	  })();

	  module.exports = PDFObject;

	  PDFReference = __webpack_require__(26);

	}).call(this);


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/*
	PDFReference - represents a reference to another object in the PDF object heirarchy
	By Devon Govett
	 */

	(function() {
	  var PDFObject, PDFReference, stream, zlib,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  zlib = __webpack_require__(27);

	  stream = __webpack_require__(24);

	  PDFReference = (function(superClass) {
	    extend(PDFReference, superClass);

	    function PDFReference(document, id, data) {
	      this.document = document;
	      this.id = id;
	      this.data = data != null ? data : {};
	      this.finalize = bind(this.finalize, this);
	      PDFReference.__super__.constructor.call(this, {
	        decodeStrings: false
	      });
	      this.gen = 0;
	      this.deflate = null;
	      this.compress = this.document.compress && !this.data.Filter;
	      this.uncompressedLength = 0;
	      this.chunks = [];
	    }

	    PDFReference.prototype.initDeflate = function() {
	      this.data.Filter = 'FlateDecode';
	      this.deflate = zlib.createDeflate();
	      this.deflate.on('data', (function(_this) {
	        return function(chunk) {
	          _this.chunks.push(chunk);
	          return _this.data.Length += chunk.length;
	        };
	      })(this));
	      return this.deflate.on('end', this.finalize);
	    };

	    PDFReference.prototype._write = function(chunk, encoding, callback) {
	      var base;
	      if (!Buffer.isBuffer(chunk)) {
	        chunk = new Buffer(chunk + '\n', 'binary');
	      }
	      this.uncompressedLength += chunk.length;
	      if ((base = this.data).Length == null) {
	        base.Length = 0;
	      }
	      if (this.compress) {
	        if (!this.deflate) {
	          this.initDeflate();
	        }
	        this.deflate.write(chunk);
	      } else {
	        this.chunks.push(chunk);
	        this.data.Length += chunk.length;
	      }
	      return callback();
	    };

	    PDFReference.prototype.end = function(chunk) {
	      PDFReference.__super__.end.apply(this, arguments);
	      if (this.deflate) {
	        return this.deflate.end();
	      } else {
	        return this.finalize();
	      }
	    };

	    PDFReference.prototype.finalize = function() {
	      var chunk, i, len, ref;
	      this.offset = this.document._offset;
	      this.document._write(this.id + " " + this.gen + " obj");
	      this.document._write(PDFObject.convert(this.data));
	      if (this.chunks.length) {
	        this.document._write('stream');
	        ref = this.chunks;
	        for (i = 0, len = ref.length; i < len; i++) {
	          chunk = ref[i];
	          this.document._write(chunk);
	        }
	        this.chunks.length = 0;
	        this.document._write('\nendstream');
	      }
	      this.document._write('endobj');
	      return this.document._refEnd(this);
	    };

	    PDFReference.prototype.toString = function() {
	      return this.id + " " + this.gen + " R";
	    };

	    return PDFReference;

	  })(stream.Writable);

	  module.exports = PDFReference;

	  PDFObject = __webpack_require__(25);

	}).call(this);


/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_27__;

/***/ },
/* 28 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0

	/*
	PDFPage - represents a single page in the PDF document
	By Devon Govett
	 */

	(function() {
	  var PDFPage;

	  PDFPage = (function() {
	    var DEFAULT_MARGINS, SIZES;

	    function PDFPage(document, options) {
	      var dimensions;
	      this.document = document;
	      if (options == null) {
	        options = {};
	      }
	      this.size = options.size || 'letter';
	      this.layout = options.layout || 'portrait';
	      if (typeof options.margin === 'number') {
	        this.margins = {
	          top: options.margin,
	          left: options.margin,
	          bottom: options.margin,
	          right: options.margin
	        };
	      } else {
	        this.margins = options.margins || DEFAULT_MARGINS;
	      }
	      dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
	      this.width = dimensions[this.layout === 'portrait' ? 0 : 1];
	      this.height = dimensions[this.layout === 'portrait' ? 1 : 0];
	      this.content = this.document.ref();
	      this.resources = this.document.ref({
	        ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']
	      });
	      Object.defineProperties(this, {
	        fonts: {
	          get: (function(_this) {
	            return function() {
	              var base;
	              return (base = _this.resources.data).Font != null ? base.Font : base.Font = {};
	            };
	          })(this)
	        },
	        xobjects: {
	          get: (function(_this) {
	            return function() {
	              var base;
	              return (base = _this.resources.data).XObject != null ? base.XObject : base.XObject = {};
	            };
	          })(this)
	        },
	        ext_gstates: {
	          get: (function(_this) {
	            return function() {
	              var base;
	              return (base = _this.resources.data).ExtGState != null ? base.ExtGState : base.ExtGState = {};
	            };
	          })(this)
	        },
	        patterns: {
	          get: (function(_this) {
	            return function() {
	              var base;
	              return (base = _this.resources.data).Pattern != null ? base.Pattern : base.Pattern = {};
	            };
	          })(this)
	        },
	        annotations: {
	          get: (function(_this) {
	            return function() {
	              var base;
	              return (base = _this.dictionary.data).Annots != null ? base.Annots : base.Annots = [];
	            };
	          })(this)
	        }
	      });
	      this.dictionary = this.document.ref({
	        Type: 'Page',
	        Parent: this.document._root.data.Pages,
	        MediaBox: [0, 0, this.width, this.height],
	        Contents: this.content,
	        Resources: this.resources
	      });
	    }

	    PDFPage.prototype.maxY = function() {
	      return this.height - this.margins.bottom;
	    };

	    PDFPage.prototype.write = function(chunk) {
	      return this.content.write(chunk);
	    };

	    PDFPage.prototype.end = function() {
	      this.dictionary.end();
	      this.resources.end();
	      return this.content.end();
	    };

	    DEFAULT_MARGINS = {
	      top: 72,
	      left: 72,
	      bottom: 72,
	      right: 72
	    };

	    SIZES = {
	      '4A0': [4767.87, 6740.79],
	      '2A0': [3370.39, 4767.87],
	      A0: [2383.94, 3370.39],
	      A1: [1683.78, 2383.94],
	      A2: [1190.55, 1683.78],
	      A3: [841.89, 1190.55],
	      A4: [595.28, 841.89],
	      A5: [419.53, 595.28],
	      A6: [297.64, 419.53],
	      A7: [209.76, 297.64],
	      A8: [147.40, 209.76],
	      A9: [104.88, 147.40],
	      A10: [73.70, 104.88],
	      B0: [2834.65, 4008.19],
	      B1: [2004.09, 2834.65],
	      B2: [1417.32, 2004.09],
	      B3: [1000.63, 1417.32],
	      B4: [708.66, 1000.63],
	      B5: [498.90, 708.66],
	      B6: [354.33, 498.90],
	      B7: [249.45, 354.33],
	      B8: [175.75, 249.45],
	      B9: [124.72, 175.75],
	      B10: [87.87, 124.72],
	      C0: [2599.37, 3676.54],
	      C1: [1836.85, 2599.37],
	      C2: [1298.27, 1836.85],
	      C3: [918.43, 1298.27],
	      C4: [649.13, 918.43],
	      C5: [459.21, 649.13],
	      C6: [323.15, 459.21],
	      C7: [229.61, 323.15],
	      C8: [161.57, 229.61],
	      C9: [113.39, 161.57],
	      C10: [79.37, 113.39],
	      RA0: [2437.80, 3458.27],
	      RA1: [1729.13, 2437.80],
	      RA2: [1218.90, 1729.13],
	      RA3: [864.57, 1218.90],
	      RA4: [609.45, 864.57],
	      SRA0: [2551.18, 3628.35],
	      SRA1: [1814.17, 2551.18],
	      SRA2: [1275.59, 1814.17],
	      SRA3: [907.09, 1275.59],
	      SRA4: [637.80, 907.09],
	      EXECUTIVE: [521.86, 756.00],
	      FOLIO: [612.00, 936.00],
	      LEGAL: [612.00, 1008.00],
	      LETTER: [612.00, 792.00],
	      TABLOID: [792.00, 1224.00]
	    };

	    return PDFPage;

	  })();

	  module.exports = PDFPage;

	}).call(this);


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var PDFGradient, PDFLinearGradient, PDFRadialGradient, namedColors, ref;

	  ref = __webpack_require__(30), PDFGradient = ref.PDFGradient, PDFLinearGradient = ref.PDFLinearGradient, PDFRadialGradient = ref.PDFRadialGradient;

	  module.exports = {
	    initColor: function() {
	      this._opacityRegistry = {};
	      this._opacityCount = 0;
	      return this._gradCount = 0;
	    },
	    _normalizeColor: function(color) {
	      var hex, part;
	      if (color instanceof PDFGradient) {
	        return color;
	      }
	      if (typeof color === 'string') {
	        if (color.charAt(0) === '#') {
	          if (color.length === 4) {
	            color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
	          }
	          hex = parseInt(color.slice(1), 16);
	          color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];
	        } else if (namedColors[color]) {
	          color = namedColors[color];
	        }
	      }
	      if (Array.isArray(color)) {
	        if (color.length === 3) {
	          color = (function() {
	            var i, len, results;
	            results = [];
	            for (i = 0, len = color.length; i < len; i++) {
	              part = color[i];
	              results.push(part / 255);
	            }
	            return results;
	          })();
	        } else if (color.length === 4) {
	          color = (function() {
	            var i, len, results;
	            results = [];
	            for (i = 0, len = color.length; i < len; i++) {
	              part = color[i];
	              results.push(part / 100);
	            }
	            return results;
	          })();
	        }
	        return color;
	      }
	      return null;
	    },
	    _setColor: function(color, stroke) {
	      var gstate, name, op, space;
	      color = this._normalizeColor(color);
	      if (!color) {
	        return false;
	      }
	      if (this._sMasked) {
	        gstate = this.ref({
	          Type: 'ExtGState',
	          SMask: 'None'
	        });
	        gstate.end();
	        name = "Gs" + (++this._opacityCount);
	        this.page.ext_gstates[name] = gstate;
	        this.addContent("/" + name + " gs");
	        this._sMasked = false;
	      }
	      op = stroke ? 'SCN' : 'scn';
	      if (color instanceof PDFGradient) {
	        this._setColorSpace('Pattern', stroke);
	        color.apply(op);
	      } else {
	        space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';
	        this._setColorSpace(space, stroke);
	        color = color.join(' ');
	        this.addContent(color + " " + op);
	      }
	      return true;
	    },
	    _setColorSpace: function(space, stroke) {
	      var op;
	      op = stroke ? 'CS' : 'cs';
	      return this.addContent("/" + space + " " + op);
	    },
	    fillColor: function(color, opacity) {
	      var set;
	      if (opacity == null) {
	        opacity = 1;
	      }
	      set = this._setColor(color, false);
	      if (set) {
	        this.fillOpacity(opacity);
	      }
	      this._fillColor = [color, opacity];
	      return this;
	    },
	    strokeColor: function(color, opacity) {
	      var set;
	      if (opacity == null) {
	        opacity = 1;
	      }
	      set = this._setColor(color, true);
	      if (set) {
	        this.strokeOpacity(opacity);
	      }
	      return this;
	    },
	    opacity: function(opacity) {
	      this._doOpacity(opacity, opacity);
	      return this;
	    },
	    fillOpacity: function(opacity) {
	      this._doOpacity(opacity, null);
	      return this;
	    },
	    strokeOpacity: function(opacity) {
	      this._doOpacity(null, opacity);
	      return this;
	    },
	    _doOpacity: function(fillOpacity, strokeOpacity) {
	      var dictionary, id, key, name, ref1;
	      if (!((fillOpacity != null) || (strokeOpacity != null))) {
	        return;
	      }
	      if (fillOpacity != null) {
	        fillOpacity = Math.max(0, Math.min(1, fillOpacity));
	      }
	      if (strokeOpacity != null) {
	        strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
	      }
	      key = fillOpacity + "_" + strokeOpacity;
	      if (this._opacityRegistry[key]) {
	        ref1 = this._opacityRegistry[key], dictionary = ref1[0], name = ref1[1];
	      } else {
	        dictionary = {
	          Type: 'ExtGState'
	        };
	        if (fillOpacity != null) {
	          dictionary.ca = fillOpacity;
	        }
	        if (strokeOpacity != null) {
	          dictionary.CA = strokeOpacity;
	        }
	        dictionary = this.ref(dictionary);
	        dictionary.end();
	        id = ++this._opacityCount;
	        name = "Gs" + id;
	        this._opacityRegistry[key] = [dictionary, name];
	      }
	      this.page.ext_gstates[name] = dictionary;
	      return this.addContent("/" + name + " gs");
	    },
	    linearGradient: function(x1, y1, x2, y2) {
	      return new PDFLinearGradient(this, x1, y1, x2, y2);
	    },
	    radialGradient: function(x1, y1, r1, x2, y2, r2) {
	      return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
	    }
	  };

	  namedColors = {
	    aliceblue: [240, 248, 255],
	    antiquewhite: [250, 235, 215],
	    aqua: [0, 255, 255],
	    aquamarine: [127, 255, 212],
	    azure: [240, 255, 255],
	    beige: [245, 245, 220],
	    bisque: [255, 228, 196],
	    black: [0, 0, 0],
	    blanchedalmond: [255, 235, 205],
	    blue: [0, 0, 255],
	    blueviolet: [138, 43, 226],
	    brown: [165, 42, 42],
	    burlywood: [222, 184, 135],
	    cadetblue: [95, 158, 160],
	    chartreuse: [127, 255, 0],
	    chocolate: [210, 105, 30],
	    coral: [255, 127, 80],
	    cornflowerblue: [100, 149, 237],
	    cornsilk: [255, 248, 220],
	    crimson: [220, 20, 60],
	    cyan: [0, 255, 255],
	    darkblue: [0, 0, 139],
	    darkcyan: [0, 139, 139],
	    darkgoldenrod: [184, 134, 11],
	    darkgray: [169, 169, 169],
	    darkgreen: [0, 100, 0],
	    darkgrey: [169, 169, 169],
	    darkkhaki: [189, 183, 107],
	    darkmagenta: [139, 0, 139],
	    darkolivegreen: [85, 107, 47],
	    darkorange: [255, 140, 0],
	    darkorchid: [153, 50, 204],
	    darkred: [139, 0, 0],
	    darksalmon: [233, 150, 122],
	    darkseagreen: [143, 188, 143],
	    darkslateblue: [72, 61, 139],
	    darkslategray: [47, 79, 79],
	    darkslategrey: [47, 79, 79],
	    darkturquoise: [0, 206, 209],
	    darkviolet: [148, 0, 211],
	    deeppink: [255, 20, 147],
	    deepskyblue: [0, 191, 255],
	    dimgray: [105, 105, 105],
	    dimgrey: [105, 105, 105],
	    dodgerblue: [30, 144, 255],
	    firebrick: [178, 34, 34],
	    floralwhite: [255, 250, 240],
	    forestgreen: [34, 139, 34],
	    fuchsia: [255, 0, 255],
	    gainsboro: [220, 220, 220],
	    ghostwhite: [248, 248, 255],
	    gold: [255, 215, 0],
	    goldenrod: [218, 165, 32],
	    gray: [128, 128, 128],
	    grey: [128, 128, 128],
	    green: [0, 128, 0],
	    greenyellow: [173, 255, 47],
	    honeydew: [240, 255, 240],
	    hotpink: [255, 105, 180],
	    indianred: [205, 92, 92],
	    indigo: [75, 0, 130],
	    ivory: [255, 255, 240],
	    khaki: [240, 230, 140],
	    lavender: [230, 230, 250],
	    lavenderblush: [255, 240, 245],
	    lawngreen: [124, 252, 0],
	    lemonchiffon: [255, 250, 205],
	    lightblue: [173, 216, 230],
	    lightcoral: [240, 128, 128],
	    lightcyan: [224, 255, 255],
	    lightgoldenrodyellow: [250, 250, 210],
	    lightgray: [211, 211, 211],
	    lightgreen: [144, 238, 144],
	    lightgrey: [211, 211, 211],
	    lightpink: [255, 182, 193],
	    lightsalmon: [255, 160, 122],
	    lightseagreen: [32, 178, 170],
	    lightskyblue: [135, 206, 250],
	    lightslategray: [119, 136, 153],
	    lightslategrey: [119, 136, 153],
	    lightsteelblue: [176, 196, 222],
	    lightyellow: [255, 255, 224],
	    lime: [0, 255, 0],
	    limegreen: [50, 205, 50],
	    linen: [250, 240, 230],
	    magenta: [255, 0, 255],
	    maroon: [128, 0, 0],
	    mediumaquamarine: [102, 205, 170],
	    mediumblue: [0, 0, 205],
	    mediumorchid: [186, 85, 211],
	    mediumpurple: [147, 112, 219],
	    mediumseagreen: [60, 179, 113],
	    mediumslateblue: [123, 104, 238],
	    mediumspringgreen: [0, 250, 154],
	    mediumturquoise: [72, 209, 204],
	    mediumvioletred: [199, 21, 133],
	    midnightblue: [25, 25, 112],
	    mintcream: [245, 255, 250],
	    mistyrose: [255, 228, 225],
	    moccasin: [255, 228, 181],
	    navajowhite: [255, 222, 173],
	    navy: [0, 0, 128],
	    oldlace: [253, 245, 230],
	    olive: [128, 128, 0],
	    olivedrab: [107, 142, 35],
	    orange: [255, 165, 0],
	    orangered: [255, 69, 0],
	    orchid: [218, 112, 214],
	    palegoldenrod: [238, 232, 170],
	    palegreen: [152, 251, 152],
	    paleturquoise: [175, 238, 238],
	    palevioletred: [219, 112, 147],
	    papayawhip: [255, 239, 213],
	    peachpuff: [255, 218, 185],
	    peru: [205, 133, 63],
	    pink: [255, 192, 203],
	    plum: [221, 160, 221],
	    powderblue: [176, 224, 230],
	    purple: [128, 0, 128],
	    red: [255, 0, 0],
	    rosybrown: [188, 143, 143],
	    royalblue: [65, 105, 225],
	    saddlebrown: [139, 69, 19],
	    salmon: [250, 128, 114],
	    sandybrown: [244, 164, 96],
	    seagreen: [46, 139, 87],
	    seashell: [255, 245, 238],
	    sienna: [160, 82, 45],
	    silver: [192, 192, 192],
	    skyblue: [135, 206, 235],
	    slateblue: [106, 90, 205],
	    slategray: [112, 128, 144],
	    slategrey: [112, 128, 144],
	    snow: [255, 250, 250],
	    springgreen: [0, 255, 127],
	    steelblue: [70, 130, 180],
	    tan: [210, 180, 140],
	    teal: [0, 128, 128],
	    thistle: [216, 191, 216],
	    tomato: [255, 99, 71],
	    turquoise: [64, 224, 208],
	    violet: [238, 130, 238],
	    wheat: [245, 222, 179],
	    white: [255, 255, 255],
	    whitesmoke: [245, 245, 245],
	    yellow: [255, 255, 0],
	    yellowgreen: [154, 205, 50]
	  };

	}).call(this);


/***/ },
/* 30 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var PDFGradient, PDFLinearGradient, PDFRadialGradient,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  PDFGradient = (function() {
	    function PDFGradient(doc) {
	      this.doc = doc;
	      this.stops = [];
	      this.embedded = false;
	      this.transform = [1, 0, 0, 1, 0, 0];
	      this._colorSpace = 'DeviceRGB';
	    }

	    PDFGradient.prototype.stop = function(pos, color, opacity) {
	      if (opacity == null) {
	        opacity = 1;
	      }
	      opacity = Math.max(0, Math.min(1, opacity));
	      this.stops.push([pos, this.doc._normalizeColor(color), opacity]);
	      return this;
	    };

	    PDFGradient.prototype.embed = function() {
	      var bounds, dx, dy, encode, fn, form, grad, group, gstate, i, j, k, last, len, m, m0, m1, m11, m12, m2, m21, m22, m3, m4, m5, name, pattern, ref, ref1, ref2, resources, sMask, shader, stop, stops, v;
	      if (this.embedded || this.stops.length === 0) {
	        return;
	      }
	      this.embedded = true;
	      last = this.stops[this.stops.length - 1];
	      if (last[0] < 1) {
	        this.stops.push([1, last[1], last[2]]);
	      }
	      bounds = [];
	      encode = [];
	      stops = [];
	      for (i = j = 0, ref = this.stops.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        encode.push(0, 1);
	        if (i + 2 !== this.stops.length) {
	          bounds.push(this.stops[i + 1][0]);
	        }
	        fn = this.doc.ref({
	          FunctionType: 2,
	          Domain: [0, 1],
	          C0: this.stops[i + 0][1],
	          C1: this.stops[i + 1][1],
	          N: 1
	        });
	        stops.push(fn);
	        fn.end();
	      }
	      if (stops.length === 1) {
	        fn = stops[0];
	      } else {
	        fn = this.doc.ref({
	          FunctionType: 3,
	          Domain: [0, 1],
	          Functions: stops,
	          Bounds: bounds,
	          Encode: encode
	        });
	        fn.end();
	      }
	      this.id = 'Sh' + (++this.doc._gradCount);
	      m = this.doc._ctm.slice();
	      m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];
	      ref1 = this.transform, m11 = ref1[0], m12 = ref1[1], m21 = ref1[2], m22 = ref1[3], dx = ref1[4], dy = ref1[5];
	      m[0] = m0 * m11 + m2 * m12;
	      m[1] = m1 * m11 + m3 * m12;
	      m[2] = m0 * m21 + m2 * m22;
	      m[3] = m1 * m21 + m3 * m22;
	      m[4] = m0 * dx + m2 * dy + m4;
	      m[5] = m1 * dx + m3 * dy + m5;
	      shader = this.shader(fn);
	      shader.end();
	      pattern = this.doc.ref({
	        Type: 'Pattern',
	        PatternType: 2,
	        Shading: shader,
	        Matrix: (function() {
	          var k, len, results;
	          results = [];
	          for (k = 0, len = m.length; k < len; k++) {
	            v = m[k];
	            results.push(+v.toFixed(5));
	          }
	          return results;
	        })()
	      });
	      this.doc.page.patterns[this.id] = pattern;
	      pattern.end();
	      if (this.stops.some(function(stop) {
	        return stop[2] < 1;
	      })) {
	        grad = this.opacityGradient();
	        grad._colorSpace = 'DeviceGray';
	        ref2 = this.stops;
	        for (k = 0, len = ref2.length; k < len; k++) {
	          stop = ref2[k];
	          grad.stop(stop[0], [stop[2]]);
	        }
	        grad = grad.embed();
	        group = this.doc.ref({
	          Type: 'Group',
	          S: 'Transparency',
	          CS: 'DeviceGray'
	        });
	        group.end();
	        resources = this.doc.ref({
	          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
	          Shading: {
	            Sh1: grad.data.Shading
	          }
	        });
	        resources.end();
	        form = this.doc.ref({
	          Type: 'XObject',
	          Subtype: 'Form',
	          FormType: 1,
	          BBox: [0, 0, this.doc.page.width, this.doc.page.height],
	          Group: group,
	          Resources: resources
	        });
	        form.end("/Sh1 sh");
	        sMask = this.doc.ref({
	          Type: 'Mask',
	          S: 'Luminosity',
	          G: form
	        });
	        sMask.end();
	        gstate = this.doc.ref({
	          Type: 'ExtGState',
	          SMask: sMask
	        });
	        this.opacity_id = ++this.doc._opacityCount;
	        name = "Gs" + this.opacity_id;
	        this.doc.page.ext_gstates[name] = gstate;
	        gstate.end();
	      }
	      return pattern;
	    };

	    PDFGradient.prototype.apply = function(op) {
	      if (!this.embedded) {
	        this.embed();
	      }
	      this.doc.addContent("/" + this.id + " " + op);
	      if (this.opacity_id) {
	        this.doc.addContent("/Gs" + this.opacity_id + " gs");
	        return this.doc._sMasked = true;
	      }
	    };

	    return PDFGradient;

	  })();

	  PDFLinearGradient = (function(superClass) {
	    extend(PDFLinearGradient, superClass);

	    function PDFLinearGradient(doc, x1, y1, x2, y2) {
	      this.doc = doc;
	      this.x1 = x1;
	      this.y1 = y1;
	      this.x2 = x2;
	      this.y2 = y2;
	      PDFLinearGradient.__super__.constructor.apply(this, arguments);
	    }

	    PDFLinearGradient.prototype.shader = function(fn) {
	      return this.doc.ref({
	        ShadingType: 2,
	        ColorSpace: this._colorSpace,
	        Coords: [this.x1, this.y1, this.x2, this.y2],
	        Function: fn,
	        Extend: [true, true]
	      });
	    };

	    PDFLinearGradient.prototype.opacityGradient = function() {
	      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
	    };

	    return PDFLinearGradient;

	  })(PDFGradient);

	  PDFRadialGradient = (function(superClass) {
	    extend(PDFRadialGradient, superClass);

	    function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
	      this.doc = doc;
	      this.x1 = x1;
	      this.y1 = y1;
	      this.r1 = r1;
	      this.x2 = x2;
	      this.y2 = y2;
	      this.r2 = r2;
	      PDFRadialGradient.__super__.constructor.apply(this, arguments);
	    }

	    PDFRadialGradient.prototype.shader = function(fn) {
	      return this.doc.ref({
	        ShadingType: 3,
	        ColorSpace: this._colorSpace,
	        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
	        Function: fn,
	        Extend: [true, true]
	      });
	    };

	    PDFRadialGradient.prototype.opacityGradient = function() {
	      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
	    };

	    return PDFRadialGradient;

	  })(PDFGradient);

	  module.exports = {
	    PDFGradient: PDFGradient,
	    PDFLinearGradient: PDFLinearGradient,
	    PDFRadialGradient: PDFRadialGradient
	  };

	}).call(this);


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var KAPPA, SVGPath,
	    slice = [].slice;

	  SVGPath = __webpack_require__(32);

	  KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

	  module.exports = {
	    initVector: function() {
	      this._ctm = [1, 0, 0, 1, 0, 0];
	      return this._ctmStack = [];
	    },
	    save: function() {
	      this._ctmStack.push(this._ctm.slice());
	      return this.addContent('q');
	    },
	    restore: function() {
	      this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
	      return this.addContent('Q');
	    },
	    closePath: function() {
	      return this.addContent('h');
	    },
	    lineWidth: function(w) {
	      return this.addContent(w + " w");
	    },
	    _CAP_STYLES: {
	      BUTT: 0,
	      ROUND: 1,
	      SQUARE: 2
	    },
	    lineCap: function(c) {
	      if (typeof c === 'string') {
	        c = this._CAP_STYLES[c.toUpperCase()];
	      }
	      return this.addContent(c + " J");
	    },
	    _JOIN_STYLES: {
	      MITER: 0,
	      ROUND: 1,
	      BEVEL: 2
	    },
	    lineJoin: function(j) {
	      if (typeof j === 'string') {
	        j = this._JOIN_STYLES[j.toUpperCase()];
	      }
	      return this.addContent(j + " j");
	    },
	    miterLimit: function(m) {
	      return this.addContent(m + " M");
	    },
	    dash: function(length, options) {
	      var phase, ref, space;
	      if (options == null) {
	        options = {};
	      }
	      if (length == null) {
	        return this;
	      }
	      space = (ref = options.space) != null ? ref : length;
	      phase = options.phase || 0;
	      return this.addContent("[" + length + " " + space + "] " + phase + " d");
	    },
	    undash: function() {
	      return this.addContent("[] 0 d");
	    },
	    moveTo: function(x, y) {
	      return this.addContent(x + " " + y + " m");
	    },
	    lineTo: function(x, y) {
	      return this.addContent(x + " " + y + " l");
	    },
	    bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {
	      return this.addContent(cp1x + " " + cp1y + " " + cp2x + " " + cp2y + " " + x + " " + y + " c");
	    },
	    quadraticCurveTo: function(cpx, cpy, x, y) {
	      return this.addContent(cpx + " " + cpy + " " + x + " " + y + " v");
	    },
	    rect: function(x, y, w, h) {
	      return this.addContent(x + " " + y + " " + w + " " + h + " re");
	    },
	    roundedRect: function(x, y, w, h, r) {
	      if (r == null) {
	        r = 0;
	      }
	      this.moveTo(x + r, y);
	      this.lineTo(x + w - r, y);
	      this.quadraticCurveTo(x + w, y, x + w, y + r);
	      this.lineTo(x + w, y + h - r);
	      this.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
	      this.lineTo(x + r, y + h);
	      this.quadraticCurveTo(x, y + h, x, y + h - r);
	      this.lineTo(x, y + r);
	      return this.quadraticCurveTo(x, y, x + r, y);
	    },
	    ellipse: function(x, y, r1, r2) {
	      var ox, oy, xe, xm, ye, ym;
	      if (r2 == null) {
	        r2 = r1;
	      }
	      x -= r1;
	      y -= r2;
	      ox = r1 * KAPPA;
	      oy = r2 * KAPPA;
	      xe = x + r1 * 2;
	      ye = y + r2 * 2;
	      xm = x + r1;
	      ym = y + r2;
	      this.moveTo(x, ym);
	      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	      return this.closePath();
	    },
	    circle: function(x, y, radius) {
	      return this.ellipse(x, y, radius);
	    },
	    polygon: function() {
	      var i, len, point, points;
	      points = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	      this.moveTo.apply(this, points.shift());
	      for (i = 0, len = points.length; i < len; i++) {
	        point = points[i];
	        this.lineTo.apply(this, point);
	      }
	      return this.closePath();
	    },
	    path: function(path) {
	      SVGPath.apply(this, path);
	      return this;
	    },
	    _windingRule: function(rule) {
	      if (/even-?odd/.test(rule)) {
	        return '*';
	      }
	      return '';
	    },
	    fill: function(color, rule) {
	      if (/(even-?odd)|(non-?zero)/.test(color)) {
	        rule = color;
	        color = null;
	      }
	      if (color) {
	        this.fillColor(color);
	      }
	      return this.addContent('f' + this._windingRule(rule));
	    },
	    stroke: function(color) {
	      if (color) {
	        this.strokeColor(color);
	      }
	      return this.addContent('S');
	    },
	    fillAndStroke: function(fillColor, strokeColor, rule) {
	      var isFillRule;
	      if (strokeColor == null) {
	        strokeColor = fillColor;
	      }
	      isFillRule = /(even-?odd)|(non-?zero)/;
	      if (isFillRule.test(fillColor)) {
	        rule = fillColor;
	        fillColor = null;
	      }
	      if (isFillRule.test(strokeColor)) {
	        rule = strokeColor;
	        strokeColor = fillColor;
	      }
	      if (fillColor) {
	        this.fillColor(fillColor);
	        this.strokeColor(strokeColor);
	      }
	      return this.addContent('B' + this._windingRule(rule));
	    },
	    clip: function(rule) {
	      return this.addContent('W' + this._windingRule(rule) + ' n');
	    },
	    transform: function(m11, m12, m21, m22, dx, dy) {
	      var m, m0, m1, m2, m3, m4, m5, v, values;
	      m = this._ctm;
	      m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];
	      m[0] = m0 * m11 + m2 * m12;
	      m[1] = m1 * m11 + m3 * m12;
	      m[2] = m0 * m21 + m2 * m22;
	      m[3] = m1 * m21 + m3 * m22;
	      m[4] = m0 * dx + m2 * dy + m4;
	      m[5] = m1 * dx + m3 * dy + m5;
	      values = ((function() {
	        var i, len, ref, results;
	        ref = [m11, m12, m21, m22, dx, dy];
	        results = [];
	        for (i = 0, len = ref.length; i < len; i++) {
	          v = ref[i];
	          results.push(+v.toFixed(5));
	        }
	        return results;
	      })()).join(' ');
	      return this.addContent(values + " cm");
	    },
	    translate: function(x, y) {
	      return this.transform(1, 0, 0, 1, x, y);
	    },
	    rotate: function(angle, options) {
	      var cos, rad, ref, sin, x, x1, y, y1;
	      if (options == null) {
	        options = {};
	      }
	      rad = angle * Math.PI / 180;
	      cos = Math.cos(rad);
	      sin = Math.sin(rad);
	      x = y = 0;
	      if (options.origin != null) {
	        ref = options.origin, x = ref[0], y = ref[1];
	        x1 = x * cos - y * sin;
	        y1 = x * sin + y * cos;
	        x -= x1;
	        y -= y1;
	      }
	      return this.transform(cos, sin, -sin, cos, x, y);
	    },
	    scale: function(xFactor, yFactor, options) {
	      var ref, x, y;
	      if (yFactor == null) {
	        yFactor = xFactor;
	      }
	      if (options == null) {
	        options = {};
	      }
	      if (arguments.length === 2) {
	        yFactor = xFactor;
	        options = yFactor;
	      }
	      x = y = 0;
	      if (options.origin != null) {
	        ref = options.origin, x = ref[0], y = ref[1];
	        x -= xFactor * x;
	        y -= yFactor * y;
	      }
	      return this.transform(xFactor, 0, 0, yFactor, x, y);
	    }
	  };

	}).call(this);


/***/ },
/* 32 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var SVGPath;

	  SVGPath = (function() {
	    var apply, arcToSegments, cx, cy, fixRoundingError, parameters, parse, px, py, runners, segmentToBezier, solveArc, sx, sy;

	    function SVGPath() {}

	    SVGPath.apply = function(doc, path) {
	      var commands;
	      commands = parse(path);
	      return apply(commands, doc);
	    };

	    parameters = {
	      A: 7,
	      a: 7,
	      C: 6,
	      c: 6,
	      H: 1,
	      h: 1,
	      L: 2,
	      l: 2,
	      M: 2,
	      m: 2,
	      Q: 4,
	      q: 4,
	      S: 4,
	      s: 4,
	      T: 2,
	      t: 2,
	      V: 1,
	      v: 1,
	      Z: 0,
	      z: 0
	    };

	    parse = function(path) {
	      var args, c, cmd, curArg, foundDecimal, j, len, params, ret;
	      ret = [];
	      args = [];
	      curArg = "";
	      foundDecimal = false;
	      params = 0;
	      for (j = 0, len = path.length; j < len; j++) {
	        c = path[j];
	        if (parameters[c] != null) {
	          params = parameters[c];
	          if (cmd) {
	            if (curArg.length > 0) {
	              args[args.length] = +curArg;
	            }
	            ret[ret.length] = {
	              cmd: cmd,
	              args: args
	            };
	            args = [];
	            curArg = "";
	            foundDecimal = false;
	          }
	          cmd = c;
	        } else if ((c === " " || c === ",") || (c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== 'e') || (c === "." && foundDecimal)) {
	          if (curArg.length === 0) {
	            continue;
	          }
	          if (args.length === params) {
	            ret[ret.length] = {
	              cmd: cmd,
	              args: args
	            };
	            args = [+curArg];
	            if (cmd === "M") {
	              cmd = "L";
	            }
	            if (cmd === "m") {
	              cmd = "l";
	            }
	          } else {
	            args[args.length] = +curArg;
	          }
	          foundDecimal = c === ".";
	          curArg = c === '-' || c === '.' ? c : '';
	        } else {
	          curArg += c;
	          if (c === '.') {
	            foundDecimal = true;
	          }
	        }
	      }
	      if (curArg.length > 0) {
	        if (args.length === params) {
	          ret[ret.length] = {
	            cmd: cmd,
	            args: args
	          };
	          args = [+curArg];
	          if (cmd === "M") {
	            cmd = "L";
	          }
	          if (cmd === "m") {
	            cmd = "l";
	          }
	        } else {
	          args[args.length] = +curArg;
	        }
	      }
	      ret[ret.length] = {
	        cmd: cmd,
	        args: args
	      };
	      return ret;
	    };

	    cx = cy = px = py = sx = sy = 0;

	    apply = function(commands, doc) {
	      var c, i, j, len, name;
	      cx = cy = px = py = sx = sy = 0;
	      for (i = j = 0, len = commands.length; j < len; i = ++j) {
	        c = commands[i];
	        if (typeof runners[name = c.cmd] === "function") {
	          runners[name](doc, c.args);
	        }
	      }
	      return cx = cy = px = py = 0;
	    };

	    runners = {
	      M: function(doc, a) {
	        cx = a[0];
	        cy = a[1];
	        px = py = null;
	        sx = cx;
	        sy = cy;
	        return doc.moveTo(cx, cy);
	      },
	      m: function(doc, a) {
	        cx += a[0];
	        cy += a[1];
	        px = py = null;
	        sx = cx;
	        sy = cy;
	        return doc.moveTo(cx, cy);
	      },
	      C: function(doc, a) {
	        cx = a[4];
	        cy = a[5];
	        px = a[2];
	        py = a[3];
	        return doc.bezierCurveTo.apply(doc, a);
	      },
	      c: function(doc, a) {
	        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
	        px = cx + a[2];
	        py = cy + a[3];
	        cx += a[4];
	        return cy += a[5];
	      },
	      S: function(doc, a) {
	        if (px === null) {
	          px = cx;
	          py = cy;
	        }
	        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
	        px = a[0];
	        py = a[1];
	        cx = a[2];
	        return cy = a[3];
	      },
	      s: function(doc, a) {
	        if (px === null) {
	          px = cx;
	          py = cy;
	        }
	        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
	        px = cx + a[0];
	        py = cy + a[1];
	        cx += a[2];
	        return cy += a[3];
	      },
	      Q: function(doc, a) {
	        px = a[0];
	        py = a[1];
	        cx = a[2];
	        cy = a[3];
	        return doc.quadraticCurveTo(a[0], a[1], cx, cy);
	      },
	      q: function(doc, a) {
	        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
	        px = cx + a[0];
	        py = cy + a[1];
	        cx += a[2];
	        return cy += a[3];
	      },
	      T: function(doc, a) {
	        if (px === null) {
	          px = cx;
	          py = cy;
	        } else {
	          px = cx - (px - cx);
	          py = cy - (py - cy);
	        }
	        doc.quadraticCurveTo(px, py, a[0], a[1]);
	        px = cx - (px - cx);
	        py = cy - (py - cy);
	        cx = a[0];
	        return cy = a[1];
	      },
	      t: function(doc, a) {
	        if (px === null) {
	          px = cx;
	          py = cy;
	        } else {
	          px = cx - (px - cx);
	          py = cy - (py - cy);
	        }
	        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
	        cx += a[0];
	        return cy += a[1];
	      },
	      A: function(doc, a) {
	        solveArc(doc, cx, cy, a);
	        cx = a[5];
	        return cy = a[6];
	      },
	      a: function(doc, a) {
	        a[5] += cx;
	        a[6] += cy;
	        solveArc(doc, cx, cy, a);
	        cx = a[5];
	        return cy = a[6];
	      },
	      L: function(doc, a) {
	        cx = a[0];
	        cy = a[1];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      l: function(doc, a) {
	        cx += a[0];
	        cy += a[1];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      H: function(doc, a) {
	        cx = a[0];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      h: function(doc, a) {
	        cx += a[0];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      V: function(doc, a) {
	        cy = a[0];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      v: function(doc, a) {
	        cy += a[0];
	        px = py = null;
	        return doc.lineTo(cx, cy);
	      },
	      Z: function(doc) {
	        doc.closePath();
	        cx = sx;
	        return cy = sy;
	      },
	      z: function(doc) {
	        doc.closePath();
	        cx = sx;
	        return cy = sy;
	      }
	    };

	    solveArc = function(doc, x, y, coords) {
	      var bez, ex, ey, j, large, len, results, rot, rx, ry, seg, segs, sweep;
	      rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], ey = coords[6];
	      segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
	      results = [];
	      for (j = 0, len = segs.length; j < len; j++) {
	        seg = segs[j];
	        bez = segmentToBezier.apply(null, seg);
	        results.push(doc.bezierCurveTo.apply(doc, bez));
	      }
	      return results;
	    };

	    arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
	      var a00, a01, a10, a11, cos_th, d, i, j, pl, ref, result, segments, sfactor, sfactor_sq, sin_th, th, th0, th1, th2, th3, th_arc, x0, x1, xc, y0, y1, yc;
	      th = rotateX * (Math.PI / 180);
	      sin_th = Math.sin(th);
	      cos_th = Math.cos(th);
	      rx = Math.abs(rx);
	      ry = Math.abs(ry);
	      px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
	      py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
	      pl = (px * px) / (rx * rx) + (py * py) / (ry * ry);
	      if (pl > 1) {
	        pl = Math.sqrt(pl);
	        rx *= pl;
	        ry *= pl;
	      }
	      a00 = cos_th / rx;
	      a01 = sin_th / rx;
	      a10 = (-sin_th) / ry;
	      a11 = cos_th / ry;
	      x0 = a00 * ox + a01 * oy;
	      y0 = a10 * ox + a11 * oy;
	      x1 = a00 * x + a01 * y;
	      y1 = a10 * x + a11 * y;
	      d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
	      sfactor_sq = 1 / d - 0.25;
	      if (sfactor_sq < 0) {
	        sfactor_sq = 0;
	      }
	      sfactor = Math.sqrt(sfactor_sq);
	      if (sweep === large) {
	        sfactor = -sfactor;
	      }
	      xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
	      yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
	      th0 = Math.atan2(y0 - yc, x0 - xc);
	      th1 = Math.atan2(y1 - yc, x1 - xc);
	      th_arc = th1 - th0;
	      if (th_arc < 0 && sweep === 1) {
	        th_arc += 2 * Math.PI;
	      } else if (th_arc > 0 && sweep === 0) {
	        th_arc -= 2 * Math.PI;
	      }
	      segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
	      result = [];
	      for (i = j = 0, ref = segments; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        th2 = th0 + i * th_arc / segments;
	        th3 = th0 + (i + 1) * th_arc / segments;
	        result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
	      }
	      return result;
	    };

	    segmentToBezier = function(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
	      var a00, a01, a10, a11, t, th_half, x1, x2, x3, y1, y2, y3;
	      a00 = cos_th * rx;
	      a01 = -sin_th * ry;
	      a10 = sin_th * rx;
	      a11 = cos_th * ry;
	      th_half = 0.5 * (th1 - th0);
	      t = (8 / 3) * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
	      x1 = fixRoundingError(cx + Math.cos(th0) - t * Math.sin(th0));
	      y1 = fixRoundingError(cy + Math.sin(th0) + t * Math.cos(th0));
	      x3 = fixRoundingError(cx + Math.cos(th1));
	      y3 = fixRoundingError(cy + Math.sin(th1));
	      x2 = fixRoundingError(x3 + t * Math.sin(th1));
	      y2 = fixRoundingError(y3 - t * Math.cos(th1));
	      return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
	    };

	    fixRoundingError = function(x) {
	      if (Math.abs(Math.round(x) - x) < 0.0000000000001) {
	        return Math.round(x);
	      }
	      return x;
	    };

	    return SVGPath;

	  })();

	  module.exports = SVGPath;

	}).call(this);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var PDFFont;

	  PDFFont = __webpack_require__(34);

	  module.exports = {
	    initFonts: function() {
	      this._fontFamilies = {};
	      this._fontCount = 0;
	      this._fontSize = 12;
	      this._font = null;
	      this._registeredFonts = {};
	      
	    },
	    font: function(src, family, size) {
	      var cacheKey, font, id, ref;
	      if (typeof family === 'number') {
	        size = family;
	        family = null;
	      }
	      if (typeof src === 'string' && this._registeredFonts[src]) {
	        cacheKey = src;
	        ref = this._registeredFonts[src], src = ref.src, family = ref.family;
	      } else {
	        cacheKey = family || src;
	        if (typeof cacheKey !== 'string') {
	          cacheKey = null;
	        }
	      }
	      if (size != null) {
	        this.fontSize(size);
	      }
	      if (font = this._fontFamilies[cacheKey]) {
	        this._font = font;
	        return this;
	      }
	      id = 'F' + (++this._fontCount);
	      this._font = PDFFont.open(this, src, family, id);
	      if (font = this._fontFamilies[this._font.name]) {
	        this._font = font;
	        return this;
	      }
	      if (cacheKey) {
	        this._fontFamilies[cacheKey] = this._font;
	      }
	      this._fontFamilies[this._font.name] = this._font;
	      return this;
	    },
	    fontSize: function(_fontSize) {
	      this._fontSize = _fontSize;
	      return this;
	    },
	    currentLineHeight: function(includeGap) {
	      if (includeGap == null) {
	        includeGap = false;
	      }
	      return this._font.lineHeight(this._fontSize, includeGap);
	    },
	    registerFont: function(name, src, family) {
	      this._registeredFonts[name] = {
	        src: src,
	        family: family
	      };
	      return this;
	    }
	  };

	}).call(this);


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var EmbeddedFont, PDFFont, StandardFont, fontkit;

	  fontkit = __webpack_require__(35);

	  PDFFont = (function() {
	    PDFFont.open = function(document, src, family, id) {
	      var font;
	      if (typeof src === 'string') {
	        if (StandardFont.isStandardFont(src)) {
	          return new StandardFont(document, src, id);
	        }
	        font = fontkit.openSync(src, family);
	      } else if (Buffer.isBuffer(src)) {
	        font = fontkit.create(src, family);
	      } else if (src instanceof Uint8Array) {
	        font = fontkit.create(new Buffer(src), family);
	      } else if (src instanceof ArrayBuffer) {
	        font = fontkit.create(new Buffer(new Uint8Array(src)), family);
	      }
	      if (font == null) {
	        throw new Error('Not a supported font format or standard PDF font.');
	      }
	      return new EmbeddedFont(document, font, id);
	    };

	    function PDFFont() {
	      throw new Error('Cannot construct a PDFFont directly.');
	    }

	    PDFFont.prototype.encode = function(text) {
	      throw new Error('Must be implemented by subclasses');
	    };

	    PDFFont.prototype.widthOfString = function(text) {
	      throw new Error('Must be implemented by subclasses');
	    };

	    PDFFont.prototype.ref = function() {
	      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
	    };

	    PDFFont.prototype.finalize = function() {
	      if (this.embedded || (this.dictionary == null)) {
	        return;
	      }
	      this.embed();
	      return this.embedded = true;
	    };

	    PDFFont.prototype.embed = function() {
	      throw new Error('Must be implemented by subclasses');
	    };

	    PDFFont.prototype.lineHeight = function(size, includeGap) {
	      var gap;
	      if (includeGap == null) {
	        includeGap = false;
	      }
	      gap = includeGap ? this.lineGap : 0;
	      return (this.ascender + gap - this.descender) / 1000 * size;
	    };

	    return PDFFont;

	  })();

	  module.exports = PDFFont;

	  StandardFont = __webpack_require__(82);

	  EmbeddedFont = __webpack_require__(84);

	}).call(this);


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {'use strict';

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var r = _interopDefault(__webpack_require__(37));
	var _Object$getOwnPropertyDescriptor = _interopDefault(__webpack_require__(56));
	var _getIterator = _interopDefault(__webpack_require__(57));
	var _Object$freeze = _interopDefault(__webpack_require__(58));
	var _Object$keys = _interopDefault(__webpack_require__(59));
	var _typeof = _interopDefault(__webpack_require__(60));
	var _Object$defineProperty = _interopDefault(__webpack_require__(61));
	var _classCallCheck = _interopDefault(__webpack_require__(62));
	var _createClass = _interopDefault(__webpack_require__(63));
	var _Map = _interopDefault(__webpack_require__(64));
	var _Object$getPrototypeOf = _interopDefault(__webpack_require__(65));
	var _possibleConstructorReturn = _interopDefault(__webpack_require__(66));
	var _inherits = _interopDefault(__webpack_require__(67));
	var restructure_src_utils = __webpack_require__(43);
	var _Object$defineProperties = _interopDefault(__webpack_require__(68));
	var isEqual = _interopDefault(__webpack_require__(69));
	var _get = _interopDefault(__webpack_require__(70));
	var _Object$assign = _interopDefault(__webpack_require__(71));
	var _toConsumableArray = _interopDefault(__webpack_require__(72));
	var _String$fromCodePoint = _interopDefault(__webpack_require__(73));
	var _slicedToArray = _interopDefault(__webpack_require__(74));
	var _Array$from = _interopDefault(__webpack_require__(75));
	var _Set = _interopDefault(__webpack_require__(76));
	var unicode = _interopDefault(__webpack_require__(77));
	var UnicodeTrie = _interopDefault(__webpack_require__(9));
	var StateMachine = _interopDefault(__webpack_require__(78));
	var cloneDeep = _interopDefault(__webpack_require__(79));
	var inflate = _interopDefault(__webpack_require__(80));
	var brotli = _interopDefault(__webpack_require__(81));

	var fs = __webpack_require__(10);

	var fontkit = {};
	fontkit.logErrors = false;

	var formats = [];
	fontkit.registerFormat = function (format) {
	  formats.push(format);
	};

	fontkit.openSync = function (filename, postscriptName) {
	  var buffer = fs.readFileSync(filename);
	  return fontkit.create(buffer, postscriptName);
	};

	fontkit.open = function (filename, postscriptName, callback) {
	  if (typeof postscriptName === 'function') {
	    callback = postscriptName;
	    postscriptName = null;
	  }

	  fs.readFile(filename, function (err, buffer) {
	    if (err) {
	      return callback(err);
	    }

	    try {
	      var font = fontkit.create(buffer, postscriptName);
	    } catch (e) {
	      return callback(e);
	    }

	    return callback(null, font);
	  });

	  return;
	};

	fontkit.create = function (buffer, postscriptName) {
	  for (var i = 0; i < formats.length; i++) {
	    var format = formats[i];
	    if (format.probe(buffer)) {
	      var font = new format(new r.DecodeStream(buffer));
	      if (postscriptName) {
	        return font.getFont(postscriptName);
	      }

	      return font;
	    }
	  }

	  throw new Error('Unknown font format');
	};

	/**
	 * This decorator caches the results of a getter or method such that
	 * the results are lazily computed once, and then cached.
	 * @private
	 */
	function cache(target, key, descriptor) {
	  if (descriptor.get) {
	    (function () {
	      var get = descriptor.get;
	      descriptor.get = function () {
	        var value = get.call(this);
	        _Object$defineProperty(this, key, { value: value });
	        return value;
	      };
	    })();
	  } else if (typeof descriptor.value === 'function') {
	    var _ret2 = function () {
	      var fn = descriptor.value;

	      return {
	        v: {
	          get: function get() {
	            var cache = new _Map();
	            function memoized() {
	              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	              }

	              var key = args.length > 0 ? args[0] : 'value';
	              if (cache.has(key)) {
	                return cache.get(key);
	              }

	              var result = fn.apply(this, args);
	              cache.set(key, result);
	              return result;
	            };

	            _Object$defineProperty(this, key, { value: memoized });
	            return memoized;
	          }
	        }
	      };
	    }();

	    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	  }
	}

	var SubHeader = new r.Struct({
	  firstCode: r.uint16,
	  entryCount: r.uint16,
	  idDelta: r.int16,
	  idRangeOffset: r.uint16
	});

	var CmapGroup = new r.Struct({
	  startCharCode: r.uint32,
	  endCharCode: r.uint32,
	  glyphID: r.uint32
	});

	var UnicodeValueRange = new r.Struct({
	  startUnicodeValue: r.uint24,
	  additionalCount: r.uint8
	});

	var UVSMapping = new r.Struct({
	  unicodeValue: r.uint24,
	  glyphID: r.uint16
	});

	var DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);
	var NonDefaultUVS = new r.Array(UVSMapping, r.uint32);

	var VarSelectorRecord = new r.Struct({
	  varSelector: r.uint24,
	  defaultUVS: new r.Pointer(r.uint32, DefaultUVS, { type: 'parent' }),
	  nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, { type: 'parent' })
	});

	var CmapSubtable = new r.VersionedStruct(r.uint16, {
	  0: { // Byte encoding
	    length: r.uint16, // Total table length in bytes (set to 262 for format 0)
	    language: r.uint16, // Language code for this encoding subtable, or zero if language-independent
	    codeMap: new r.LazyArray(r.uint8, 256)
	  },

	  2: { // High-byte mapping (CJK)
	    length: r.uint16,
	    language: r.uint16,
	    subHeaderKeys: new r.Array(r.uint16, 256),
	    subHeaderCount: function subHeaderCount(t) {
	      return Math.max.apply(Math, t.subHeaderKeys);
	    },
	    subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),
	    glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')
	  },

	  4: { // Segment mapping to delta values
	    length: r.uint16, // Total table length in bytes
	    language: r.uint16, // Language code
	    segCountX2: r.uint16,
	    segCount: function segCount(t) {
	      return t.segCountX2 >> 1;
	    },
	    searchRange: r.uint16,
	    entrySelector: r.uint16,
	    rangeShift: r.uint16,
	    endCode: new r.LazyArray(r.uint16, 'segCount'),
	    reservedPad: new r.Reserved(r.uint16), // This value should be zero
	    startCode: new r.LazyArray(r.uint16, 'segCount'),
	    idDelta: new r.LazyArray(r.int16, 'segCount'),
	    idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),
	    glyphIndexArray: new r.LazyArray(r.uint16, function (t) {
	      return (t.length - t._currentOffset) / 2;
	    })
	  },

	  6: { // Trimmed table
	    length: r.uint16,
	    language: r.uint16,
	    firstCode: r.uint16,
	    entryCount: r.uint16,
	    glyphIndices: new r.LazyArray(r.uint16, 'entryCount')
	  },

	  8: { // mixed 16-bit and 32-bit coverage
	    reserved: new r.Reserved(r.uint16),
	    length: r.uint32,
	    language: r.uint16,
	    is32: new r.LazyArray(r.uint8, 8192),
	    nGroups: r.uint32,
	    groups: new r.LazyArray(CmapGroup, 'nGroups')
	  },

	  10: { // Trimmed Array
	    reserved: new r.Reserved(r.uint16),
	    length: r.uint32,
	    language: r.uint32,
	    firstCode: r.uint32,
	    entryCount: r.uint32,
	    glyphIndices: new r.LazyArray(r.uint16, 'numChars')
	  },

	  12: { // Segmented coverage
	    reserved: new r.Reserved(r.uint16),
	    length: r.uint32,
	    language: r.uint32,
	    nGroups: r.uint32,
	    groups: new r.LazyArray(CmapGroup, 'nGroups')
	  },

	  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)
	    reserved: new r.Reserved(r.uint16),
	    length: r.uint32,
	    language: r.uint32,
	    nGroups: r.uint32,
	    groups: new r.LazyArray(CmapGroup, 'nGroups')
	  },

	  14: { // Unicode Variation Sequences
	    length: r.uint32,
	    numRecords: r.uint32,
	    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')
	  }
	});

	var CmapEntry = new r.Struct({
	  platformID: r.uint16, // Platform identifier
	  encodingID: r.uint16, // Platform-specific encoding identifier
	  table: new r.Pointer(r.uint32, CmapSubtable, { type: 'parent', lazy: true })
	});

	// character to glyph mapping
	var cmap = new r.Struct({
	  version: r.uint16,
	  numSubtables: r.uint16,
	  tables: new r.Array(CmapEntry, 'numSubtables')
	});

	// font header
	var head = new r.Struct({
	  version: r.int32, // 0x00010000 (version 1.0)
	  revision: r.int32, // set by font manufacturer
	  checkSumAdjustment: r.uint32,
	  magicNumber: r.uint32, // set to 0x5F0F3CF5
	  flags: r.uint16,
	  unitsPerEm: r.uint16, // range from 64 to 16384
	  created: new r.Array(r.int32, 2),
	  modified: new r.Array(r.int32, 2),
	  xMin: r.int16, // for all glyph bounding boxes
	  yMin: r.int16, // for all glyph bounding boxes
	  xMax: r.int16, // for all glyph bounding boxes
	  yMax: r.int16, // for all glyph bounding boxes
	  macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),
	  lowestRecPPEM: r.uint16, // smallest readable size in pixels
	  fontDirectionHint: r.int16,
	  indexToLocFormat: r.int16, // 0 for short offsets, 1 for long
	  glyphDataFormat: r.int16 // 0 for current format
	});

	// horizontal header
	var hhea = new r.Struct({
	  version: r.int32,
	  ascent: r.int16, // Distance from baseline of highest ascender
	  descent: r.int16, // Distance from baseline of lowest descender
	  lineGap: r.int16, // Typographic line gap
	  advanceWidthMax: r.uint16, // Maximum advance width value in 'hmtx' table
	  minLeftSideBearing: r.int16, // Maximum advance width value in 'hmtx' table
	  minRightSideBearing: r.int16, // Minimum right sidebearing value
	  xMaxExtent: r.int16,
	  caretSlopeRise: r.int16, // Used to calculate the slope of the cursor (rise/run); 1 for vertical
	  caretSlopeRun: r.int16, // 0 for vertical
	  caretOffset: r.int16, // Set to 0 for non-slanted fonts
	  reserved: new r.Reserved(r.int16, 4),
	  metricDataFormat: r.int16, // 0 for current format
	  numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table
	});

	var HmtxEntry = new r.Struct({
	  advance: r.uint16,
	  bearing: r.int16
	});

	var hmtx = new r.Struct({
	  metrics: new r.LazyArray(HmtxEntry, function (t) {
	    return t.parent.hhea.numberOfMetrics;
	  }),
	  bearings: new r.LazyArray(r.int16, function (t) {
	    return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;
	  })
	});

	// maxiumum profile
	var maxp = new r.Struct({
	  version: r.int32,
	  numGlyphs: r.uint16, // The number of glyphs in the font
	  maxPoints: r.uint16, // Maximum points in a non-composite glyph
	  maxContours: r.uint16, // Maximum contours in a non-composite glyph
	  maxComponentPoints: r.uint16, // Maximum points in a composite glyph
	  maxComponentContours: r.uint16, // Maximum contours in a composite glyph
	  maxZones: r.uint16, // 1 if instructions do not use the twilight zone, 2 otherwise
	  maxTwilightPoints: r.uint16, // Maximum points used in Z0
	  maxStorage: r.uint16, // Number of Storage Area locations
	  maxFunctionDefs: r.uint16, // Number of FDEFs
	  maxInstructionDefs: r.uint16, // Number of IDEFs
	  maxStackElements: r.uint16, // Maximum stack depth
	  maxSizeOfInstructions: r.uint16, // Maximum byte count for glyph instructions
	  maxComponentElements: r.uint16, // Maximum number of components referenced at “top level” for any composite glyph
	  maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components
	});

	/**
	 * Gets an encoding name from platform, encoding, and language ids.
	 * Returned encoding names can be used in iconv-lite to decode text.
	 */
	function getEncoding(platformID, encodingID) {
	  var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {
	    return MAC_LANGUAGE_ENCODINGS[languageID];
	  }

	  return ENCODINGS[platformID][encodingID];
	}

	// Map of platform ids to encoding ids.
	var ENCODINGS = [
	// unicode
	['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],

	// macintosh
	// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
	// 0	Roman                 17	Malayalam
	// 1	Japanese	            18	Sinhalese
	// 2	Traditional Chinese	  19	Burmese
	// 3	Korean	              20	Khmer
	// 4	Arabic	              21	Thai
	// 5	Hebrew	              22	Laotian
	// 6	Greek	                23	Georgian
	// 7	Russian	              24	Armenian
	// 8	RSymbol	              25	Simplified Chinese
	// 9	Devanagari	          26	Tibetan
	// 10	Gurmukhi	            27	Mongolian
	// 11	Gujarati	            28	Geez
	// 12	Oriya	                29	Slavic
	// 13	Bengali	              30	Vietnamese
	// 14	Tamil	                31	Sindhi
	// 15	Telugu	              32	(Uninterpreted)
	// 16	Kannada
	['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],

	// ISO (deprecated)
	['ascii'],

	// windows
	// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
	['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];

	// Overrides for Mac scripts by language id.
	// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
	var MAC_LANGUAGE_ENCODINGS = {
	  15: 'maciceland',
	  17: 'macturkish',
	  18: 'maccroatian',
	  24: 'maccenteuro',
	  25: 'maccenteuro',
	  26: 'maccenteuro',
	  27: 'maccenteuro',
	  28: 'maccenteuro',
	  30: 'maciceland',
	  37: 'macromania',
	  38: 'maccenteuro',
	  39: 'maccenteuro',
	  40: 'maccenteuro',
	  143: 'macinuit', // Unsupported by iconv-lite
	  146: 'macgaelic' // Unsupported by iconv-lite
	};

	// Map of platform ids to BCP-47 language codes.
	var LANGUAGES = [
	// unicode
	[], { // macintosh
	  0: 'en', 30: 'fo', 60: 'ks', 90: 'rw',
	  1: 'fr', 31: 'fa', 61: 'ku', 91: 'rn',
	  2: 'de', 32: 'ru', 62: 'sd', 92: 'ny',
	  3: 'it', 33: 'zh', 63: 'bo', 93: 'mg',
	  4: 'nl', 34: 'nl-BE', 64: 'ne', 94: 'eo',
	  5: 'sv', 35: 'ga', 65: 'sa', 128: 'cy',
	  6: 'es', 36: 'sq', 66: 'mr', 129: 'eu',
	  7: 'da', 37: 'ro', 67: 'bn', 130: 'ca',
	  8: 'pt', 38: 'cz', 68: 'as', 131: 'la',
	  9: 'no', 39: 'sk', 69: 'gu', 132: 'qu',
	  10: 'he', 40: 'si', 70: 'pa', 133: 'gn',
	  11: 'ja', 41: 'yi', 71: 'or', 134: 'ay',
	  12: 'ar', 42: 'sr', 72: 'ml', 135: 'tt',
	  13: 'fi', 43: 'mk', 73: 'kn', 136: 'ug',
	  14: 'el', 44: 'bg', 74: 'ta', 137: 'dz',
	  15: 'is', 45: 'uk', 75: 'te', 138: 'jv',
	  16: 'mt', 46: 'be', 76: 'si', 139: 'su',
	  17: 'tr', 47: 'uz', 77: 'my', 140: 'gl',
	  18: 'hr', 48: 'kk', 78: 'km', 141: 'af',
	  19: 'zh-Hant', 49: 'az-Cyrl', 79: 'lo', 142: 'br',
	  20: 'ur', 50: 'az-Arab', 80: 'vi', 143: 'iu',
	  21: 'hi', 51: 'hy', 81: 'id', 144: 'gd',
	  22: 'th', 52: 'ka', 82: 'tl', 145: 'gv',
	  23: 'ko', 53: 'mo', 83: 'ms', 146: 'ga',
	  24: 'lt', 54: 'ky', 84: 'ms-Arab', 147: 'to',
	  25: 'pl', 55: 'tg', 85: 'am', 148: 'el-polyton',
	  26: 'hu', 56: 'tk', 86: 'ti', 149: 'kl',
	  27: 'es', 57: 'mn-CN', 87: 'om', 150: 'az',
	  28: 'lv', 58: 'mn', 88: 'so', 151: 'nn',
	  29: 'se', 59: 'ps', 89: 'sw'
	},

	// ISO (deprecated)
	[], { // windows                                        
	  0x0436: 'af', 0x4009: 'en-IN', 0x0487: 'rw', 0x0432: 'tn',
	  0x041C: 'sq', 0x1809: 'en-IE', 0x0441: 'sw', 0x045B: 'si',
	  0x0484: 'gsw', 0x2009: 'en-JM', 0x0457: 'kok', 0x041B: 'sk',
	  0x045E: 'am', 0x4409: 'en-MY', 0x0412: 'ko', 0x0424: 'sl',
	  0x1401: 'ar-DZ', 0x1409: 'en-NZ', 0x0440: 'ky', 0x2C0A: 'es-AR',
	  0x3C01: 'ar-BH', 0x3409: 'en-PH', 0x0454: 'lo', 0x400A: 'es-BO',
	  0x0C01: 'ar', 0x4809: 'en-SG', 0x0426: 'lv', 0x340A: 'es-CL',
	  0x0801: 'ar-IQ', 0x1C09: 'en-ZA', 0x0427: 'lt', 0x240A: 'es-CO',
	  0x2C01: 'ar-JO', 0x2C09: 'en-TT', 0x082E: 'dsb', 0x140A: 'es-CR',
	  0x3401: 'ar-KW', 0x0809: 'en-GB', 0x046E: 'lb', 0x1C0A: 'es-DO',
	  0x3001: 'ar-LB', 0x0409: 'en', 0x042F: 'mk', 0x300A: 'es-EC',
	  0x1001: 'ar-LY', 0x3009: 'en-ZW', 0x083E: 'ms-BN', 0x440A: 'es-SV',
	  0x1801: 'ary', 0x0425: 'et', 0x043E: 'ms', 0x100A: 'es-GT',
	  0x2001: 'ar-OM', 0x0438: 'fo', 0x044C: 'ml', 0x480A: 'es-HN',
	  0x4001: 'ar-QA', 0x0464: 'fil', 0x043A: 'mt', 0x080A: 'es-MX',
	  0x0401: 'ar-SA', 0x040B: 'fi', 0x0481: 'mi', 0x4C0A: 'es-NI',
	  0x2801: 'ar-SY', 0x080C: 'fr-BE', 0x047A: 'arn', 0x180A: 'es-PA',
	  0x1C01: 'aeb', 0x0C0C: 'fr-CA', 0x044E: 'mr', 0x3C0A: 'es-PY',
	  0x3801: 'ar-AE', 0x040C: 'fr', 0x047C: 'moh', 0x280A: 'es-PE',
	  0x2401: 'ar-YE', 0x140C: 'fr-LU', 0x0450: 'mn', 0x500A: 'es-PR',
	  0x042B: 'hy', 0x180C: 'fr-MC', 0x0850: 'mn-CN', 0x0C0A: 'es',
	  0x044D: 'as', 0x100C: 'fr-CH', 0x0461: 'ne', 0x040A: 'es',
	  0x082C: 'az-Cyrl', 0x0462: 'fy', 0x0414: 'nb', 0x540A: 'es-US',
	  0x042C: 'az', 0x0456: 'gl', 0x0814: 'nn', 0x380A: 'es-UY',
	  0x046D: 'ba', 0x0437: 'ka', 0x0482: 'oc', 0x200A: 'es-VE',
	  0x042D: 'eu', 0x0C07: 'de-AT', 0x0448: 'or', 0x081D: 'sv-FI',
	  0x0423: 'be', 0x0407: 'de', 0x0463: 'ps', 0x041D: 'sv',
	  0x0845: 'bn', 0x1407: 'de-LI', 0x0415: 'pl', 0x045A: 'syr',
	  0x0445: 'bn-IN', 0x1007: 'de-LU', 0x0416: 'pt', 0x0428: 'tg',
	  0x201A: 'bs-Cyrl', 0x0807: 'de-CH', 0x0816: 'pt-PT', 0x085F: 'tzm',
	  0x141A: 'bs', 0x0408: 'el', 0x0446: 'pa', 0x0449: 'ta',
	  0x047E: 'br', 0x046F: 'kl', 0x046B: 'qu-BO', 0x0444: 'tt',
	  0x0402: 'bg', 0x0447: 'gu', 0x086B: 'qu-EC', 0x044A: 'te',
	  0x0403: 'ca', 0x0468: 'ha', 0x0C6B: 'qu', 0x041E: 'th',
	  0x0C04: 'zh-HK', 0x040D: 'he', 0x0418: 'ro', 0x0451: 'bo',
	  0x1404: 'zh-MO', 0x0439: 'hi', 0x0417: 'rm', 0x041F: 'tr',
	  0x0804: 'zh', 0x040E: 'hu', 0x0419: 'ru', 0x0442: 'tk',
	  0x1004: 'zh-SG', 0x040F: 'is', 0x243B: 'smn', 0x0480: 'ug',
	  0x0404: 'zh-TW', 0x0470: 'ig', 0x103B: 'smj-NO', 0x0422: 'uk',
	  0x0483: 'co', 0x0421: 'id', 0x143B: 'smj', 0x042E: 'hsb',
	  0x041A: 'hr', 0x045D: 'iu', 0x0C3B: 'se-FI', 0x0420: 'ur',
	  0x101A: 'hr-BA', 0x085D: 'iu-Latn', 0x043B: 'se', 0x0843: 'uz-Cyrl',
	  0x0405: 'cs', 0x083C: 'ga', 0x083B: 'se-SE', 0x0443: 'uz',
	  0x0406: 'da', 0x0434: 'xh', 0x203B: 'sms', 0x042A: 'vi',
	  0x048C: 'prs', 0x0435: 'zu', 0x183B: 'sma-NO', 0x0452: 'cy',
	  0x0465: 'dv', 0x0410: 'it', 0x1C3B: 'sms', 0x0488: 'wo',
	  0x0813: 'nl-BE', 0x0810: 'it-CH', 0x044F: 'sa', 0x0485: 'sah',
	  0x0413: 'nl', 0x0411: 'ja', 0x1C1A: 'sr-Cyrl-BA', 0x0478: 'ii',
	  0x0C09: 'en-AU', 0x044B: 'kn', 0x0C1A: 'sr', 0x046A: 'yo',
	  0x2809: 'en-BZ', 0x043F: 'kk', 0x181A: 'sr-Latn-BA',
	  0x1009: 'en-CA', 0x0453: 'km', 0x081A: 'sr-Latn',
	  0x2409: 'en-029', 0x0486: 'quc', 0x046C: 'nso'
	}];

	var NameRecord = new r.Struct({
	  platformID: r.uint16,
	  encodingID: r.uint16,
	  languageID: r.uint16,
	  nameID: r.uint16,
	  length: r.uint16,
	  string: new r.Pointer(r.uint16, new r.String('length', function (t) {
	    return getEncoding(t.platformID, t.encodingID, t.languageID);
	  }), { type: 'parent', relativeTo: 'parent.stringOffset', allowNull: false })
	});

	var LangTagRecord = new r.Struct({
	  length: r.uint16,
	  tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), { type: 'parent', relativeTo: 'stringOffset' })
	});

	var NameTable = new r.VersionedStruct(r.uint16, {
	  0: {
	    count: r.uint16,
	    stringOffset: r.uint16,
	    records: new r.Array(NameRecord, 'count')
	  },
	  1: {
	    count: r.uint16,
	    stringOffset: r.uint16,
	    records: new r.Array(NameRecord, 'count'),
	    langTagCount: r.uint16,
	    langTags: new r.Array(LangTagRecord, 'langTagCount')
	  }
	});

	var NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.
	'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved
	'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];

	NameTable.process = function (stream) {
	  var records = {};
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = _getIterator(this.records), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var record = _step.value;

	      // find out what language this is for
	      var language = LANGUAGES[record.platformID][record.languageID];

	      if (language == null && this.langTags != null && record.languageID >= 0x8000) {
	        language = this.langTags[record.languageID - 0x8000].tag;
	      }

	      if (language == null) {
	        language = record.platformID + '-' + record.languageID;
	      }

	      // if the nameID is >= 256, it is a font feature record (AAT)
	      var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;
	      if (records[key] == null) {
	        records[key] = {};
	      }

	      var obj = records[key];
	      if (record.nameID >= 256) {
	        obj = obj[record.nameID] || (obj[record.nameID] = {});
	      }

	      obj[language] = record.string;
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  this.records = records;
	};

	NameTable.preEncode = function () {
	  if (Array.isArray(this.records)) return;
	  this.version = 0;

	  var records = [];
	  for (var key in this.records) {
	    var val = this.records[key];
	    if (key === 'fontFeatures') continue;

	    records.push({
	      platformID: 3,
	      encodingID: 1,
	      languageID: 0x409,
	      nameID: NAMES.indexOf(key),
	      length: Buffer.byteLength(val.en, 'utf16le'),
	      string: val.en
	    });

	    if (key === 'postscriptName') {
	      records.push({
	        platformID: 1,
	        encodingID: 0,
	        languageID: 0,
	        nameID: NAMES.indexOf(key),
	        length: val.en.length,
	        string: val.en
	      });
	    }
	  }

	  this.records = records;
	  this.count = records.length;
	  this.stringOffset = NameTable.size(this, null, false);
	};

	var OS2 = new r.VersionedStruct(r.uint16, {
	  header: {
	    xAvgCharWidth: r.int16, // average weighted advance width of lower case letters and space
	    usWeightClass: r.uint16, // visual weight of stroke in glyphs
	    usWidthClass: r.uint16, // relative change from the normal aspect ratio (width to height ratio)
	    fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights
	    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),
	    ySubscriptXSize: r.int16, // recommended horizontal size in pixels for subscripts
	    ySubscriptYSize: r.int16, // recommended vertical size in pixels for subscripts
	    ySubscriptXOffset: r.int16, // recommended horizontal offset for subscripts
	    ySubscriptYOffset: r.int16, // recommended vertical offset form the baseline for subscripts
	    ySuperscriptXSize: r.int16, // recommended horizontal size in pixels for superscripts
	    ySuperscriptYSize: r.int16, // recommended vertical size in pixels for superscripts
	    ySuperscriptXOffset: r.int16, // recommended horizontal offset for superscripts
	    ySuperscriptYOffset: r.int16, // recommended vertical offset from the baseline for superscripts
	    yStrikeoutSize: r.int16, // width of the strikeout stroke
	    yStrikeoutPosition: r.int16, // position of the strikeout stroke relative to the baseline
	    sFamilyClass: r.int16, // classification of font-family design
	    panose: new r.Array(r.uint8, 10), // describe the visual characteristics of a given typeface
	    ulCharRange: new r.Array(r.uint32, 4),
	    vendorID: new r.String(4), // four character identifier for the font vendor
	    fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font
	    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),
	    usFirstCharIndex: r.uint16, // The minimum Unicode index in this font
	    usLastCharIndex: r.uint16 // The maximum Unicode index in this font
	  },

	  // The Apple version of this table ends here, but the Microsoft one continues on...
	  0: {},

	  1: {
	    typoAscender: r.int16,
	    typoDescender: r.int16,
	    typoLineGap: r.int16,
	    winAscent: r.uint16,
	    winDescent: r.uint16,
	    codePageRange: new r.Array(r.uint32, 2)
	  },

	  2: {
	    // these should be common with version 1 somehow
	    typoAscender: r.int16,
	    typoDescender: r.int16,
	    typoLineGap: r.int16,
	    winAscent: r.uint16,
	    winDescent: r.uint16,
	    codePageRange: new r.Array(r.uint32, 2),

	    xHeight: r.int16,
	    capHeight: r.int16,
	    defaultChar: r.uint16,
	    breakChar: r.uint16,
	    maxContent: r.uint16
	  },

	  5: {
	    typoAscender: r.int16,
	    typoDescender: r.int16,
	    typoLineGap: r.int16,
	    winAscent: r.uint16,
	    winDescent: r.uint16,
	    codePageRange: new r.Array(r.uint32, 2),

	    xHeight: r.int16,
	    capHeight: r.int16,
	    defaultChar: r.uint16,
	    breakChar: r.uint16,
	    maxContent: r.uint16,

	    usLowerOpticalPointSize: r.uint16,
	    usUpperOpticalPointSize: r.uint16
	  }
	});

	var versions = OS2.versions;
	versions[3] = versions[4] = versions[2];

	// PostScript information
	var post = new r.VersionedStruct(r.fixed32, {
	  header: { // these fields exist at the top of all versions
	    italicAngle: r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.
	    underlinePosition: r.int16, // Suggested distance of the top of the underline from the baseline
	    underlineThickness: r.int16, // Suggested values for the underline thickness
	    isFixedPitch: r.uint32, // Whether the font is monospaced
	    minMemType42: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 42 font
	    maxMemType42: r.uint32, // Maximum memory usage when a TrueType font is downloaded as a Type 42 font
	    minMemType1: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 1 font
	    maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
	  },

	  1: {}, // version 1 has no additional fields

	  2: {
	    numberOfGlyphs: r.uint16,
	    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),
	    names: new r.Array(new r.String(r.uint8))
	  },

	  2.5: {
	    numberOfGlyphs: r.uint16,
	    offsets: new r.Array(r.uint8, 'numberOfGlyphs')
	  },

	  3: {}, // version 3 has no additional fields

	  4: {
	    map: new r.Array(r.uint32, function (t) {
	      return t.parent.maxp.numGlyphs;
	    })
	  }
	});

	// An array of predefined values accessible by instructions
	var cvt = new r.Struct({
	  controlValues: new r.Array(r.int16)
	});

	// A list of instructions that are executed once when a font is first used.
	// These instructions are known as the font program. The main use of this table
	// is for the definition of functions that are used in many different glyph programs.
	var fpgm = new r.Struct({
	  instructions: new r.Array(r.uint8)
	});

	var loca = new r.VersionedStruct('head.indexToLocFormat', {
	  0: {
	    offsets: new r.Array(r.uint16)
	  },
	  1: {
	    offsets: new r.Array(r.uint32)
	  }
	});

	loca.process = function () {
	  if (this.version === 0) {
	    for (var i = 0; i < this.offsets.length; i++) {
	      this.offsets[i] <<= 1;
	    }
	  }
	};

	loca.preEncode = function () {
	  if (this.version != null) return;

	  // assume this.offsets is a sorted array
	  this.version = this.offsets[this.offsets.length - 1] > 0xffff ? 1 : 0;

	  if (this.version === 0) {
	    for (var i = 0; i < this.offsets.length; i++) {
	      this.offsets[i] >>>= 1;
	    }
	  }
	};

	// Set of instructions executed whenever the point size or font transformation change
	var prep = new r.Struct({
	  controlValueProgram: new r.Array(r.uint8)
	});

	// only used for encoding
	var glyf = new r.Array(new r.Buffer());

	var CFFIndex = function () {
	  function CFFIndex(type) {
	    _classCallCheck(this, CFFIndex);

	    this.type = type;
	  }

	  _createClass(CFFIndex, [{
	    key: "decode",
	    value: function decode(stream, parent) {
	      var count = stream.readUInt16BE();
	      if (count === 0) {
	        return [];
	      }

	      var offSize = stream.readUInt8();
	      var offsetType = void 0;
	      if (offSize === 1) {
	        offsetType = r.uint8;
	      } else if (offSize === 2) {
	        offsetType = r.uint16;
	      } else if (offSize === 3) {
	        offsetType = r.uint24;
	      } else if (offSize === 4) {
	        offsetType = r.uint32;
	      } else {
	        throw new Error("Bad offset size in CFFIndex: " + offSize + " " + stream.pos);
	      }

	      var ret = [];
	      var startPos = stream.pos + (count + 1) * offSize - 1;

	      var start = offsetType.decode(stream);
	      for (var i = 0; i < count; i++) {
	        var end = offsetType.decode(stream);

	        if (this.type != null) {
	          var pos = stream.pos;
	          stream.pos = startPos + start;

	          parent.length = end - start;
	          ret.push(this.type.decode(stream, parent));
	          stream.pos = pos;
	        } else {
	          ret.push({
	            offset: startPos + start,
	            length: end - start
	          });
	        }

	        start = end;
	      }

	      stream.pos = startPos + start;
	      return ret;
	    }
	  }, {
	    key: "size",
	    value: function size(arr, parent) {
	      var size = 2;
	      if (arr.length === 0) {
	        return size;
	      }

	      var type = this.type || new r.Buffer();

	      // find maximum offset to detminine offset type
	      var offset = 1;
	      for (var i = 0; i < arr.length; i++) {
	        var item = arr[i];
	        offset += type.size(item, parent);
	      }

	      var offsetType = void 0;
	      if (offset <= 0xff) {
	        offsetType = r.uint8;
	      } else if (offset <= 0xffff) {
	        offsetType = r.uint16;
	      } else if (offset <= 0xffffff) {
	        offsetType = r.uint24;
	      } else if (offset <= 0xffffffff) {
	        offsetType = r.uint32;
	      } else {
	        throw new Error("Bad offset in CFFIndex");
	      }

	      size += 1 + offsetType.size() * (arr.length + 1);
	      size += offset - 1;

	      return size;
	    }
	  }, {
	    key: "encode",
	    value: function encode(stream, arr, parent) {
	      stream.writeUInt16BE(arr.length);
	      if (arr.length === 0) {
	        return;
	      }

	      var type = this.type || new r.Buffer();

	      // find maximum offset to detminine offset type
	      var sizes = [];
	      var offset = 1;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var item = _step.value;

	          var s = type.size(item, parent);
	          sizes.push(s);
	          offset += s;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      var offsetType = void 0;
	      if (offset <= 0xff) {
	        offsetType = r.uint8;
	      } else if (offset <= 0xffff) {
	        offsetType = r.uint16;
	      } else if (offset <= 0xffffff) {
	        offsetType = r.uint24;
	      } else if (offset <= 0xffffffff) {
	        offsetType = r.uint32;
	      } else {
	        throw new Error("Bad offset in CFFIndex");
	      }

	      // write offset size
	      stream.writeUInt8(offsetType.size());

	      // write elements
	      offset = 1;
	      offsetType.encode(stream, offset);

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(sizes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var size = _step2.value;

	          offset += size;
	          offsetType.encode(stream, offset);
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = _getIterator(arr), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var _item = _step3.value;

	          type.encode(stream, _item, parent);
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      return;
	    }
	  }]);

	  return CFFIndex;
	}();

	var FLOAT_EOF = 0xf;
	var FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];

	var FLOAT_ENCODE_LOOKUP = {
	  '.': 10,
	  'E': 11,
	  'E-': 12,
	  '-': 14
	};

	var CFFOperand = function () {
	  function CFFOperand() {
	    _classCallCheck(this, CFFOperand);
	  }

	  _createClass(CFFOperand, null, [{
	    key: 'decode',
	    value: function decode(stream, value) {
	      if (32 <= value && value <= 246) {
	        return value - 139;
	      }

	      if (247 <= value && value <= 250) {
	        return (value - 247) * 256 + stream.readUInt8() + 108;
	      }

	      if (251 <= value && value <= 254) {
	        return -(value - 251) * 256 - stream.readUInt8() - 108;
	      }

	      if (value === 28) {
	        return stream.readInt16BE();
	      }

	      if (value === 29) {
	        return stream.readInt32BE();
	      }

	      if (value === 30) {
	        var str = '';
	        while (true) {
	          var b = stream.readUInt8();

	          var n1 = b >> 4;
	          if (n1 === FLOAT_EOF) {
	            break;
	          }
	          str += FLOAT_LOOKUP[n1];

	          var n2 = b & 15;
	          if (n2 === FLOAT_EOF) {
	            break;
	          }
	          str += FLOAT_LOOKUP[n2];
	        }

	        return parseFloat(str);
	      }

	      return null;
	    }
	  }, {
	    key: 'size',
	    value: function size(value) {
	      // if the value needs to be forced to the largest size (32 bit)
	      // e.g. for unknown pointers, set to 32768
	      if (value.forceLarge) {
	        value = 32768;
	      }

	      if ((value | 0) !== value) {
	        // floating point
	        var str = '' + value;
	        return 1 + Math.ceil((str.length + 1) / 2);
	      } else if (-107 <= value && value <= 107) {
	        return 1;
	      } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {
	        return 2;
	      } else if (-32768 <= value && value <= 32767) {
	        return 3;
	      } else {
	        return 5;
	      }
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, value) {
	      // if the value needs to be forced to the largest size (32 bit)
	      // e.g. for unknown pointers, save the old value and set to 32768
	      var val = Number(value);

	      if (value.forceLarge) {
	        stream.writeUInt8(29);
	        return stream.writeInt32BE(val);
	      } else if ((val | 0) !== val) {
	        // floating point
	        stream.writeUInt8(30);

	        var str = '' + val;
	        for (var i = 0; i < str.length; i += 2) {
	          var c1 = str[i];
	          var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;

	          if (i === str.length - 1) {
	            var n2 = FLOAT_EOF;
	          } else {
	            var c2 = str[i + 1];
	            var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;
	          }

	          stream.writeUInt8(n1 << 4 | n2 & 15);
	        }

	        if (n2 !== FLOAT_EOF) {
	          return stream.writeUInt8(FLOAT_EOF << 4);
	        }
	      } else if (-107 <= val && val <= 107) {
	        return stream.writeUInt8(val + 139);
	      } else if (108 <= val && val <= 1131) {
	        val -= 108;
	        stream.writeUInt8((val >> 8) + 247);
	        return stream.writeUInt8(val & 0xff);
	      } else if (-1131 <= val && val <= -108) {
	        val = -val - 108;
	        stream.writeUInt8((val >> 8) + 251);
	        return stream.writeUInt8(val & 0xff);
	      } else if (-32768 <= val && val <= 32767) {
	        stream.writeUInt8(28);
	        return stream.writeInt16BE(val);
	      } else {
	        stream.writeUInt8(29);
	        return stream.writeInt32BE(val);
	      }
	    }
	  }]);

	  return CFFOperand;
	}();

	var CFFDict = function () {
	  function CFFDict() {
	    var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, CFFDict);

	    this.ops = ops;
	    this.fields = {};
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	      for (var _iterator = _getIterator(ops), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var field = _step.value;

	        var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
	        this.fields[key] = field;
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	  }

	  _createClass(CFFDict, [{
	    key: 'decodeOperands',
	    value: function decodeOperands(type, stream, ret, operands) {
	      var _this = this;

	      if (Array.isArray(type)) {
	        return operands.map(function (op, i) {
	          return _this.decodeOperands(type[i], stream, ret, [op]);
	        });
	      } else if (type.decode != null) {
	        return type.decode(stream, ret, operands);
	      } else {
	        switch (type) {
	          case 'number':
	          case 'offset':
	          case 'sid':
	            return operands[0];
	          case 'boolean':
	            return !!operands[0];
	          default:
	            return operands;
	        }
	      }
	    }
	  }, {
	    key: 'encodeOperands',
	    value: function encodeOperands(type, stream, ctx, operands) {
	      var _this2 = this;

	      if (Array.isArray(type)) {
	        return operands.map(function (op, i) {
	          return _this2.encodeOperands(type[i], stream, ctx, op)[0];
	        });
	      } else if (type.encode != null) {
	        return type.encode(stream, operands, ctx);
	      } else if (typeof operands === 'number') {
	        return [operands];
	      } else if (typeof operands === 'boolean') {
	        return [+operands];
	      } else if (Array.isArray(operands)) {
	        return operands;
	      } else {
	        return [operands];
	      }
	    }
	  }, {
	    key: 'decode',
	    value: function decode(stream, parent) {
	      var end = stream.pos + parent.length;
	      var ret = {};
	      var operands = [];

	      // define hidden properties
	      _Object$defineProperties(ret, {
	        parent: { value: parent },
	        _startOffset: { value: stream.pos }
	      });

	      // fill in defaults
	      for (var key in this.fields) {
	        var field = this.fields[key];
	        ret[field[1]] = field[3];
	      }

	      while (stream.pos < end) {
	        var b = stream.readUInt8();
	        if (b <= 21) {
	          if (b === 12) {
	            b = b << 8 | stream.readUInt8();
	          }

	          var _field = this.fields[b];
	          if (!_field) {
	            throw new Error('Unknown operator ' + b);
	          }

	          var val = this.decodeOperands(_field[2], stream, ret, operands);
	          if (val != null) {
	            if (val instanceof restructure_src_utils.PropertyDescriptor) {
	              _Object$defineProperty(ret, _field[1], val);
	            } else {
	              ret[_field[1]] = val;
	            }
	          }

	          operands = [];
	        } else {
	          operands.push(CFFOperand.decode(stream, b));
	        }
	      }

	      return ret;
	    }
	  }, {
	    key: 'size',
	    value: function size(dict, parent) {
	      var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      var ctx = {
	        parent: parent,
	        val: dict,
	        pointerSize: 0,
	        startOffset: parent.startOffset || 0
	      };

	      var len = 0;

	      for (var k in this.fields) {
	        var field = this.fields[k];
	        var val = dict[field[1]];
	        if (val == null || isEqual(val, field[3])) {
	          continue;
	        }

	        var operands = this.encodeOperands(field[2], null, ctx, val);
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	          for (var _iterator2 = _getIterator(operands), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var op = _step2.value;

	            len += CFFOperand.size(op);
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }

	        var key = Array.isArray(field[0]) ? field[0] : [field[0]];
	        len += key.length;
	      }

	      if (includePointers) {
	        len += ctx.pointerSize;
	      }

	      return len;
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, dict, parent) {
	      var ctx = {
	        pointers: [],
	        startOffset: stream.pos,
	        parent: parent,
	        val: dict,
	        pointerSize: 0
	      };

	      ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);

	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = _getIterator(this.ops), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var field = _step3.value;

	          var val = dict[field[1]];
	          if (val == null || isEqual(val, field[3])) {
	            continue;
	          }

	          var operands = this.encodeOperands(field[2], stream, ctx, val);
	          var _iteratorNormalCompletion4 = true;
	          var _didIteratorError4 = false;
	          var _iteratorError4 = undefined;

	          try {
	            for (var _iterator4 = _getIterator(operands), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	              var op = _step4.value;

	              CFFOperand.encode(stream, op);
	            }
	          } catch (err) {
	            _didIteratorError4 = true;
	            _iteratorError4 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                _iterator4.return();
	              }
	            } finally {
	              if (_didIteratorError4) {
	                throw _iteratorError4;
	              }
	            }
	          }

	          var key = Array.isArray(field[0]) ? field[0] : [field[0]];
	          var _iteratorNormalCompletion5 = true;
	          var _didIteratorError5 = false;
	          var _iteratorError5 = undefined;

	          try {
	            for (var _iterator5 = _getIterator(key), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	              var _op = _step5.value;

	              stream.writeUInt8(_op);
	            }
	          } catch (err) {
	            _didIteratorError5 = true;
	            _iteratorError5 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                _iterator5.return();
	              }
	            } finally {
	              if (_didIteratorError5) {
	                throw _iteratorError5;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      var i = 0;
	      while (i < ctx.pointers.length) {
	        var ptr = ctx.pointers[i++];
	        ptr.type.encode(stream, ptr.val, ptr.parent);
	      }

	      return;
	    }
	  }]);

	  return CFFDict;
	}();

	var CFFPointer = function (_r$Pointer) {
	  _inherits(CFFPointer, _r$Pointer);

	  function CFFPointer(type) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, CFFPointer);

	    if (options.type == null) {
	      options.type = 'global';
	    }

	    return _possibleConstructorReturn(this, (CFFPointer.__proto__ || _Object$getPrototypeOf(CFFPointer)).call(this, null, type, options));
	  }

	  _createClass(CFFPointer, [{
	    key: 'decode',
	    value: function decode(stream, parent, operands) {
	      this.offsetType = {
	        decode: function decode() {
	          return operands[0];
	        }
	      };

	      return _get(CFFPointer.prototype.__proto__ || _Object$getPrototypeOf(CFFPointer.prototype), 'decode', this).call(this, stream, parent, operands);
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, value, ctx) {
	      if (!stream) {
	        // compute the size (so ctx.pointerSize is correct)
	        this.offsetType = {
	          size: function size() {
	            return 0;
	          }
	        };

	        this.size(value, ctx);
	        return [new Ptr(0)];
	      }

	      var ptr = null;
	      this.offsetType = {
	        encode: function encode(stream, val) {
	          return ptr = val;
	        }
	      };

	      _get(CFFPointer.prototype.__proto__ || _Object$getPrototypeOf(CFFPointer.prototype), 'encode', this).call(this, stream, value, ctx);
	      return [new Ptr(ptr)];
	    }
	  }]);

	  return CFFPointer;
	}(r.Pointer);

	var Ptr = function () {
	  function Ptr(val) {
	    _classCallCheck(this, Ptr);

	    this.val = val;
	    this.forceLarge = true;
	  }

	  _createClass(Ptr, [{
	    key: 'valueOf',
	    value: function valueOf() {
	      return this.val;
	    }
	  }]);

	  return Ptr;
	}();

	var CFFPrivateDict = new CFFDict([
	// key       name                    type                                          default
	[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [19, 'Subrs', new CFFPointer(new CFFIndex(), { type: 'local' }), null]]);

	// Automatically generated from Appendix A of the CFF specification; do
	// not edit. Length should be 391.
	var standardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];

	var StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];

	var ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

	var ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];

	var ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

	var ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];

	// Checks if an operand is an index of a predefined value,
	// otherwise delegates to the provided type.

	var PredefinedOp = function () {
	  function PredefinedOp(predefinedOps, type) {
	    _classCallCheck(this, PredefinedOp);

	    this.predefinedOps = predefinedOps;
	    this.type = type;
	  }

	  _createClass(PredefinedOp, [{
	    key: 'decode',
	    value: function decode(stream, parent, operands) {
	      if (this.predefinedOps[operands[0]]) {
	        return this.predefinedOps[operands[0]];
	      }

	      return this.type.decode(stream, parent, operands);
	    }
	  }, {
	    key: 'size',
	    value: function size(value, ctx) {
	      return this.type.size(value, ctx);
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, value, ctx) {
	      var index = this.predefinedOps.indexOf(value);
	      if (index !== -1) {
	        return index;
	      }

	      return this.type.encode(stream, value, ctx);
	    }
	  }]);

	  return PredefinedOp;
	}();

	var CFFEncodingVersion = function (_r$Number) {
	  _inherits(CFFEncodingVersion, _r$Number);

	  function CFFEncodingVersion() {
	    _classCallCheck(this, CFFEncodingVersion);

	    return _possibleConstructorReturn(this, (CFFEncodingVersion.__proto__ || _Object$getPrototypeOf(CFFEncodingVersion)).call(this, 'UInt8'));
	  }

	  _createClass(CFFEncodingVersion, [{
	    key: 'decode',
	    value: function decode(stream) {
	      return r.uint8.decode(stream) & 0x7f;
	    }
	  }]);

	  return CFFEncodingVersion;
	}(r.Number);

	var Range1 = new r.Struct({
	  first: r.uint16,
	  nLeft: r.uint8
	});

	var Range2 = new r.Struct({
	  first: r.uint16,
	  nLeft: r.uint16
	});

	var CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {
	  0: {
	    nCodes: r.uint8,
	    codes: new r.Array(r.uint8, 'nCodes')
	  },

	  1: {
	    nRanges: r.uint8,
	    ranges: new r.Array(Range1, 'nRanges')
	  }

	  // TODO: supplement?
	});

	var CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, { lazy: true }));

	// Decodes an array of ranges until the total
	// length is equal to the provided length.

	var RangeArray = function (_r$Array) {
	  _inherits(RangeArray, _r$Array);

	  function RangeArray() {
	    _classCallCheck(this, RangeArray);

	    return _possibleConstructorReturn(this, (RangeArray.__proto__ || _Object$getPrototypeOf(RangeArray)).apply(this, arguments));
	  }

	  _createClass(RangeArray, [{
	    key: 'decode',
	    value: function decode(stream, parent) {
	      var length = restructure_src_utils.resolveLength(this.length, stream, parent);
	      var count = 0;
	      var res = [];
	      while (count < length) {
	        var range = this.type.decode(stream, parent);
	        range.offset = count;
	        count += range.nLeft + 1;
	        res.push(range);
	      }

	      return res;
	    }
	  }]);

	  return RangeArray;
	}(r.Array);

	var CFFCustomCharset = new r.VersionedStruct(r.uint8, {
	  0: {
	    glyphs: new r.Array(r.uint16, function (t) {
	      return t.parent.CharStrings.length - 1;
	    })
	  },

	  1: {
	    ranges: new RangeArray(Range1, function (t) {
	      return t.parent.CharStrings.length - 1;
	    })
	  },

	  2: {
	    ranges: new RangeArray(Range2, function (t) {
	      return t.parent.CharStrings.length - 1;
	    })
	  }
	});

	var CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, { lazy: true }));

	var FDRange = new r.Struct({
	  first: r.uint16,
	  fd: r.uint8
	});

	var FDSelect = new r.VersionedStruct(r.uint8, {
	  0: {
	    fds: new r.Array(r.uint8, function (t) {
	      return t.parent.CharStrings.length;
	    })
	  },

	  3: {
	    nRanges: r.uint16,
	    ranges: new r.Array(FDRange, 'nRanges'),
	    sentinel: r.uint16
	  }
	});

	var ptr = new CFFPointer(CFFPrivateDict);

	var CFFPrivateOp = function () {
	  function CFFPrivateOp() {
	    _classCallCheck(this, CFFPrivateOp);
	  }

	  _createClass(CFFPrivateOp, [{
	    key: 'decode',
	    value: function decode(stream, parent, operands) {
	      parent.length = operands[0];
	      return ptr.decode(stream, parent, [operands[1]]);
	    }
	  }, {
	    key: 'size',
	    value: function size(dict, ctx) {
	      return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, dict, ctx) {
	      return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];
	    }
	  }]);

	  return CFFPrivateOp;
	}();

	var FontDict = new CFFDict([
	// key       name                   type(s)                                 default
	[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null]]);

	var CFFTopDict = new CFFDict([
	// key       name                   type(s)                                 default
	[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],

	// CID font specific
	[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);

	var CFFHeader = new r.Struct({
	  majorVersion: r.uint8,
	  minorVersion: r.uint8,
	  hdrSize: r.uint8,
	  offSize: r.uint8
	});

	var CFFTop = new r.Struct({
	  header: CFFHeader,
	  nameIndex: new CFFIndex(new r.String('length')),
	  topDictIndex: new CFFIndex(CFFTopDict),
	  stringIndex: new CFFIndex(new r.String('length')),
	  globalSubrIndex: new CFFIndex()
	});

	var CFFFont = function () {
	  function CFFFont(stream) {
	    _classCallCheck(this, CFFFont);

	    this.stream = stream;
	    this.decode();
	  }

	  _createClass(CFFFont, [{
	    key: 'decode',
	    value: function decode() {
	      var start = this.stream.pos;
	      var top = CFFTop.decode(this.stream);
	      for (var key in top) {
	        var val = top[key];
	        this[key] = val;
	      }

	      if (this.topDictIndex.length !== 1) {
	        throw new Error("Only a single font is allowed in CFF");
	      }

	      this.isCIDFont = this.topDict.ROS != null;

	      return this;
	    }
	  }, {
	    key: 'string',
	    value: function string(sid) {
	      if (sid < standardStrings.length) {
	        return standardStrings[sid];
	      }

	      return this.stringIndex[sid - standardStrings.length];
	    }
	  }, {
	    key: 'getCharString',
	    value: function getCharString(glyph) {
	      this.stream.pos = this.topDict.CharStrings[glyph].offset;
	      return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
	    }
	  }, {
	    key: 'getGlyphName',
	    value: function getGlyphName(gid) {
	      var charset = this.topDict.charset;

	      if (Array.isArray(charset)) {
	        return charset[gid];
	      }

	      if (gid === 0) {
	        return '.notdef';
	      }

	      gid -= 1;

	      switch (charset.version) {
	        case 0:
	          return this.string(charset.glyphs[gid]);

	        case 1:
	        case 2:
	          for (var i = 0; i < charset.ranges.length; i++) {
	            var range = charset.ranges[i];
	            if (range.offset <= gid && gid <= range.offset + range.nLeft) {
	              return this.string(range.first + (gid - range.offset));
	            }
	          }
	          break;
	      }

	      return null;
	    }
	  }, {
	    key: 'fdForGlyph',
	    value: function fdForGlyph(gid) {
	      if (!this.topDict.FDSelect) {
	        return null;
	      }

	      switch (this.topDict.FDSelect.version) {
	        case 0:
	          return this.topDict.FDSelect.fds[gid];

	        case 3:
	          var ranges = this.topDict.FDSelect.ranges;

	          var low = 0;
	          var high = ranges.length - 1;

	          while (low <= high) {
	            var mid = low + high >> 1;

	            if (gid < ranges[mid].first) {
	              high = mid - 1;
	            } else if (mid < high && gid > ranges[mid + 1].first) {
	              low = mid + 1;
	            } else {
	              return ranges[mid].fd;
	            }
	          }
	        default:
	          throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);
	      }
	    }
	  }, {
	    key: 'privateDictForGlyph',
	    value: function privateDictForGlyph(gid) {
	      if (this.topDict.FDSelect) {
	        var fd = this.fdForGlyph(gid);
	        if (this.topDict.FDArray[fd]) {
	          return this.topDict.FDArray[fd].Private;
	        }

	        return null;
	      }

	      return this.topDict.Private;
	    }
	  }, {
	    key: 'topDict',
	    get: function get() {
	      return this.topDictIndex[0];
	    }
	  }, {
	    key: 'postscriptName',
	    get: function get() {
	      return this.nameIndex[0];
	    }
	  }, {
	    key: 'fullName',
	    get: function get() {
	      return this.string(this.topDict.FullName);
	    }
	  }, {
	    key: 'familyName',
	    get: function get() {
	      return this.string(this.topDict.FamilyName);
	    }
	  }], [{
	    key: 'decode',
	    value: function decode(stream) {
	      return new CFFFont(stream);
	    }
	  }]);

	  return CFFFont;
	}();

	var VerticalOrigin = new r.Struct({
	  glyphIndex: r.uint16,
	  vertOriginY: r.int16
	});

	var VORG = new r.Struct({
	  majorVersion: r.uint16,
	  minorVersion: r.uint16,
	  defaultVertOriginY: r.int16,
	  numVertOriginYMetrics: r.uint16,
	  metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')
	});

	var BigMetrics = new r.Struct({
	  height: r.uint8,
	  width: r.uint8,
	  horiBearingX: r.int8,
	  horiBearingY: r.int8,
	  horiAdvance: r.uint8,
	  vertBearingX: r.int8,
	  vertBearingY: r.int8,
	  vertAdvance: r.uint8
	});

	var SmallMetrics = new r.Struct({
	  height: r.uint8,
	  width: r.uint8,
	  bearingX: r.int8,
	  bearingY: r.int8,
	  advance: r.uint8
	});

	var EBDTComponent = new r.Struct({
	  glyph: r.uint16,
	  xOffset: r.int8,
	  yOffset: r.int8
	});

	var ByteAligned = function ByteAligned() {
	  _classCallCheck(this, ByteAligned);
	};

	var BitAligned = function BitAligned() {
	  _classCallCheck(this, BitAligned);
	};

	var glyph = new r.VersionedStruct('version', {
	  1: {
	    metrics: SmallMetrics,
	    data: ByteAligned
	  },

	  2: {
	    metrics: SmallMetrics,
	    data: BitAligned
	  },

	  // format 3 is deprecated
	  // format 4 is not supported by Microsoft

	  5: {
	    data: BitAligned
	  },

	  6: {
	    metrics: BigMetrics,
	    data: ByteAligned
	  },

	  7: {
	    metrics: BigMetrics,
	    data: BitAligned
	  },

	  8: {
	    metrics: SmallMetrics,
	    pad: new r.Reserved(r.uint8),
	    numComponents: r.uint16,
	    components: new r.Array(EBDTComponent, 'numComponents')
	  },

	  9: {
	    metrics: BigMetrics,
	    pad: new r.Reserved(r.uint8),
	    numComponents: r.uint16,
	    components: new r.Array(EBDTComponent, 'numComponents')
	  },

	  17: {
	    metrics: SmallMetrics,
	    dataLen: r.uint32,
	    data: new r.Buffer('dataLen')
	  },

	  18: {
	    metrics: BigMetrics,
	    dataLen: r.uint32,
	    data: new r.Buffer('dataLen')
	  },

	  19: {
	    dataLen: r.uint32,
	    data: new r.Buffer('dataLen')
	  }
	});

	var SBitLineMetrics = new r.Struct({
	  ascender: r.int8,
	  descender: r.int8,
	  widthMax: r.uint8,
	  caretSlopeNumerator: r.int8,
	  caretSlopeDenominator: r.int8,
	  caretOffset: r.int8,
	  minOriginSB: r.int8,
	  minAdvanceSB: r.int8,
	  maxBeforeBL: r.int8,
	  minAfterBL: r.int8,
	  pad: new r.Reserved(r.int8, 2)
	});

	var CodeOffsetPair = new r.Struct({
	  glyphCode: r.uint16,
	  offset: r.uint16
	});

	var IndexSubtable = new r.VersionedStruct(r.uint16, {
	  header: {
	    imageFormat: r.uint16,
	    imageDataOffset: r.uint32
	  },

	  1: {
	    offsetArray: new r.Array(r.uint32, function (t) {
	      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
	    })
	  },

	  2: {
	    imageSize: r.uint32,
	    bigMetrics: BigMetrics
	  },

	  3: {
	    offsetArray: new r.Array(r.uint16, function (t) {
	      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
	    })
	  },

	  4: {
	    numGlyphs: r.uint32,
	    glyphArray: new r.Array(CodeOffsetPair, function (t) {
	      return t.numGlyphs + 1;
	    })
	  },

	  5: {
	    imageSize: r.uint32,
	    bigMetrics: BigMetrics,
	    numGlyphs: r.uint32,
	    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')
	  }
	});

	var IndexSubtableArray = new r.Struct({
	  firstGlyphIndex: r.uint16,
	  lastGlyphIndex: r.uint16,
	  subtable: new r.Pointer(r.uint32, IndexSubtable)
	});

	var BitmapSizeTable = new r.Struct({
	  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),
	  indexTablesSize: r.uint32,
	  numberOfIndexSubTables: r.uint32,
	  colorRef: r.uint32,
	  hori: SBitLineMetrics,
	  vert: SBitLineMetrics,
	  startGlyphIndex: r.uint16,
	  endGlyphIndex: r.uint16,
	  ppemX: r.uint8,
	  ppemY: r.uint8,
	  bitDepth: r.uint8,
	  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])
	});

	var EBLC = new r.Struct({
	  version: r.uint32, // 0x00020000
	  numSizes: r.uint32,
	  sizes: new r.Array(BitmapSizeTable, 'numSizes')
	});

	var ImageTable = new r.Struct({
	  ppem: r.uint16,
	  resolution: r.uint16,
	  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {
	    return t.parent.parent.maxp.numGlyphs + 1;
	  })
	});

	// This is the Apple sbix table, used by the "Apple Color Emoji" font.
	// It includes several image tables with images for each bitmap glyph
	// of several different sizes.
	var sbix = new r.Struct({
	  version: r.uint16,
	  flags: new r.Bitfield(r.uint16, ['renderOutlines']),
	  numImgTables: r.uint32,
	  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')
	});

	var LayerRecord = new r.Struct({
	  gid: r.uint16, // Glyph ID of layer glyph (must be in z-order from bottom to top).
	  paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must
	}); // be less than numPaletteEntries in the CPAL table, except for
	// the special case noted below. Each palette entry is 16 bits.
	// A palette index of 0xFFFF is a special case indicating that
	// the text foreground color should be used.

	var BaseGlyphRecord = new r.Struct({
	  gid: r.uint16, // Glyph ID of reference glyph. This glyph is for reference only
	  // and is not rendered for color.
	  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.
	  // There will be numLayers consecutive entries for this base glyph.
	  numLayers: r.uint16
	});

	var COLR = new r.Struct({
	  version: r.uint16,
	  numBaseGlyphRecords: r.uint16,
	  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),
	  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),
	  numLayerRecords: r.uint16
	});

	var ColorRecord = new r.Struct({
	  blue: r.uint8,
	  green: r.uint8,
	  red: r.uint8,
	  alpha: r.uint8
	});

	var CPAL = new r.Struct({
	  version: r.uint16,
	  numPaletteEntries: r.uint16,
	  numPalettes: r.uint16,
	  numColorRecords: r.uint16,
	  colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),
	  colorRecordIndices: new r.Array(r.uint16, 'numPalettes')
	});

	//########################
	// Scripts and Languages #
	//########################

	var LangSysTable = new r.Struct({
	  reserved: new r.Reserved(r.uint16),
	  reqFeatureIndex: r.uint16,
	  featureCount: r.uint16,
	  featureIndexes: new r.Array(r.uint16, 'featureCount')
	});

	var LangSysRecord = new r.Struct({
	  tag: new r.String(4),
	  langSys: new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })
	});

	var Script = new r.Struct({
	  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),
	  count: r.uint16,
	  langSysRecords: new r.Array(LangSysRecord, 'count')
	});

	var ScriptRecord = new r.Struct({
	  tag: new r.String(4),
	  script: new r.Pointer(r.uint16, Script, { type: 'parent' })
	});

	var ScriptList = new r.Array(ScriptRecord, r.uint16);

	//#######################
	// Features and Lookups #
	//#######################

	var Feature = new r.Struct({
	  featureParams: r.uint16, // pointer
	  lookupCount: r.uint16,
	  lookupListIndexes: new r.Array(r.uint16, 'lookupCount')
	});

	var FeatureRecord = new r.Struct({
	  tag: new r.String(4),
	  feature: new r.Pointer(r.uint16, Feature, { type: 'parent' })
	});

	var FeatureList = new r.Array(FeatureRecord, r.uint16);

	var LookupFlags = new r.Bitfield(r.uint16, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet', null, 'markAttachmentType']);

	function LookupList(SubTable) {
	  var Lookup = new r.Struct({
	    lookupType: r.uint16,
	    flags: LookupFlags,
	    subTableCount: r.uint16,
	    subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),
	    markFilteringSet: r.uint16 // TODO: only present when flags says so...
	  });

	  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);
	}

	//#################
	// Coverage Table #
	//#################

	var RangeRecord = new r.Struct({
	  start: r.uint16,
	  end: r.uint16,
	  startCoverageIndex: r.uint16
	});

	var Coverage = new r.VersionedStruct(r.uint16, {
	  1: {
	    glyphCount: r.uint16,
	    glyphs: new r.Array(r.uint16, 'glyphCount')
	  },
	  2: {
	    rangeCount: r.uint16,
	    rangeRecords: new r.Array(RangeRecord, 'rangeCount')
	  }
	});

	//#########################
	// Class Definition Table #
	//#########################

	var ClassRangeRecord = new r.Struct({
	  start: r.uint16,
	  end: r.uint16,
	  class: r.uint16
	});

	var ClassDef = new r.VersionedStruct(r.uint16, {
	  1: { // Class array
	    startGlyph: r.uint16,
	    glyphCount: r.uint16,
	    classValueArray: new r.Array(r.uint16, 'glyphCount')
	  },
	  2: { // Class ranges
	    classRangeCount: r.uint16,
	    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')
	  }
	});

	//###############
	// Device Table #
	//###############

	var Device = new r.Struct({
	  startSize: r.uint16,
	  endSize: r.uint16,
	  deltaFormat: r.uint16
	});

	//#############################################
	// Contextual Substitution/Positioning Tables #
	//#############################################

	var LookupRecord = new r.Struct({
	  sequenceIndex: r.uint16,
	  lookupListIndex: r.uint16
	});

	var Rule = new r.Struct({
	  glyphCount: r.uint16,
	  lookupCount: r.uint16,
	  input: new r.Array(r.uint16, function (t) {
	    return t.glyphCount - 1;
	  }),
	  lookupRecords: new r.Array(LookupRecord, 'lookupCount')
	});

	var RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);

	var ClassRule = new r.Struct({
	  glyphCount: r.uint16,
	  lookupCount: r.uint16,
	  classes: new r.Array(r.uint16, function (t) {
	    return t.glyphCount - 1;
	  }),
	  lookupRecords: new r.Array(LookupRecord, 'lookupCount')
	});

	var ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);

	var Context = new r.VersionedStruct(r.uint16, {
	  1: { // Simple context
	    coverage: new r.Pointer(r.uint16, Coverage),
	    ruleSetCount: r.uint16,
	    ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')
	  },
	  2: { // Class-based context
	    coverage: new r.Pointer(r.uint16, Coverage),
	    classDef: new r.Pointer(r.uint16, ClassDef),
	    classSetCnt: r.uint16,
	    classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')
	  },
	  3: {
	    glyphCount: r.uint16,
	    lookupCount: r.uint16,
	    coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),
	    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
	  }
	});

	//######################################################
	// Chaining Contextual Substitution/Positioning Tables #
	//######################################################

	var ChainRule = new r.Struct({
	  backtrackGlyphCount: r.uint16,
	  backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),
	  inputGlyphCount: r.uint16,
	  input: new r.Array(r.uint16, function (t) {
	    return t.inputGlyphCount - 1;
	  }),
	  lookaheadGlyphCount: r.uint16,
	  lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),
	  lookupCount: r.uint16,
	  lookupRecords: new r.Array(LookupRecord, 'lookupCount')
	});

	var ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);

	var ChainingContext = new r.VersionedStruct(r.uint16, {
	  1: { // Simple context glyph substitution
	    coverage: new r.Pointer(r.uint16, Coverage),
	    chainCount: r.uint16,
	    chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
	  },

	  2: { // Class-based chaining context
	    coverage: new r.Pointer(r.uint16, Coverage),
	    backtrackClassDef: new r.Pointer(r.uint16, ClassDef),
	    inputClassDef: new r.Pointer(r.uint16, ClassDef),
	    lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),
	    chainCount: r.uint16,
	    chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
	  },

	  3: { // Coverage-based chaining context
	    backtrackGlyphCount: r.uint16,
	    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
	    inputGlyphCount: r.uint16,
	    inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),
	    lookaheadGlyphCount: r.uint16,
	    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
	    lookupCount: r.uint16,
	    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
	  }
	});

	var BaseCoord = new r.VersionedStruct(r.uint16, {
	  1: { // Design units only
	    coordinate: r.int16 // X or Y value, in design units
	  },

	  2: { // Design units plus contour point
	    coordinate: r.int16, // X or Y value, in design units
	    referenceGlyph: r.uint16, // GlyphID of control glyph
	    baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph
	  },

	  3: { // Design units plus Device table
	    coordinate: r.int16, // X or Y value, in design units
	    deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value
	  }
	});

	var BaseValues = new r.Struct({
	  defaultIndex: r.uint16, // Index of default baseline for this script-same index in the BaseTagList
	  baseCoordCount: r.uint16,
	  baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')
	});

	var FeatMinMaxRecord = new r.Struct({
	  tag: new r.String(4), // 4-byte feature identification tag-must match FeatureTag in FeatureList
	  minCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }), // May be NULL
	  maxCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }) // May be NULL
	});

	var MinMax = new r.Struct({
	  minCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL
	  maxCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL
	  featMinMaxCount: r.uint16, // May be 0
	  featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order
	});

	var BaseLangSysRecord = new r.Struct({
	  tag: new r.String(4), // 4-byte language system identification tag
	  minMax: new r.Pointer(r.uint16, MinMax, { type: 'parent' })
	});

	var BaseScript = new r.Struct({
	  baseValues: new r.Pointer(r.uint16, BaseValues), // May be NULL
	  defaultMinMax: new r.Pointer(r.uint16, MinMax), // May be NULL
	  baseLangSysCount: r.uint16, // May be 0
	  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag
	});

	var BaseScriptRecord = new r.Struct({
	  tag: new r.String(4), // 4-byte script identification tag
	  script: new r.Pointer(r.uint16, BaseScript, { type: 'parent' })
	});

	var BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);

	// Array of 4-byte baseline identification tags-must be in alphabetical order
	var BaseTagList = new r.Array(new r.String(4), r.uint16);

	var Axis = new r.Struct({
	  baseTagList: new r.Pointer(r.uint16, BaseTagList), // May be NULL
	  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)
	});

	var BASE = new r.Struct({
	  version: r.uint32, // Version of the BASE table-initially 0x00010000
	  horizAxis: new r.Pointer(r.uint16, Axis), // May be NULL
	  vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL
	});

	var AttachPoint = new r.Array(r.uint16, r.uint16);
	var AttachList = new r.Struct({
	  coverage: new r.Pointer(r.uint16, Coverage),
	  glyphCount: r.uint16,
	  attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')
	});

	var CaretValue = new r.VersionedStruct(r.uint16, {
	  1: { // Design units only
	    coordinate: r.int16
	  },

	  2: { // Contour point
	    caretValuePoint: r.uint16
	  },

	  3: { // Design units plus Device table
	    coordinate: r.int16,
	    deviceTable: new r.Pointer(r.uint16, Device)
	  }
	});

	var LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);

	var LigCaretList = new r.Struct({
	  coverage: new r.Pointer(r.uint16, Coverage),
	  ligGlyphCount: r.uint16,
	  ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')
	});

	var MarkGlyphSetsDef = new r.Struct({
	  markSetTableFormat: r.uint16,
	  markSetCount: r.uint16,
	  coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')
	});

	var GDEF = new r.VersionedStruct(r.uint32, {
	  0x00010000: {
	    glyphClassDef: new r.Pointer(r.uint16, ClassDef), // 1: base glyph, 2: ligature, 3: mark, 4: component
	    attachList: new r.Pointer(r.uint16, AttachList),
	    ligCaretList: new r.Pointer(r.uint16, LigCaretList),
	    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)
	  },
	  0x00010002: {
	    glyphClassDef: new r.Pointer(r.uint16, ClassDef),
	    attachList: new r.Pointer(r.uint16, AttachList),
	    ligCaretList: new r.Pointer(r.uint16, LigCaretList),
	    markAttachClassDef: new r.Pointer(r.uint16, ClassDef),
	    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)
	  }
	});

	var ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);

	var types = {
	  xPlacement: r.int16,
	  yPlacement: r.int16,
	  xAdvance: r.int16,
	  yAdvance: r.int16,
	  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
	  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
	  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
	  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' })
	};

	var ValueRecord = function () {
	  function ValueRecord() {
	    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';

	    _classCallCheck(this, ValueRecord);

	    this.key = key;
	  }

	  _createClass(ValueRecord, [{
	    key: 'buildStruct',
	    value: function buildStruct(parent) {
	      var struct = parent;
	      while (!struct[this.key] && struct.parent) {
	        struct = struct.parent;
	      }

	      if (!struct[this.key]) return;

	      var fields = {};
	      fields.rel = function () {
	        return struct._startOffset;
	      };

	      var format = struct[this.key];
	      for (var key in format) {
	        if (format[key]) {
	          fields[key] = types[key];
	        }
	      }

	      return new r.Struct(fields);
	    }
	  }, {
	    key: 'size',
	    value: function size(val, ctx) {
	      return this.buildStruct(ctx).size(val, ctx);
	    }
	  }, {
	    key: 'decode',
	    value: function decode(stream, parent) {
	      var res = this.buildStruct(parent).decode(stream, parent);
	      delete res.rel;
	      return res;
	    }
	  }]);

	  return ValueRecord;
	}();

	var PairValueRecord = new r.Struct({
	  secondGlyph: r.uint16,
	  value1: new ValueRecord('valueFormat1'),
	  value2: new ValueRecord('valueFormat2')
	});

	var PairSet = new r.Array(PairValueRecord, r.uint16);

	var Class2Record = new r.Struct({
	  value1: new ValueRecord('valueFormat1'),
	  value2: new ValueRecord('valueFormat2')
	});

	var Anchor = new r.VersionedStruct(r.uint16, {
	  1: { // Design units only
	    xCoordinate: r.int16,
	    yCoordinate: r.int16
	  },

	  2: { // Design units plus contour point
	    xCoordinate: r.int16,
	    yCoordinate: r.int16,
	    anchorPoint: r.uint16
	  },

	  3: { // Design units plus Device tables
	    xCoordinate: r.int16,
	    yCoordinate: r.int16,
	    xDeviceTable: new r.Pointer(r.uint16, Device),
	    yDeviceTable: new r.Pointer(r.uint16, Device)
	  }
	});

	var EntryExitRecord = new r.Struct({
	  entryAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' }),
	  exitAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })
	});

	var MarkRecord = new r.Struct({
	  class: r.uint16,
	  markAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })
	});

	var MarkArray = new r.Array(MarkRecord, r.uint16);

	var BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
	  return t.parent.classCount;
	});
	var BaseArray = new r.Array(BaseRecord, r.uint16);

	var ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
	  return t.parent.parent.classCount;
	});
	var LigatureAttach = new r.Array(ComponentRecord, r.uint16);
	var LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);

	var GPOSLookup = new r.VersionedStruct('lookupType', {
	  1: new r.VersionedStruct(r.uint16, { // Single Adjustment
	    1: { // Single positioning value
	      coverage: new r.Pointer(r.uint16, Coverage),
	      valueFormat: ValueFormat,
	      value: new ValueRecord()
	    },
	    2: {
	      coverage: new r.Pointer(r.uint16, Coverage),
	      valueFormat: ValueFormat,
	      valueCount: r.uint16,
	      values: new r.LazyArray(new ValueRecord(), 'valueCount')
	    }
	  }),

	  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning
	    1: { // Adjustments for glyph pairs
	      coverage: new r.Pointer(r.uint16, Coverage),
	      valueFormat1: ValueFormat,
	      valueFormat2: ValueFormat,
	      pairSetCount: r.uint16,
	      pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')
	    },

	    2: { // Class pair adjustment
	      coverage: new r.Pointer(r.uint16, Coverage),
	      valueFormat1: ValueFormat,
	      valueFormat2: ValueFormat,
	      classDef1: new r.Pointer(r.uint16, ClassDef),
	      classDef2: new r.Pointer(r.uint16, ClassDef),
	      class1Count: r.uint16,
	      class2Count: r.uint16,
	      classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')
	    }
	  }),

	  3: { // Cursive Attachment Positioning
	    format: r.uint16,
	    coverage: new r.Pointer(r.uint16, Coverage),
	    entryExitCount: r.uint16,
	    entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')
	  },

	  4: { // MarkToBase Attachment Positioning
	    format: r.uint16,
	    markCoverage: new r.Pointer(r.uint16, Coverage),
	    baseCoverage: new r.Pointer(r.uint16, Coverage),
	    classCount: r.uint16,
	    markArray: new r.Pointer(r.uint16, MarkArray),
	    baseArray: new r.Pointer(r.uint16, BaseArray)
	  },

	  5: { // MarkToLigature Attachment Positioning
	    format: r.uint16,
	    markCoverage: new r.Pointer(r.uint16, Coverage),
	    ligatureCoverage: new r.Pointer(r.uint16, Coverage),
	    classCount: r.uint16,
	    markArray: new r.Pointer(r.uint16, MarkArray),
	    ligatureArray: new r.Pointer(r.uint16, LigatureArray)
	  },

	  6: { // MarkToMark Attachment Positioning
	    format: r.uint16,
	    mark1Coverage: new r.Pointer(r.uint16, Coverage),
	    mark2Coverage: new r.Pointer(r.uint16, Coverage),
	    classCount: r.uint16,
	    mark1Array: new r.Pointer(r.uint16, MarkArray),
	    mark2Array: new r.Pointer(r.uint16, BaseArray)
	  },

	  7: Context, // Contextual positioning
	  8: ChainingContext, // Chaining contextual positioning

	  9: { // Extension Positioning
	    posFormat: r.uint16,
	    lookupType: r.uint16, // cannot also be 9
	    extension: new r.Pointer(r.uint32, GPOSLookup)
	  }
	});

	// Fix circular reference
	GPOSLookup.versions[9].extension.type = GPOSLookup;

	var GPOS = new r.Struct({
	  version: r.int32,
	  scriptList: new r.Pointer(r.uint16, ScriptList),
	  featureList: new r.Pointer(r.uint16, FeatureList),
	  lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
	});

	var Sequence = new r.Array(r.uint16, r.uint16);
	var AlternateSet = Sequence;

	var Ligature = new r.Struct({
	  glyph: r.uint16,
	  compCount: r.uint16,
	  components: new r.Array(r.uint16, function (t) {
	    return t.compCount - 1;
	  })
	});

	var LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);

	var GSUBLookup = new r.VersionedStruct('lookupType', {
	  1: new r.VersionedStruct(r.uint16, { // Single Substitution
	    1: {
	      coverage: new r.Pointer(r.uint16, Coverage),
	      deltaGlyphID: r.int16
	    },
	    2: {
	      coverage: new r.Pointer(r.uint16, Coverage),
	      glyphCount: r.uint16,
	      substitute: new r.LazyArray(r.uint16, 'glyphCount')
	    }
	  }),

	  2: { // Multiple Substitution
	    substFormat: r.uint16,
	    coverage: new r.Pointer(r.uint16, Coverage),
	    count: r.uint16,
	    sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')
	  },

	  3: { // Alternate Substitution
	    substFormat: r.uint16,
	    coverage: new r.Pointer(r.uint16, Coverage),
	    count: r.uint16,
	    alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')
	  },

	  4: { // Ligature Substitution
	    substFormat: r.uint16,
	    coverage: new r.Pointer(r.uint16, Coverage),
	    count: r.uint16,
	    ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')
	  },

	  5: Context, // Contextual Substitution
	  6: ChainingContext, // Chaining Contextual Substitution

	  7: { // Extension Substitution
	    substFormat: r.uint16,
	    lookupType: r.uint16, // cannot also be 7
	    extension: new r.Pointer(r.uint32, GSUBLookup)
	  },

	  8: { // Reverse Chaining Contextual Single Substitution
	    substFormat: r.uint16,
	    coverage: new r.Pointer(r.uint16, Coverage),
	    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
	    lookaheadGlyphCount: r.uint16,
	    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
	    glyphCount: r.uint16,
	    substitutes: new r.Array(r.uint16, 'glyphCount')
	  }
	});

	// Fix circular reference
	GSUBLookup.versions[7].extension.type = GSUBLookup;

	var GSUB = new r.Struct({
	  version: r.int32,
	  scriptList: new r.Pointer(r.uint16, ScriptList),
	  featureList: new r.Pointer(r.uint16, FeatureList),
	  lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))
	});

	var JstfGSUBModList = new r.Array(r.uint16, r.uint16);

	var JstfPriority = new r.Struct({
	  shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
	  shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
	  shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
	  shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
	  shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),
	  extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
	  extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
	  extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
	  extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
	  extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
	});

	var JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);

	var JstfLangSysRecord = new r.Struct({
	  tag: new r.String(4),
	  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)
	});

	var JstfScript = new r.Struct({
	  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length
	  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),
	  langSysCount: r.uint16,
	  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')
	});

	var JstfScriptRecord = new r.Struct({
	  tag: new r.String(4),
	  script: new r.Pointer(r.uint16, JstfScript, { type: 'parent' })
	});

	var JSTF = new r.Struct({
	  version: r.uint32, // should be 0x00010000
	  scriptCount: r.uint16,
	  scriptList: new r.Array(JstfScriptRecord, 'scriptCount')
	});

	var Signature = new r.Struct({
	  format: r.uint32,
	  length: r.uint32,
	  offset: r.uint32
	});

	var SignatureBlock = new r.Struct({
	  reserved: new r.Reserved(r.uint16, 2),
	  cbSignature: r.uint32, // Length (in bytes) of the PKCS#7 packet in pbSignature
	  signature: new r.Buffer('cbSignature')
	});

	var DSIG = new r.Struct({
	  ulVersion: r.uint32, // Version number of the DSIG table (0x00000001)
	  usNumSigs: r.uint16, // Number of signatures in the table
	  usFlag: r.uint16, // Permission flags
	  signatures: new r.Array(Signature, 'usNumSigs'),
	  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')
	});

	var GaspRange = new r.Struct({
	  rangeMaxPPEM: r.uint16, // Upper limit of range, in ppem
	  rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior
	  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType
	  ])
	});

	var gasp = new r.Struct({
	  version: r.uint16, // set to 0
	  numRanges: r.uint16,
	  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem
	});

	var DeviceRecord = new r.Struct({
	  pixelSize: r.uint8,
	  maximumWidth: r.uint8,
	  widths: new r.Array(r.uint8, function (t) {
	    return t.parent.parent.maxp.numGlyphs;
	  })
	});

	// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes
	var hdmx = new r.Struct({
	  version: r.uint16,
	  numRecords: r.int16,
	  sizeDeviceRecord: r.int32,
	  records: new r.Array(DeviceRecord, 'numRecords')
	});

	var KernPair = new r.Struct({
	  left: r.uint16,
	  right: r.uint16,
	  value: r.int16
	});

	var ClassTable = new r.Struct({
	  firstGlyph: r.uint16,
	  nGlyphs: r.uint16,
	  offsets: new r.Array(r.uint16, 'nGlyphs'),
	  max: function max(t) {
	    return t.offsets.length && Math.max.apply(Math, t.offsets);
	  }
	});

	var Kern2Array = new r.Struct({
	  off: function off(t) {
	    return t._startOffset - t.parent.parent._startOffset;
	  },
	  len: function len(t) {
	    return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);
	  },
	  values: new r.LazyArray(r.int16, 'len')
	});

	var KernSubtable = new r.VersionedStruct('format', {
	  0: {
	    nPairs: r.uint16,
	    searchRange: r.uint16,
	    entrySelector: r.uint16,
	    rangeShift: r.uint16,
	    pairs: new r.Array(KernPair, 'nPairs')
	  },

	  2: {
	    rowWidth: r.uint16,
	    leftTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),
	    rightTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),
	    array: new r.Pointer(r.uint16, Kern2Array, { type: 'parent' })
	  },

	  3: {
	    glyphCount: r.uint16,
	    kernValueCount: r.uint8,
	    leftClassCount: r.uint8,
	    rightClassCount: r.uint8,
	    flags: r.uint8,
	    kernValue: new r.Array(r.int16, 'kernValueCount'),
	    leftClass: new r.Array(r.uint8, 'glyphCount'),
	    rightClass: new r.Array(r.uint8, 'glyphCount'),
	    kernIndex: new r.Array(r.uint8, function (t) {
	      return t.leftClassCount * t.rightClassCount;
	    })
	  }
	});

	var KernTable = new r.VersionedStruct('version', {
	  0: { // Microsoft uses this format
	    subVersion: r.uint16, // Microsoft has an extra sub-table version number
	    length: r.uint16, // Length of the subtable, in bytes
	    format: r.uint8, // Format of subtable
	    coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical
	    'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.
	    'crossStream', // If set to 1, kerning is perpendicular to the flow of the text
	    'override' // If set to 1 the value in this table replaces the accumulated value
	    ]),
	    subtable: KernSubtable,
	    padding: new r.Reserved(r.uint8, function (t) {
	      return t.length - t._currentOffset;
	    })
	  },
	  1: { // Apple uses this format
	    length: r.uint32,
	    coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values
	    'crossStream', // Set if table has cross-stream kerning values
	    'vertical' // Set if table has vertical kerning values
	    ]),
	    format: r.uint8,
	    tupleIndex: r.uint16,
	    subtable: KernSubtable,
	    padding: new r.Reserved(r.uint8, function (t) {
	      return t.length - t._currentOffset;
	    })
	  }
	});

	var kern = new r.VersionedStruct(r.uint16, {
	  0: { // Microsoft Version
	    nTables: r.uint16,
	    tables: new r.Array(KernTable, 'nTables')
	  },

	  1: { // Apple Version
	    reserved: new r.Reserved(r.uint16), // the other half of the version number
	    nTables: r.uint32,
	    tables: new r.Array(KernTable, 'nTables')
	  }
	});

	// Linear Threshold table
	// Records the ppem for each glyph at which the scaling becomes linear again,
	// despite instructions effecting the advance width
	var LTSH = new r.Struct({
	  version: r.uint16,
	  numGlyphs: r.uint16,
	  yPels: new r.Array(r.uint8, 'numGlyphs')
	});

	// PCL 5 Table
	// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines
	var PCLT = new r.Struct({
	  version: r.uint16,
	  fontNumber: r.uint32,
	  pitch: r.uint16,
	  xHeight: r.uint16,
	  style: r.uint16,
	  typeFamily: r.uint16,
	  capHeight: r.uint16,
	  symbolSet: r.uint16,
	  typeface: new r.String(16),
	  characterComplement: new r.String(8),
	  fileName: new r.String(6),
	  strokeWeight: new r.String(1),
	  widthType: new r.String(1),
	  serifStyle: r.uint8,
	  reserved: new r.Reserved(r.uint8)
	});

	// VDMX tables contain ascender/descender overrides for certain (usually small)
	// sizes. This is needed in order to match font metrics on Windows.

	var Ratio = new r.Struct({
	  bCharSet: r.uint8, // Character set
	  xRatio: r.uint8, // Value to use for x-Ratio
	  yStartRatio: r.uint8, // Starting y-Ratio value
	  yEndRatio: r.uint8 // Ending y-Ratio value
	});

	var vTable = new r.Struct({
	  yPelHeight: r.uint16, // yPelHeight to which values apply
	  yMax: r.int16, // Maximum value (in pels) for this yPelHeight
	  yMin: r.int16 // Minimum value (in pels) for this yPelHeight
	});

	var VdmxGroup = new r.Struct({
	  recs: r.uint16, // Number of height records in this group
	  startsz: r.uint8, // Starting yPelHeight
	  endsz: r.uint8, // Ending yPelHeight
	  entries: new r.Array(vTable, 'recs') // The VDMX records
	});

	var VDMX = new r.Struct({
	  version: r.uint16, // Version number (0 or 1)
	  numRecs: r.uint16, // Number of VDMX groups present
	  numRatios: r.uint16, // Number of aspect ratio groupings
	  ratioRanges: new r.Array(Ratio, 'numRatios'), // Ratio ranges
	  offsets: new r.Array(r.uint16, 'numRatios'), // Offset to the VDMX group for this ratio range
	  groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings
	});

	// Vertical Header Table
	var vhea = new r.Struct({
	  version: r.uint16, // Version number of the Vertical Header Table
	  ascent: r.int16, // The vertical typographic ascender for this font
	  descent: r.int16, // The vertical typographic descender for this font
	  lineGap: r.int16, // The vertical typographic line gap for this font
	  advanceHeightMax: r.int16, // The maximum advance height measurement found in the font
	  minTopSideBearing: r.int16, // The minimum top side bearing measurement found in the font
	  minBottomSideBearing: r.int16, // The minimum bottom side bearing measurement found in the font
	  yMaxExtent: r.int16,
	  caretSlopeRise: r.int16, // Caret slope (rise/run)
	  caretSlopeRun: r.int16,
	  caretOffset: r.int16, // Set value equal to 0 for nonslanted fonts
	  reserved: new r.Reserved(r.int16, 4),
	  metricDataFormat: r.int16, // Set to 0
	  numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table
	});

	var VmtxEntry = new r.Struct({
	  advance: r.uint16, // The advance height of the glyph
	  bearing: r.int16 // The top sidebearing of the glyph
	});

	// Vertical Metrics Table
	var vmtx = new r.Struct({
	  metrics: new r.LazyArray(VmtxEntry, function (t) {
	    return t.parent.vhea.numberOfMetrics;
	  }),
	  bearings: new r.LazyArray(r.int16, function (t) {
	    return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;
	  })
	});

	var shortFrac = new r.Fixed(16, 'BE', 14);

	var Correspondence = new r.Struct({
	  fromCoord: shortFrac,
	  toCoord: shortFrac
	});

	var Segment = new r.Struct({
	  pairCount: r.uint16,
	  correspondence: new r.Array(Correspondence, 'pairCount')
	});

	var avar = new r.Struct({
	  version: r.fixed32,
	  axisCount: r.uint32,
	  segment: new r.Array(Segment, 'axisCount')
	});

	var UnboundedArrayAccessor = function () {
	  function UnboundedArrayAccessor(type, stream, parent) {
	    _classCallCheck(this, UnboundedArrayAccessor);

	    this.type = type;
	    this.stream = stream;
	    this.parent = parent;
	    this.base = this.stream.pos;
	    this._items = [];
	  }

	  _createClass(UnboundedArrayAccessor, [{
	    key: 'getItem',
	    value: function getItem(index) {
	      if (this._items[index] == null) {
	        var pos = this.stream.pos;
	        this.stream.pos = this.base + this.type.size(null, this.parent) * index;
	        this._items[index] = this.type.decode(this.stream, this.parent);
	        this.stream.pos = pos;
	      }

	      return this._items[index];
	    }
	  }, {
	    key: 'inspect',
	    value: function inspect() {
	      return '[UnboundedArray ' + this.type.constructor.name + ']';
	    }
	  }]);

	  return UnboundedArrayAccessor;
	}();

	var UnboundedArray = function (_r$Array) {
	  _inherits(UnboundedArray, _r$Array);

	  function UnboundedArray(type) {
	    _classCallCheck(this, UnboundedArray);

	    return _possibleConstructorReturn(this, (UnboundedArray.__proto__ || _Object$getPrototypeOf(UnboundedArray)).call(this, type, 0));
	  }

	  _createClass(UnboundedArray, [{
	    key: 'decode',
	    value: function decode(stream, parent) {
	      return new UnboundedArrayAccessor(this.type, stream, parent);
	    }
	  }]);

	  return UnboundedArray;
	}(r.Array);

	var LookupTable = function LookupTable() {
	  var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16;

	  // Helper class that makes internal structures invisible to pointers
	  var Shadow = function () {
	    function Shadow(type) {
	      _classCallCheck(this, Shadow);

	      this.type = type;
	    }

	    _createClass(Shadow, [{
	      key: 'decode',
	      value: function decode(stream, ctx) {
	        ctx = ctx.parent.parent;
	        return this.type.decode(stream, ctx);
	      }
	    }, {
	      key: 'size',
	      value: function size(val, ctx) {
	        ctx = ctx.parent.parent;
	        return this.type.size(val, ctx);
	      }
	    }, {
	      key: 'encode',
	      value: function encode(stream, val, ctx) {
	        ctx = ctx.parent.parent;
	        return this.type.encode(stream, val, ctx);
	      }
	    }]);

	    return Shadow;
	  }();

	  ValueType = new Shadow(ValueType);

	  var BinarySearchHeader = new r.Struct({
	    unitSize: r.uint16,
	    nUnits: r.uint16,
	    searchRange: r.uint16,
	    entrySelector: r.uint16,
	    rangeShift: r.uint16
	  });

	  var LookupSegmentSingle = new r.Struct({
	    lastGlyph: r.uint16,
	    firstGlyph: r.uint16,
	    value: ValueType
	  });

	  var LookupSegmentArray = new r.Struct({
	    lastGlyph: r.uint16,
	    firstGlyph: r.uint16,
	    values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {
	      return t.lastGlyph - t.firstGlyph + 1;
	    }), { type: 'parent' })
	  });

	  var LookupSingle = new r.Struct({
	    glyph: r.uint16,
	    value: ValueType
	  });

	  return new r.VersionedStruct(r.uint16, {
	    0: {
	      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?
	    },
	    2: {
	      binarySearchHeader: BinarySearchHeader,
	      segments: new r.Array(LookupSegmentSingle, function (t) {
	        return t.binarySearchHeader.nUnits;
	      })
	    },
	    4: {
	      binarySearchHeader: BinarySearchHeader,
	      segments: new r.Array(LookupSegmentArray, function (t) {
	        return t.binarySearchHeader.nUnits;
	      })
	    },
	    6: {
	      binarySearchHeader: BinarySearchHeader,
	      segments: new r.Array(LookupSingle, function (t) {
	        return t.binarySearchHeader.nUnits;
	      })
	    },
	    8: {
	      firstGlyph: r.uint16,
	      count: r.uint16,
	      values: new r.Array(ValueType, 'count')
	    }
	  });
	};

	function StateTable() {
	  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;

	  var entry = _Object$assign({
	    newState: r.uint16,
	    flags: r.uint16
	  }, entryData);

	  var Entry = new r.Struct(entry);
	  var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {
	    return t.nClasses;
	  }));

	  var StateHeader = new r.Struct({
	    nClasses: r.uint32,
	    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),
	    stateArray: new r.Pointer(r.uint32, StateArray),
	    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))
	  });

	  return StateHeader;
	}

	// This is the old version of the StateTable structure
	function StateTable1() {
	  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;

	  var ClassLookupTable = new r.Struct({
	    version: function version() {
	      return 8;
	    },
	    // simulate LookupTable
	    firstGlyph: r.uint16,
	    values: new r.Array(r.uint8, r.uint16)
	  });

	  var entry = _Object$assign({
	    newStateOffset: r.uint16,
	    // convert offset to stateArray index
	    newState: function newState(t) {
	      return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;
	    },
	    flags: r.uint16
	  }, entryData);

	  var Entry = new r.Struct(entry);
	  var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {
	    return t.nClasses;
	  }));

	  var StateHeader1 = new r.Struct({
	    nClasses: r.uint16,
	    classTable: new r.Pointer(r.uint16, ClassLookupTable),
	    stateArray: new r.Pointer(r.uint16, StateArray),
	    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))
	  });

	  return StateHeader1;
	}

	var BslnSubtable = new r.VersionedStruct('format', {
	  0: { // Distance-based, no mapping
	    deltas: new r.Array(r.int16, 32)
	  },

	  1: { // Distance-based, with mapping
	    deltas: new r.Array(r.int16, 32),
	    mappingData: new LookupTable(r.uint16)
	  },

	  2: { // Control point-based, no mapping
	    standardGlyph: r.uint16,
	    controlPoints: new r.Array(r.uint16, 32)
	  },

	  3: { // Control point-based, with mapping
	    standardGlyph: r.uint16,
	    controlPoints: new r.Array(r.uint16, 32),
	    mappingData: new LookupTable(r.uint16)
	  }
	});

	var bsln = new r.Struct({
	  version: r.fixed32,
	  format: r.uint16,
	  defaultBaseline: r.uint16,
	  subtable: BslnSubtable
	});

	var Setting = new r.Struct({
	  setting: r.uint16,
	  nameIndex: r.int16,
	  name: function name(t) {
	    return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];
	  }
	});

	var FeatureName = new r.Struct({
	  feature: r.uint16,
	  nSettings: r.uint16,
	  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),
	  featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),
	  defaultSetting: r.uint8,
	  nameIndex: r.int16,
	  name: function name(t) {
	    return t.parent.parent.name.records.fontFeatures[t.nameIndex];
	  }
	});

	var feat = new r.Struct({
	  version: r.fixed32,
	  featureNameCount: r.uint16,
	  reserved1: new r.Reserved(r.uint16),
	  reserved2: new r.Reserved(r.uint32),
	  featureNames: new r.Array(FeatureName, 'featureNameCount')
	});

	var Axis$1 = new r.Struct({
	  axisTag: new r.String(4),
	  minValue: r.fixed32,
	  defaultValue: r.fixed32,
	  maxValue: r.fixed32,
	  flags: r.uint16,
	  nameID: r.uint16,
	  name: function name(t) {
	    return t.parent.parent.name.records.fontFeatures[t.nameID];
	  }
	});

	var Instance = new r.Struct({
	  nameID: r.uint16,
	  name: function name(t) {
	    return t.parent.parent.name.records.fontFeatures[t.nameID];
	  },
	  flags: r.uint16,
	  coord: new r.Array(r.fixed32, function (t) {
	    return t.parent.axisCount;
	  })
	});

	var fvar = new r.Struct({
	  version: r.fixed32,
	  offsetToData: r.uint16,
	  countSizePairs: r.uint16,
	  axisCount: r.uint16,
	  axisSize: r.uint16,
	  instanceCount: r.uint16,
	  instanceSize: r.uint16,
	  axis: new r.Array(Axis$1, 'axisCount'),
	  instance: new r.Array(Instance, 'instanceCount')
	});

	var shortFrac$1 = new r.Fixed(16, 'BE', 14);

	var Offset = function () {
	  function Offset() {
	    _classCallCheck(this, Offset);
	  }

	  _createClass(Offset, null, [{
	    key: 'decode',
	    value: function decode(stream, parent) {
	      // In short format, offsets are multiplied by 2.
	      // This doesn't seem to be documented by Apple, but it
	      // is implemented this way in Freetype.
	      return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
	    }
	  }]);

	  return Offset;
	}();

	var gvar = new r.Struct({
	  version: r.uint16,
	  reserved: new r.Reserved(r.uint16),
	  axisCount: r.uint16,
	  globalCoordCount: r.uint16,
	  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),
	  glyphCount: r.uint16,
	  flags: r.uint16,
	  offsetToData: r.uint32,
	  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: 'offsetToData', allowNull: false }), function (t) {
	    return t.glyphCount + 1;
	  })
	});

	var ClassTable$1 = new r.Struct({
	  length: r.uint16,
	  coverage: r.uint16,
	  subFeatureFlags: r.uint32,
	  stateTable: new StateTable1()
	});

	var WidthDeltaRecord = new r.Struct({
	  justClass: r.uint32,
	  beforeGrowLimit: r.fixed32,
	  beforeShrinkLimit: r.fixed32,
	  afterGrowLimit: r.fixed32,
	  afterShrinkLimit: r.fixed32,
	  growFlags: r.uint16,
	  shrinkFlags: r.uint16
	});

	var WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);

	var ActionData = new r.VersionedStruct('actionType', {
	  0: { // Decomposition action
	    lowerLimit: r.fixed32,
	    upperLimit: r.fixed32,
	    order: r.uint16,
	    glyphs: new r.Array(r.uint16, r.uint16)
	  },

	  1: { // Unconditional add glyph action
	    addGlyph: r.uint16
	  },

	  2: { // Conditional add glyph action
	    substThreshold: r.fixed32,
	    addGlyph: r.uint16,
	    substGlyph: r.uint16
	  },

	  3: {}, // Stretch glyph action (no data, not supported by CoreText)

	  4: { // Ductile glyph action (not supported by CoreText)
	    variationAxis: r.uint32,
	    minimumLimit: r.fixed32,
	    noStretchValue: r.fixed32,
	    maximumLimit: r.fixed32
	  },

	  5: { // Repeated add glyph action
	    flags: r.uint16,
	    glyph: r.uint16
	  }
	});

	var Action = new r.Struct({
	  actionClass: r.uint16,
	  actionType: r.uint16,
	  actionLength: r.uint32,
	  actionData: ActionData,
	  padding: new r.Reserved(r.uint8, function (t) {
	    return t.actionLength - t._currentOffset;
	  })
	});

	var PostcompensationAction = new r.Array(Action, r.uint32);
	var PostCompensationTable = new r.Struct({
	  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))
	});

	var JustificationTable = new r.Struct({
	  classTable: new r.Pointer(r.uint16, ClassTable$1, { type: 'parent' }),
	  wdcOffset: r.uint16,
	  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),
	  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: 'wdcOffset' }))
	});

	var just = new r.Struct({
	  version: r.uint32,
	  format: r.uint16,
	  horizontal: new r.Pointer(r.uint16, JustificationTable),
	  vertical: new r.Pointer(r.uint16, JustificationTable)
	});

	var LigatureData = {
	  action: r.uint16
	};

	var ContextualData = {
	  markIndex: r.uint16,
	  currentIndex: r.uint16
	};

	var InsertionData = {
	  currentInsertIndex: r.uint16,
	  markedInsertIndex: r.uint16
	};

	var SubstitutionTable = new r.Struct({
	  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))
	});

	var SubtableData = new r.VersionedStruct('type', {
	  0: { // Indic Rearrangement Subtable
	    stateTable: new StateTable()
	  },

	  1: { // Contextual Glyph Substitution Subtable
	    stateTable: new StateTable(ContextualData),
	    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)
	  },

	  2: { // Ligature subtable
	    stateTable: new StateTable(LigatureData),
	    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),
	    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),
	    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
	  },

	  4: { // Non-contextual Glyph Substitution Subtable
	    lookupTable: new LookupTable()
	  },

	  5: { // Glyph Insertion Subtable
	    stateTable: new StateTable(InsertionData),
	    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
	  }
	});

	var Subtable = new r.Struct({
	  length: r.uint32,
	  coverage: r.uint24,
	  type: r.uint8,
	  subFeatureFlags: r.uint32,
	  table: SubtableData,
	  padding: new r.Reserved(r.uint8, function (t) {
	    return t.length - t._currentOffset;
	  })
	});

	var FeatureEntry = new r.Struct({
	  featureType: r.uint16,
	  featureSetting: r.uint16,
	  enableFlags: r.uint32,
	  disableFlags: r.uint32
	});

	var MorxChain = new r.Struct({
	  defaultFlags: r.uint32,
	  chainLength: r.uint32,
	  nFeatureEntries: r.uint32,
	  nSubtables: r.uint32,
	  features: new r.Array(FeatureEntry, 'nFeatureEntries'),
	  subtables: new r.Array(Subtable, 'nSubtables')
	});

	var morx = new r.Struct({
	  version: r.uint16,
	  unused: new r.Reserved(r.uint16),
	  nChains: r.uint32,
	  chains: new r.Array(MorxChain, 'nChains')
	});

	var OpticalBounds = new r.Struct({
	  left: r.int16,
	  top: r.int16,
	  right: r.int16,
	  bottom: r.int16
	});

	var opbd = new r.Struct({
	  version: r.fixed32,
	  format: r.uint16,
	  lookupTable: new LookupTable(OpticalBounds)
	});

	var tables = {};
	// Required Tables
	tables.cmap = cmap;
	tables.head = head;
	tables.hhea = hhea;
	tables.hmtx = hmtx;
	tables.maxp = maxp;
	tables.name = NameTable;
	tables['OS/2'] = OS2;
	tables.post = post;

	// TrueType Outlines
	tables.fpgm = fpgm;
	tables.loca = loca;
	tables.prep = prep;
	tables['cvt '] = cvt;
	tables.glyf = glyf;

	// PostScript Outlines
	tables['CFF '] = CFFFont;
	tables.VORG = VORG;

	// Bitmap Glyphs
	tables.EBLC = EBLC;
	tables.CBLC = tables.EBLC;
	tables.sbix = sbix;
	tables.COLR = COLR;
	tables.CPAL = CPAL;

	// Advanced OpenType Tables
	tables.BASE = BASE;
	tables.GDEF = GDEF;
	tables.GPOS = GPOS;
	tables.GSUB = GSUB;
	tables.JSTF = JSTF;

	// Other OpenType Tables
	tables.DSIG = DSIG;
	tables.gasp = gasp;
	tables.hdmx = hdmx;
	tables.kern = kern;
	tables.LTSH = LTSH;
	tables.PCLT = PCLT;
	tables.VDMX = VDMX;
	tables.vhea = vhea;
	tables.vmtx = vmtx;

	// Apple Advanced Typography Tables
	tables.avar = avar;
	tables.bsln = bsln;
	tables.feat = feat;
	tables.fvar = fvar;
	tables.gvar = gvar;
	tables.just = just;
	tables.morx = morx;
	tables.opbd = opbd;

	var TableEntry = new r.Struct({
	  tag: new r.String(4),
	  checkSum: r.uint32,
	  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),
	  length: r.uint32
	});

	var Directory = new r.Struct({
	  tag: new r.String(4),
	  numTables: r.uint16,
	  searchRange: r.uint16,
	  entrySelector: r.uint16,
	  rangeShift: r.uint16,
	  tables: new r.Array(TableEntry, 'numTables')
	});

	Directory.process = function () {
	  var tables = {};
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = _getIterator(this.tables), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var table = _step.value;

	      tables[table.tag] = table;
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  this.tables = tables;
	};

	Directory.preEncode = function (stream) {
	  var tables$$ = [];
	  for (var tag in this.tables) {
	    var table = this.tables[tag];
	    if (table) {
	      tables$$.push({
	        tag: tag,
	        checkSum: 0,
	        offset: new r.VoidPointer(tables[tag], table),
	        length: tables[tag].size(table)
	      });
	    }
	  }

	  this.tag = 'true';
	  this.numTables = tables$$.length;
	  this.tables = tables$$;

	  this.searchRange = Math.floor(Math.log(this.numTables) / Math.LN2) * 16;
	  this.entrySelector = Math.floor(this.searchRange / Math.LN2);
	  this.rangeShift = this.numTables * 16 - this.searchRange;
	};

	function binarySearch(arr, cmp) {
	  var min = 0;
	  var max = arr.length - 1;
	  while (min <= max) {
	    var mid = min + max >> 1;
	    var res = cmp(arr[mid]);

	    if (res < 0) {
	      max = mid - 1;
	    } else if (res > 0) {
	      min = mid + 1;
	    } else {
	      return mid;
	    }
	  }

	  return -1;
	}

	function range(index, end) {
	  var range = [];
	  while (index < end) {
	    range.push(index++);
	  }
	  return range;
	}

	var _class$1;
	function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	// iconv-lite is an optional dependency.
	try {
	  var iconv = __webpack_require__(40);
	} catch (err) {}

	var CmapProcessor = (_class$1 = function () {
	  function CmapProcessor(cmapTable) {
	    _classCallCheck(this, CmapProcessor);

	    // Attempt to find a Unicode cmap first
	    this.encoding = null;
	    this.cmap = this.findSubtable(cmapTable, [
	    // 32-bit subtables
	    [3, 10], [0, 6], [0, 4],

	    // 16-bit subtables
	    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0], [3, 0]]);

	    // If not unicode cmap was found, and iconv-lite is installed,
	    // take the first table with a supported encoding.
	    if (!this.cmap && iconv) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(cmapTable.tables), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var cmap = _step.value;

	          var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
	          if (iconv.encodingExists(encoding)) {
	            this.cmap = cmap.table;
	            this.encoding = encoding;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }

	    if (!this.cmap) {
	      throw new Error("Could not find a supported cmap table");
	    }

	    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);
	    if (this.uvs && this.uvs.version !== 14) {
	      this.uvs = null;
	    }
	  }

	  _createClass(CmapProcessor, [{
	    key: 'findSubtable',
	    value: function findSubtable(cmapTable, pairs) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(pairs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var _step2$value = _slicedToArray(_step2.value, 2),
	              platformID = _step2$value[0],
	              encodingID = _step2$value[1];

	          var _iteratorNormalCompletion3 = true;
	          var _didIteratorError3 = false;
	          var _iteratorError3 = undefined;

	          try {
	            for (var _iterator3 = _getIterator(cmapTable.tables), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	              var cmap = _step3.value;

	              if (cmap.platformID === platformID && cmap.encodingID === encodingID) {
	                return cmap.table;
	              }
	            }
	          } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                _iterator3.return();
	              }
	            } finally {
	              if (_didIteratorError3) {
	                throw _iteratorError3;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return null;
	    }
	  }, {
	    key: 'lookup',
	    value: function lookup(codepoint, variationSelector) {
	      // If there is no Unicode cmap in this font, we need to re-encode
	      // the codepoint in the encoding that the cmap supports.
	      if (this.encoding) {
	        var buf = iconv.encode(_String$fromCodePoint(codepoint), this.encoding);
	        codepoint = 0;
	        for (var i = 0; i < buf.length; i++) {
	          codepoint = codepoint << 8 | buf[i];
	        }

	        // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.
	      } else if (variationSelector) {
	        var gid = this.getVariationSelector(codepoint, variationSelector);
	        if (gid) {
	          return gid;
	        }
	      }

	      var cmap = this.cmap;
	      switch (cmap.version) {
	        case 0:
	          return cmap.codeMap.get(codepoint) || 0;

	        case 4:
	          {
	            var min = 0;
	            var max = cmap.segCount - 1;
	            while (min <= max) {
	              var mid = min + max >> 1;

	              if (codepoint < cmap.startCode.get(mid)) {
	                max = mid - 1;
	              } else if (codepoint > cmap.endCode.get(mid)) {
	                min = mid + 1;
	              } else {
	                var rangeOffset = cmap.idRangeOffset.get(mid);
	                var _gid = void 0;

	                if (rangeOffset === 0) {
	                  _gid = codepoint + cmap.idDelta.get(mid);
	                } else {
	                  var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
	                  _gid = cmap.glyphIndexArray.get(index) || 0;
	                  if (_gid !== 0) {
	                    _gid += cmap.idDelta.get(mid);
	                  }
	                }

	                return _gid & 0xffff;
	              }
	            }

	            return 0;
	          }

	        case 8:
	          throw new Error('TODO: cmap format 8');

	        case 6:
	        case 10:
	          return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;

	        case 12:
	        case 13:
	          {
	            var _min = 0;
	            var _max = cmap.nGroups - 1;
	            while (_min <= _max) {
	              var _mid = _min + _max >> 1;
	              var group = cmap.groups.get(_mid);

	              if (codepoint < group.startCharCode) {
	                _max = _mid - 1;
	              } else if (codepoint > group.endCharCode) {
	                _min = _mid + 1;
	              } else {
	                if (cmap.version === 12) {
	                  return group.glyphID + (codepoint - group.startCharCode);
	                } else {
	                  return group.glyphID;
	                }
	              }
	            }

	            return 0;
	          }

	        case 14:
	          throw new Error('TODO: cmap format 14');

	        default:
	          throw new Error('Unknown cmap format ' + cmap.version);
	      }
	    }
	  }, {
	    key: 'getVariationSelector',
	    value: function getVariationSelector(codepoint, variationSelector) {
	      if (!this.uvs) {
	        return 0;
	      }

	      var selectors = this.uvs.varSelectors.toArray();
	      var i = binarySearch(selectors, function (x) {
	        return variationSelector - x.varSelector;
	      });
	      var sel = selectors[i];

	      if (i !== -1 && sel.defaultUVS) {
	        i = binarySearch(sel.defaultUVS, function (x) {
	          return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;
	        });
	      }

	      if (i !== -1 && sel.nonDefaultUVS) {
	        i = binarySearch(sel.nonDefaultUVS, function (x) {
	          return codepoint - x.unicodeValue;
	        });
	        if (i !== -1) {
	          return sel.nonDefaultUVS[i].glyphID;
	        }
	      }

	      return 0;
	    }
	  }, {
	    key: 'getCharacterSet',
	    value: function getCharacterSet() {
	      var cmap = this.cmap;
	      switch (cmap.version) {
	        case 0:
	          return range(0, cmap.codeMap.length);

	        case 4:
	          {
	            var res = [];
	            var endCodes = cmap.endCode.toArray();
	            for (var i = 0; i < endCodes.length; i++) {
	              var tail = endCodes[i] + 1;
	              var start = cmap.startCode.get(i);
	              res.push.apply(res, _toConsumableArray(range(start, tail)));
	            }

	            return res;
	          }

	        case 8:
	          throw new Error('TODO: cmap format 8');

	        case 6:
	        case 10:
	          return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);

	        case 12:
	        case 13:
	          {
	            var _res = [];
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	              for (var _iterator4 = _getIterator(cmap.groups.toArray()), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                var group = _step4.value;

	                _res.push.apply(_res, _toConsumableArray(range(group.startCharCode, group.endCharCode + 1)));
	              }
	            } catch (err) {
	              _didIteratorError4 = true;
	              _iteratorError4 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                  _iterator4.return();
	                }
	              } finally {
	                if (_didIteratorError4) {
	                  throw _iteratorError4;
	                }
	              }
	            }

	            return _res;
	          }

	        case 14:
	          throw new Error('TODO: cmap format 14');

	        default:
	          throw new Error('Unknown cmap format ' + cmap.version);
	      }
	    }
	  }, {
	    key: 'codePointsForGlyph',
	    value: function codePointsForGlyph(gid) {
	      var cmap = this.cmap;
	      switch (cmap.version) {
	        case 0:
	          {
	            var res = [];
	            for (var i = 0; i < 256; i++) {
	              if (cmap.codeMap.get(i) === gid) {
	                res.push(i);
	              }
	            }

	            return res;
	          }

	        case 4:
	          {
	            var _res2 = [];
	            for (var _i = 0; _i < cmap.segCount; _i++) {
	              var end = cmap.endCode.get(_i);
	              var start = cmap.startCode.get(_i);
	              var rangeOffset = cmap.idRangeOffset.get(_i);
	              var delta = cmap.idDelta.get(_i);

	              for (var c = start; c <= end; c++) {
	                var g = 0;
	                if (rangeOffset === 0) {
	                  g = c + delta;
	                } else {
	                  var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i);
	                  g = cmap.glyphIndexArray.get(index) || 0;
	                  if (g !== 0) {
	                    g += delta;
	                  }
	                }

	                if (g === gid) {
	                  _res2.push(c);
	                }
	              }
	            }

	            return _res2;
	          }

	        case 12:
	          {
	            var _res3 = [];
	            var _iteratorNormalCompletion5 = true;
	            var _didIteratorError5 = false;
	            var _iteratorError5 = undefined;

	            try {
	              for (var _iterator5 = _getIterator(cmap.groups.toArray()), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                var group = _step5.value;

	                if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {
	                  _res3.push(group.startCharCode + (gid - group.glyphID));
	                }
	              }
	            } catch (err) {
	              _didIteratorError5 = true;
	              _iteratorError5 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                  _iterator5.return();
	                }
	              } finally {
	                if (_didIteratorError5) {
	                  throw _iteratorError5;
	                }
	              }
	            }

	            return _res3;
	          }

	        case 13:
	          {
	            var _res4 = [];
	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	              for (var _iterator6 = _getIterator(cmap.groups.toArray()), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                var _group = _step6.value;

	                if (gid === _group.glyphID) {
	                  _res4.push.apply(_res4, _toConsumableArray(range(_group.startCharCode, _group.endCharCode + 1)));
	                }
	              }
	            } catch (err) {
	              _didIteratorError6 = true;
	              _iteratorError6 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                  _iterator6.return();
	                }
	              } finally {
	                if (_didIteratorError6) {
	                  throw _iteratorError6;
	                }
	              }
	            }

	            return _res4;
	          }

	        default:
	          throw new Error('Unknown cmap format ' + cmap.version);
	      }
	    }
	  }]);

	  return CmapProcessor;
	}(), (_applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype)), _class$1);

	var KernProcessor = function () {
	  function KernProcessor(font) {
	    _classCallCheck(this, KernProcessor);

	    this.kern = font.kern;
	  }

	  _createClass(KernProcessor, [{
	    key: "process",
	    value: function process(glyphs, positions) {
	      for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
	        var left = glyphs[glyphIndex].id;
	        var right = glyphs[glyphIndex + 1].id;
	        positions[glyphIndex].xAdvance += this.getKerning(left, right);
	      }
	    }
	  }, {
	    key: "getKerning",
	    value: function getKerning(left, right) {
	      var res = 0;

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.kern.tables), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var table = _step.value;

	          if (table.coverage.crossStream) {
	            continue;
	          }

	          switch (table.version) {
	            case 0:
	              if (!table.coverage.horizontal) {
	                continue;
	              }

	              break;
	            case 1:
	              if (table.coverage.vertical || table.coverage.variation) {
	                continue;
	              }

	              break;
	            default:
	              throw new Error("Unsupported kerning table version " + table.version);
	          }

	          var val = 0;
	          var s = table.subtable;
	          switch (table.format) {
	            case 0:
	              // TODO: binary search
	              var _iteratorNormalCompletion2 = true;
	              var _didIteratorError2 = false;
	              var _iteratorError2 = undefined;

	              try {
	                for (var _iterator2 = _getIterator(s.pairs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                  var pair = _step2.value;

	                  if (pair.left === left && pair.right === right) {
	                    val = pair.value;
	                    break;
	                  }
	                }
	              } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	              } finally {
	                try {
	                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                  }
	                } finally {
	                  if (_didIteratorError2) {
	                    throw _iteratorError2;
	                  }
	                }
	              }

	              break;

	            case 2:
	              var leftOffset = 0,
	                  rightOffset = 0;
	              if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {
	                leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
	              } else {
	                leftOffset = s.array.off;
	              }

	              if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {
	                rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
	              }

	              var index = (leftOffset + rightOffset - s.array.off) / 2;
	              val = s.array.values.get(index);
	              break;

	            case 3:
	              if (left >= s.glyphCount || right >= s.glyphCount) {
	                return 0;
	              }

	              val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
	              break;

	            default:
	              throw new Error("Unsupported kerning sub-table format " + table.format);
	          }

	          // Microsoft supports the override flag, which resets the result
	          // Otherwise, the sum of the results from all subtables is returned
	          if (table.coverage.override) {
	            res = val;
	          } else {
	            res += val;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return res;
	    }
	  }]);

	  return KernProcessor;
	}();

	/**
	 * This class is used when GPOS does not define 'mark' or 'mkmk' features
	 * for positioning marks relative to base glyphs. It uses the unicode
	 * combining class property to position marks.
	 *
	 * Based on code from Harfbuzz, thanks!
	 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc
	 */

	var UnicodeLayoutEngine = function () {
	  function UnicodeLayoutEngine(font) {
	    _classCallCheck(this, UnicodeLayoutEngine);

	    this.font = font;
	  }

	  _createClass(UnicodeLayoutEngine, [{
	    key: 'positionGlyphs',
	    value: function positionGlyphs(glyphs, positions) {
	      // find each base + mark cluster, and position the marks relative to the base
	      var clusterStart = 0;
	      var clusterEnd = 0;
	      for (var index = 0; index < glyphs.length; index++) {
	        var glyph = glyphs[index];
	        if (glyph.isMark) {
	          // TODO: handle ligatures
	          clusterEnd = index;
	        } else {
	          if (clusterStart !== clusterEnd) {
	            this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
	          }

	          clusterStart = clusterEnd = index;
	        }
	      }

	      if (clusterStart !== clusterEnd) {
	        this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
	      }

	      return positions;
	    }
	  }, {
	    key: 'positionCluster',
	    value: function positionCluster(glyphs, positions, clusterStart, clusterEnd) {
	      var base = glyphs[clusterStart];
	      var baseBox = base.cbox.copy();

	      // adjust bounding box for ligature glyphs
	      if (base.codePoints.length > 1) {
	        // LTR. TODO: RTL support.
	        baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
	      }

	      var xOffset = -positions[clusterStart].xAdvance;
	      var yOffset = 0;
	      var yGap = this.font.unitsPerEm / 16;

	      // position each of the mark glyphs relative to the base glyph
	      for (var index = clusterStart + 1; index <= clusterEnd; index++) {
	        var mark = glyphs[index];
	        var markBox = mark.cbox;
	        var position = positions[index];

	        var combiningClass = this.getCombiningClass(mark.codePoints[0]);

	        if (combiningClass !== 'Not_Reordered') {
	          position.xOffset = position.yOffset = 0;

	          // x positioning
	          switch (combiningClass) {
	            case 'Double_Above':
	            case 'Double_Below':
	              // LTR. TODO: RTL support.
	              position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
	              break;

	            case 'Attached_Below_Left':
	            case 'Below_Left':
	            case 'Above_Left':
	              // left align
	              position.xOffset += baseBox.minX - markBox.minX;
	              break;

	            case 'Attached_Above_Right':
	            case 'Below_Right':
	            case 'Above_Right':
	              // right align
	              position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
	              break;

	            default:
	              // Attached_Below, Attached_Above, Below, Above, other
	              // center align
	              position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
	          }

	          // y positioning
	          switch (combiningClass) {
	            case 'Double_Below':
	            case 'Below_Left':
	            case 'Below':
	            case 'Below_Right':
	            case 'Attached_Below_Left':
	            case 'Attached_Below':
	              // add a small gap between the glyphs if they are not attached
	              if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {
	                baseBox.minY += yGap;
	              }

	              position.yOffset = -baseBox.minY - markBox.maxY;
	              baseBox.minY += markBox.height;
	              break;

	            case 'Double_Above':
	            case 'Above_Left':
	            case 'Above':
	            case 'Above_Right':
	            case 'Attached_Above':
	            case 'Attached_Above_Right':
	              // add a small gap between the glyphs if they are not attached
	              if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {
	                baseBox.maxY += yGap;
	              }

	              position.yOffset = baseBox.maxY - markBox.minY;
	              baseBox.maxY += markBox.height;
	              break;
	          }

	          position.xAdvance = position.yAdvance = 0;
	          position.xOffset += xOffset;
	          position.yOffset += yOffset;
	        } else {
	          xOffset -= position.xAdvance;
	          yOffset -= position.yAdvance;
	        }
	      }

	      return;
	    }
	  }, {
	    key: 'getCombiningClass',
	    value: function getCombiningClass(codePoint) {
	      var combiningClass = unicode.getCombiningClass(codePoint);

	      // Thai / Lao need some per-character work
	      if ((codePoint & ~0xff) === 0x0e00) {
	        if (combiningClass === 'Not_Reordered') {
	          switch (codePoint) {
	            case 0x0e31:
	            case 0x0e34:
	            case 0x0e35:
	            case 0x0e36:
	            case 0x0e37:
	            case 0x0e47:
	            case 0x0e4c:
	            case 0x0e3d:
	            case 0x0e4e:
	              return 'Above_Right';

	            case 0x0eb1:
	            case 0x0eb4:
	            case 0x0eb5:
	            case 0x0eb6:
	            case 0x0eb7:
	            case 0x0ebb:
	            case 0x0ecc:
	            case 0x0ecd:
	              return 'Above';

	            case 0x0ebc:
	              return 'Below';
	          }
	        } else if (codePoint === 0x0e3a) {
	          // virama
	          return 'Below_Right';
	        }
	      }

	      switch (combiningClass) {
	        // Hebrew

	        case 'CCC10': // sheva
	        case 'CCC11': // hataf segol
	        case 'CCC12': // hataf patah
	        case 'CCC13': // hataf qamats
	        case 'CCC14': // hiriq
	        case 'CCC15': // tsere
	        case 'CCC16': // segol
	        case 'CCC17': // patah
	        case 'CCC18': // qamats
	        case 'CCC20': // qubuts
	        case 'CCC22':
	          // meteg
	          return 'Below';

	        case 'CCC23':
	          // rafe
	          return 'Attached_Above';

	        case 'CCC24':
	          // shin dot
	          return 'Above_Right';

	        case 'CCC25': // sin dot
	        case 'CCC19':
	          // holam
	          return 'Above_Left';

	        case 'CCC26':
	          // point varika
	          return 'Above';

	        case 'CCC21':
	          // dagesh
	          break;

	        // Arabic and Syriac

	        case 'CCC27': // fathatan
	        case 'CCC28': // dammatan
	        case 'CCC30': // fatha
	        case 'CCC31': // damma
	        case 'CCC33': // shadda
	        case 'CCC34': // sukun
	        case 'CCC35': // superscript alef
	        case 'CCC36':
	          // superscript alaph
	          return 'Above';

	        case 'CCC29': // kasratan
	        case 'CCC32':
	          // kasra
	          return 'Below';

	        // Thai

	        case 'CCC103':
	          // sara u / sara uu
	          return 'Below_Right';

	        case 'CCC107':
	          // mai
	          return 'Above_Right';

	        // Lao

	        case 'CCC118':
	          // sign u / sign uu
	          return 'Below';

	        case 'CCC122':
	          // mai
	          return 'Above';

	        // Tibetan

	        case 'CCC129': // sign aa
	        case 'CCC132':
	          // sign u
	          return 'Below';

	        case 'CCC130':
	          // sign i
	          return 'Above';
	      }

	      return combiningClass;
	    }
	  }]);

	  return UnicodeLayoutEngine;
	}();

	/**
	 * Represents a glyph bounding box
	 */
	var BBox = function () {
	  function BBox() {
	    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
	    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
	    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;
	    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;

	    _classCallCheck(this, BBox);

	    /**
	     * The minimum X position in the bounding box
	     * @type {number}
	     */
	    this.minX = minX;

	    /**
	     * The minimum Y position in the bounding box
	     * @type {number}
	     */
	    this.minY = minY;

	    /**
	     * The maxmimum X position in the bounding box
	     * @type {number}
	     */
	    this.maxX = maxX;

	    /**
	     * The maxmimum Y position in the bounding box
	     * @type {number}
	     */
	    this.maxY = maxY;
	  }

	  /**
	   * The width of the bounding box
	   * @type {number}
	   */


	  _createClass(BBox, [{
	    key: "addPoint",
	    value: function addPoint(x, y) {
	      if (x < this.minX) {
	        this.minX = x;
	      }

	      if (y < this.minY) {
	        this.minY = y;
	      }

	      if (x > this.maxX) {
	        this.maxX = x;
	      }

	      if (y > this.maxY) {
	        this.maxY = y;
	      }
	    }
	  }, {
	    key: "copy",
	    value: function copy() {
	      return new BBox(this.minX, this.minY, this.maxX, this.maxY);
	    }
	  }, {
	    key: "width",
	    get: function get() {
	      return this.maxX - this.minX;
	    }

	    /**
	     * The height of the bounding box
	     * @type {number}
	     */

	  }, {
	    key: "height",
	    get: function get() {
	      return this.maxY - this.minY;
	    }
	  }]);

	  return BBox;
	}();

	/**
	 * Represents a run of Glyph and GlyphPosition objects.
	 * Returned by the font layout method.
	 */

	var GlyphRun = function () {
	  function GlyphRun(glyphs, positions) {
	    _classCallCheck(this, GlyphRun);

	    /**
	     * An array of Glyph objects in the run
	     * @type {Glyph[]}
	     */
	    this.glyphs = glyphs;

	    /**
	     * An array of GlyphPosition objects for each glyph in the run
	     * @type {GlyphPosition[]}
	     */
	    this.positions = positions;
	  }

	  /**
	   * The total advance width of the run.
	   * @type {number}
	   */


	  _createClass(GlyphRun, [{
	    key: 'advanceWidth',
	    get: function get() {
	      var width = 0;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.positions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var position = _step.value;

	          width += position.xAdvance;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return width;
	    }

	    /**
	     * The total advance height of the run.
	     * @type {number}
	     */

	  }, {
	    key: 'advanceHeight',
	    get: function get() {
	      var height = 0;
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(this.positions), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var position = _step2.value;

	          height += position.yAdvance;
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return height;
	    }

	    /**
	     * The bounding box containing all glyphs in the run.
	     * @type {BBox}
	     */

	  }, {
	    key: 'bbox',
	    get: function get() {
	      var bbox = new BBox();

	      var x = 0;
	      var y = 0;
	      for (var index = 0; index < this.glyphs.length; index++) {
	        var glyph = this.glyphs[index];
	        var p = this.positions[index];
	        var b = glyph.bbox;

	        bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
	        bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);

	        x += p.xAdvance;
	        y += p.yAdvance;
	      }

	      return bbox;
	    }
	  }]);

	  return GlyphRun;
	}();

	/**
	 * Represents positioning information for a glyph in a GlyphRun.
	 */
	var GlyphPosition = function GlyphPosition() {
	  var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	  var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	  var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	  _classCallCheck(this, GlyphPosition);

	  /**
	   * The amount to move the virtual pen in the X direction after rendering this glyph.
	   * @type {number}
	   */
	  this.xAdvance = xAdvance;

	  /**
	   * The amount to move the virtual pen in the Y direction after rendering this glyph.
	   * @type {number}
	   */
	  this.yAdvance = yAdvance;

	  /**
	   * The offset from the pen position in the X direction at which to render this glyph.
	   * @type {number}
	   */
	  this.xOffset = xOffset;

	  /**
	   * The offset from the pen position in the Y direction at which to render this glyph.
	   * @type {number}
	   */
	  this.yOffset = yOffset;
	};

	// This maps the Unicode Script property to an OpenType script tag
	// Data from http://www.microsoft.com/typography/otspec/scripttags.htm
	// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.
	var UNICODE_SCRIPTS = {
	  Caucasian_Albanian: 'aghb',
	  Arabic: 'arab',
	  Imperial_Aramaic: 'armi',
	  Armenian: 'armn',
	  Avestan: 'avst',
	  Balinese: 'bali',
	  Bamum: 'bamu',
	  Bassa_Vah: 'bass',
	  Batak: 'batk',
	  Bengali: ['bng2', 'beng'],
	  Bopomofo: 'bopo',
	  Brahmi: 'brah',
	  Braille: 'brai',
	  Buginese: 'bugi',
	  Buhid: 'buhd',
	  Chakma: 'cakm',
	  Canadian_Aboriginal: 'cans',
	  Carian: 'cari',
	  Cham: 'cham',
	  Cherokee: 'cher',
	  Coptic: 'copt',
	  Cypriot: 'cprt',
	  Cyrillic: 'cyrl',
	  Devanagari: ['dev2', 'deva'],
	  Deseret: 'dsrt',
	  Duployan: 'dupl',
	  Egyptian_Hieroglyphs: 'egyp',
	  Elbasan: 'elba',
	  Ethiopic: 'ethi',
	  Georgian: 'geor',
	  Glagolitic: 'glag',
	  Gothic: 'goth',
	  Grantha: 'gran',
	  Greek: 'grek',
	  Gujarati: ['gjr2', 'gujr'],
	  Gurmukhi: ['gur2', 'guru'],
	  Hangul: 'hang',
	  Han: 'hani',
	  Hanunoo: 'hano',
	  Hebrew: 'hebr',
	  Hiragana: 'hira',
	  Pahawh_Hmong: 'hmng',
	  Katakana_Or_Hiragana: 'hrkt',
	  Old_Italic: 'ital',
	  Javanese: 'java',
	  Kayah_Li: 'kali',
	  Katakana: 'kana',
	  Kharoshthi: 'khar',
	  Khmer: 'khmr',
	  Khojki: 'khoj',
	  Kannada: ['knd2', 'knda'],
	  Kaithi: 'kthi',
	  Tai_Tham: 'lana',
	  Lao: 'lao ',
	  Latin: 'latn',
	  Lepcha: 'lepc',
	  Limbu: 'limb',
	  Linear_A: 'lina',
	  Linear_B: 'linb',
	  Lisu: 'lisu',
	  Lycian: 'lyci',
	  Lydian: 'lydi',
	  Mahajani: 'mahj',
	  Mandaic: 'mand',
	  Manichaean: 'mani',
	  Mende_Kikakui: 'mend',
	  Meroitic_Cursive: 'merc',
	  Meroitic_Hieroglyphs: 'mero',
	  Malayalam: ['mlm2', 'mlym'],
	  Modi: 'modi',
	  Mongolian: 'mong',
	  Mro: 'mroo',
	  Meetei_Mayek: 'mtei',
	  Myanmar: ['mym2', 'mymr'],
	  Old_North_Arabian: 'narb',
	  Nabataean: 'nbat',
	  Nko: 'nko ',
	  Ogham: 'ogam',
	  Ol_Chiki: 'olck',
	  Old_Turkic: 'orkh',
	  Oriya: 'orya',
	  Osmanya: 'osma',
	  Palmyrene: 'palm',
	  Pau_Cin_Hau: 'pauc',
	  Old_Permic: 'perm',
	  Phags_Pa: 'phag',
	  Inscriptional_Pahlavi: 'phli',
	  Psalter_Pahlavi: 'phlp',
	  Phoenician: 'phnx',
	  Miao: 'plrd',
	  Inscriptional_Parthian: 'prti',
	  Rejang: 'rjng',
	  Runic: 'runr',
	  Samaritan: 'samr',
	  Old_South_Arabian: 'sarb',
	  Saurashtra: 'saur',
	  Shavian: 'shaw',
	  Sharada: 'shrd',
	  Siddham: 'sidd',
	  Khudawadi: 'sind',
	  Sinhala: 'sinh',
	  Sora_Sompeng: 'sora',
	  Sundanese: 'sund',
	  Syloti_Nagri: 'sylo',
	  Syriac: 'syrc',
	  Tagbanwa: 'tagb',
	  Takri: 'takr',
	  Tai_Le: 'tale',
	  New_Tai_Lue: 'talu',
	  Tamil: 'taml',
	  Tai_Viet: 'tavt',
	  Telugu: ['tel2', 'telu'],
	  Tifinagh: 'tfng',
	  Tagalog: 'tglg',
	  Thaana: 'thaa',
	  Thai: 'thai',
	  Tibetan: 'tibt',
	  Tirhuta: 'tirh',
	  Ugaritic: 'ugar',
	  Vai: 'vai ',
	  Warang_Citi: 'wara',
	  Old_Persian: 'xpeo',
	  Cuneiform: 'xsux',
	  Yi: 'yi  ',
	  Inherited: 'zinh',
	  Common: 'zyyy',
	  Unknown: 'zzzz'
	};

	function forString(string) {
	  var len = string.length;
	  var idx = 0;
	  while (idx < len) {
	    var code = string.charCodeAt(idx++);

	    // Check if this is a high surrogate
	    if (0xd800 <= code && code <= 0xdbff && idx < len) {
	      var next = string.charCodeAt(idx);

	      // Check if this is a low surrogate
	      if (0xdc00 <= next && next <= 0xdfff) {
	        idx++;
	        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
	      }
	    }

	    var script = unicode.getScript(code);
	    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {
	      return UNICODE_SCRIPTS[script];
	    }
	  }

	  return UNICODE_SCRIPTS.Unknown;
	}

	function forCodePoints(codePoints) {
	  for (var i = 0; i < codePoints.length; i++) {
	    var codePoint = codePoints[i];
	    var script = unicode.getScript(codePoint);
	    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {
	      return UNICODE_SCRIPTS[script];
	    }
	  }

	  return UNICODE_SCRIPTS.Unknown;
	}

	// The scripts in this map are written from right to left
	var RTL = {
	  arab: true, // Arabic
	  hebr: true, // Hebrew
	  syrc: true, // Syriac
	  thaa: true, // Thaana
	  cprt: true, // Cypriot Syllabary
	  khar: true, // Kharosthi
	  phnx: true, // Phoenician
	  'nko ': true, // N'Ko
	  lydi: true, // Lydian
	  avst: true, // Avestan
	  armi: true, // Imperial Aramaic
	  phli: true, // Inscriptional Pahlavi
	  prti: true, // Inscriptional Parthian
	  sarb: true, // Old South Arabian
	  orkh: true, // Old Turkic, Orkhon Runic
	  samr: true, // Samaritan
	  mand: true, // Mandaic, Mandaean
	  merc: true, // Meroitic Cursive
	  mero: true, // Meroitic Hieroglyphs

	  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
	  mani: true, // Manichaean
	  mend: true, // Mende Kikakui
	  nbat: true, // Nabataean
	  narb: true, // Old North Arabian
	  palm: true, // Palmyrene
	  phlp: true // Psalter Pahlavi
	};

	function direction(script) {
	  if (RTL[script]) {
	    return 'rtl';
	  }

	  return 'ltr';
	}

	// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
	// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac
	var features = {
	  allTypographicFeatures: {
	    code: 0,
	    exclusive: false,
	    allTypeFeatures: 0
	  },
	  ligatures: {
	    code: 1,
	    exclusive: false,
	    requiredLigatures: 0,
	    commonLigatures: 2,
	    rareLigatures: 4,
	    // logos: 6
	    rebusPictures: 8,
	    diphthongLigatures: 10,
	    squaredLigatures: 12,
	    abbrevSquaredLigatures: 14,
	    symbolLigatures: 16,
	    contextualLigatures: 18,
	    historicalLigatures: 20
	  },
	  cursiveConnection: {
	    code: 2,
	    exclusive: true,
	    unconnected: 0,
	    partiallyConnected: 1,
	    cursive: 2
	  },
	  letterCase: {
	    code: 3,
	    exclusive: true
	  },
	  // upperAndLowerCase: 0          # deprecated
	  // allCaps: 1                    # deprecated
	  // allLowerCase: 2               # deprecated
	  // smallCaps: 3                  # deprecated
	  // initialCaps: 4                # deprecated
	  // initialCapsAndSmallCaps: 5    # deprecated
	  verticalSubstitution: {
	    code: 4,
	    exclusive: false,
	    substituteVerticalForms: 0
	  },
	  linguisticRearrangement: {
	    code: 5,
	    exclusive: false,
	    linguisticRearrangement: 0
	  },
	  numberSpacing: {
	    code: 6,
	    exclusive: true,
	    monospacedNumbers: 0,
	    proportionalNumbers: 1,
	    thirdWidthNumbers: 2,
	    quarterWidthNumbers: 3
	  },
	  smartSwash: {
	    code: 8,
	    exclusive: false,
	    wordInitialSwashes: 0,
	    wordFinalSwashes: 2,
	    // lineInitialSwashes: 4
	    // lineFinalSwashes: 6
	    nonFinalSwashes: 8
	  },
	  diacritics: {
	    code: 9,
	    exclusive: true,
	    showDiacritics: 0,
	    hideDiacritics: 1,
	    decomposeDiacritics: 2
	  },
	  verticalPosition: {
	    code: 10,
	    exclusive: true,
	    normalPosition: 0,
	    superiors: 1,
	    inferiors: 2,
	    ordinals: 3,
	    scientificInferiors: 4
	  },
	  fractions: {
	    code: 11,
	    exclusive: true,
	    noFractions: 0,
	    verticalFractions: 1,
	    diagonalFractions: 2
	  },
	  overlappingCharacters: {
	    code: 13,
	    exclusive: false,
	    preventOverlap: 0
	  },
	  typographicExtras: {
	    code: 14,
	    exclusive: false,
	    // hyphensToEmDash: 0
	    // hyphenToEnDash: 2
	    slashedZero: 4
	  },
	  // formInterrobang: 6
	  // smartQuotes: 8
	  // periodsToEllipsis: 10
	  mathematicalExtras: {
	    code: 15,
	    exclusive: false,
	    // hyphenToMinus: 0
	    // asteristoMultiply: 2
	    // slashToDivide: 4
	    // inequalityLigatures: 6
	    // exponents: 8
	    mathematicalGreek: 10
	  },
	  ornamentSets: {
	    code: 16,
	    exclusive: true,
	    noOrnaments: 0,
	    dingbats: 1,
	    piCharacters: 2,
	    fleurons: 3,
	    decorativeBorders: 4,
	    internationalSymbols: 5,
	    mathSymbols: 6
	  },
	  characterAlternatives: {
	    code: 17,
	    exclusive: true,
	    noAlternates: 0
	  },
	  // user defined options
	  designComplexity: {
	    code: 18,
	    exclusive: true,
	    designLevel1: 0,
	    designLevel2: 1,
	    designLevel3: 2,
	    designLevel4: 3,
	    designLevel5: 4
	  },
	  styleOptions: {
	    code: 19,
	    exclusive: true,
	    noStyleOptions: 0,
	    displayText: 1,
	    engravedText: 2,
	    illuminatedCaps: 3,
	    titlingCaps: 4,
	    tallCaps: 5
	  },
	  characterShape: {
	    code: 20,
	    exclusive: true,
	    traditionalCharacters: 0,
	    simplifiedCharacters: 1,
	    JIS1978Characters: 2,
	    JIS1983Characters: 3,
	    JIS1990Characters: 4,
	    traditionalAltOne: 5,
	    traditionalAltTwo: 6,
	    traditionalAltThree: 7,
	    traditionalAltFour: 8,
	    traditionalAltFive: 9,
	    expertCharacters: 10,
	    JIS2004Characters: 11,
	    hojoCharacters: 12,
	    NLCCharacters: 13,
	    traditionalNamesCharacters: 14
	  },
	  numberCase: {
	    code: 21,
	    exclusive: true,
	    lowerCaseNumbers: 0,
	    upperCaseNumbers: 1
	  },
	  textSpacing: {
	    code: 22,
	    exclusive: true,
	    proportionalText: 0,
	    monospacedText: 1,
	    halfWidthText: 2,
	    thirdWidthText: 3,
	    quarterWidthText: 4,
	    altProportionalText: 5,
	    altHalfWidthText: 6
	  },
	  transliteration: {
	    code: 23,
	    exclusive: true,
	    noTransliteration: 0
	  },
	  // hanjaToHangul: 1
	  // hiraganaToKatakana: 2
	  // katakanaToHiragana: 3
	  // kanaToRomanization: 4
	  // romanizationToHiragana: 5
	  // romanizationToKatakana: 6
	  // hanjaToHangulAltOne: 7
	  // hanjaToHangulAltTwo: 8
	  // hanjaToHangulAltThree: 9
	  annotation: {
	    code: 24,
	    exclusive: true,
	    noAnnotation: 0,
	    boxAnnotation: 1,
	    roundedBoxAnnotation: 2,
	    circleAnnotation: 3,
	    invertedCircleAnnotation: 4,
	    parenthesisAnnotation: 5,
	    periodAnnotation: 6,
	    romanNumeralAnnotation: 7,
	    diamondAnnotation: 8,
	    invertedBoxAnnotation: 9,
	    invertedRoundedBoxAnnotation: 10
	  },
	  kanaSpacing: {
	    code: 25,
	    exclusive: true,
	    fullWidthKana: 0,
	    proportionalKana: 1
	  },
	  ideographicSpacing: {
	    code: 26,
	    exclusive: true,
	    fullWidthIdeographs: 0,
	    proportionalIdeographs: 1,
	    halfWidthIdeographs: 2
	  },
	  unicodeDecomposition: {
	    code: 27,
	    exclusive: false,
	    canonicalComposition: 0,
	    compatibilityComposition: 2,
	    transcodingComposition: 4
	  },
	  rubyKana: {
	    code: 28,
	    exclusive: false,
	    // noRubyKana: 0     # deprecated - use rubyKanaOff instead
	    // rubyKana: 1     # deprecated - use rubyKanaOn instead
	    rubyKana: 2
	  },
	  CJKSymbolAlternatives: {
	    code: 29,
	    exclusive: true,
	    noCJKSymbolAlternatives: 0,
	    CJKSymbolAltOne: 1,
	    CJKSymbolAltTwo: 2,
	    CJKSymbolAltThree: 3,
	    CJKSymbolAltFour: 4,
	    CJKSymbolAltFive: 5
	  },
	  ideographicAlternatives: {
	    code: 30,
	    exclusive: true,
	    noIdeographicAlternatives: 0,
	    ideographicAltOne: 1,
	    ideographicAltTwo: 2,
	    ideographicAltThree: 3,
	    ideographicAltFour: 4,
	    ideographicAltFive: 5
	  },
	  CJKVerticalRomanPlacement: {
	    code: 31,
	    exclusive: true,
	    CJKVerticalRomanCentered: 0,
	    CJKVerticalRomanHBaseline: 1
	  },
	  italicCJKRoman: {
	    code: 32,
	    exclusive: false,
	    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
	    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
	    CJKItalicRoman: 2
	  },
	  caseSensitiveLayout: {
	    code: 33,
	    exclusive: false,
	    caseSensitiveLayout: 0,
	    caseSensitiveSpacing: 2
	  },
	  alternateKana: {
	    code: 34,
	    exclusive: false,
	    alternateHorizKana: 0,
	    alternateVertKana: 2
	  },
	  stylisticAlternatives: {
	    code: 35,
	    exclusive: false,
	    noStylisticAlternates: 0,
	    stylisticAltOne: 2,
	    stylisticAltTwo: 4,
	    stylisticAltThree: 6,
	    stylisticAltFour: 8,
	    stylisticAltFive: 10,
	    stylisticAltSix: 12,
	    stylisticAltSeven: 14,
	    stylisticAltEight: 16,
	    stylisticAltNine: 18,
	    stylisticAltTen: 20,
	    stylisticAltEleven: 22,
	    stylisticAltTwelve: 24,
	    stylisticAltThirteen: 26,
	    stylisticAltFourteen: 28,
	    stylisticAltFifteen: 30,
	    stylisticAltSixteen: 32,
	    stylisticAltSeventeen: 34,
	    stylisticAltEighteen: 36,
	    stylisticAltNineteen: 38,
	    stylisticAltTwenty: 40
	  },
	  contextualAlternates: {
	    code: 36,
	    exclusive: false,
	    contextualAlternates: 0,
	    swashAlternates: 2,
	    contextualSwashAlternates: 4
	  },
	  lowerCase: {
	    code: 37,
	    exclusive: true,
	    defaultLowerCase: 0,
	    lowerCaseSmallCaps: 1,
	    lowerCasePetiteCaps: 2
	  },
	  upperCase: {
	    code: 38,
	    exclusive: true,
	    defaultUpperCase: 0,
	    upperCaseSmallCaps: 1,
	    upperCasePetiteCaps: 2
	  },
	  languageTag: { // indices into ltag table
	    code: 39,
	    exclusive: true
	  },
	  CJKRomanSpacing: {
	    code: 103,
	    exclusive: true,
	    halfWidthCJKRoman: 0,
	    proportionalCJKRoman: 1,
	    defaultCJKRoman: 2,
	    fullWidthCJKRoman: 3
	  }
	};

	var feature = function feature(name, selector) {
	  return [features[name].code, features[name][selector]];
	};

	var OTMapping = {
	  rlig: feature('ligatures', 'requiredLigatures'),
	  clig: feature('ligatures', 'contextualLigatures'),
	  dlig: feature('ligatures', 'rareLigatures'),
	  hlig: feature('ligatures', 'historicalLigatures'),
	  liga: feature('ligatures', 'commonLigatures'),
	  hist: feature('ligatures', 'historicalLigatures'), // ??

	  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),
	  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),

	  frac: feature('fractions', 'diagonalFractions'),
	  dnom: feature('fractions', 'diagonalFractions'), // ??
	  numr: feature('fractions', 'diagonalFractions'), // ??
	  afrc: feature('fractions', 'verticalFractions'),
	  // aalt
	  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
	  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
	  // unic, vatu, vhal, vjmo, vpal, vrt2
	  // dist -> trak table?
	  // kern, vkrn -> kern table
	  // lfbd + opbd + rtbd -> opbd table?
	  // mark, mkmk -> acnt table?
	  // locl -> languageTag + ltag table

	  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing
	  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?
	  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below
	  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
	  swsh: feature('contextualAlternates', 'swashAlternates'),
	  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),
	  curs: feature('cursiveConnection', 'cursive'), // ??
	  c2pc: feature('upperCase', 'upperCasePetiteCaps'),
	  c2sc: feature('upperCase', 'upperCaseSmallCaps'),

	  init: feature('smartSwash', 'wordInitialSwashes'), // ??
	  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??
	  medi: feature('smartSwash', 'nonFinalSwashes'), // ??
	  med2: feature('smartSwash', 'nonFinalSwashes'), // ??
	  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??
	  fina: feature('smartSwash', 'wordFinalSwashes'), // ??

	  pkna: feature('kanaSpacing', 'proportionalKana'),
	  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?
	  halt: feature('textSpacing', 'altHalfWidthText'),

	  hkna: feature('alternateKana', 'alternateHorizKana'),
	  vkna: feature('alternateKana', 'alternateVertKana'),
	  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated

	  ital: feature('italicCJKRoman', 'CJKItalicRoman'),
	  lnum: feature('numberCase', 'upperCaseNumbers'),
	  onum: feature('numberCase', 'lowerCaseNumbers'),
	  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),

	  // nalt: not enough info. what type of annotation?
	  // ornm: ditto, which ornament style?

	  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?
	  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?
	  vert: feature('verticalSubstitution', 'substituteVerticalForms'),
	  tnum: feature('numberSpacing', 'monospacedNumbers'),
	  pnum: feature('numberSpacing', 'proportionalNumbers'),
	  sups: feature('verticalPosition', 'superiors'),
	  subs: feature('verticalPosition', 'inferiors'),
	  ordn: feature('verticalPosition', 'ordinals'),
	  pwid: feature('textSpacing', 'proportionalText'),
	  hwid: feature('textSpacing', 'halfWidthText'),
	  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?
	  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?
	  fwid: feature('textSpacing', 'proportionalText'), //??
	  palt: feature('textSpacing', 'altProportionalText'),
	  trad: feature('characterShape', 'traditionalCharacters'),
	  smpl: feature('characterShape', 'simplifiedCharacters'),
	  jp78: feature('characterShape', 'JIS1978Characters'),
	  jp83: feature('characterShape', 'JIS1983Characters'),
	  jp90: feature('characterShape', 'JIS1990Characters'),
	  jp04: feature('characterShape', 'JIS2004Characters'),
	  expt: feature('characterShape', 'expertCharacters'),
	  hojo: feature('characterShape', 'hojoCharacters'),
	  nlck: feature('characterShape', 'NLCCharacters'),
	  tnam: feature('characterShape', 'traditionalNamesCharacters'),
	  ruby: feature('rubyKana', 'rubyKana'),
	  titl: feature('styleOptions', 'titlingCaps'),
	  zero: feature('typographicExtras', 'slashedZero'),

	  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),
	  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),
	  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),
	  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),
	  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),
	  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),
	  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),
	  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),
	  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),
	  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),
	  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),
	  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),
	  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),
	  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),
	  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),
	  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),
	  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),
	  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),
	  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),
	  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')
	};

	// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose

	// Add cv01-cv99 features
	for (var i = 1; i <= 99; i++) {
	  OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];
	}

	// create inverse mapping
	var AATMapping = {};
	for (var ot in OTMapping) {
	  var aat = OTMapping[ot];
	  if (AATMapping[aat[0]] == null) {
	    AATMapping[aat[0]] = {};
	  }

	  AATMapping[aat[0]][aat[1]] = ot;
	}

	// Maps an array of OpenType features to AAT features
	// in the form of {featureType:{featureSetting:true}}
	function mapOTToAAT(features) {
	  var res = {};
	  for (var k = 0; k < features.length; k++) {
	    var r = void 0;
	    if (r = OTMapping[features[k]]) {
	      if (res[r[0]] == null) {
	        res[r[0]] = {};
	      }

	      res[r[0]][r[1]] = true;
	    }
	  }

	  return res;
	}

	// Maps strings in a [featureType, featureSetting]
	// to their equivalent number codes
	function mapFeatureStrings(f) {
	  var _f = _slicedToArray(f, 2),
	      type = _f[0],
	      setting = _f[1];

	  if (isNaN(type)) {
	    var typeCode = features[type] && features[type].code;
	  } else {
	    var typeCode = type;
	  }

	  if (isNaN(setting)) {
	    var settingCode = features[type] && features[type][setting];
	  } else {
	    var settingCode = setting;
	  }

	  return [typeCode, settingCode];
	}

	// Maps AAT features to an array of OpenType features
	// Supports both arrays in the form of [[featureType, featureSetting]]
	// and objects in the form of {featureType:{featureSetting:true}}
	// featureTypes and featureSettings can be either strings or number codes
	function mapAATToOT(features) {
	  var res = {};
	  if (Array.isArray(features)) {
	    for (var k = 0; k < features.length; k++) {
	      var r = void 0;
	      var f = mapFeatureStrings(features[k]);
	      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {
	        res[r] = true;
	      }
	    }
	  } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
	    for (var type in features) {
	      var _feature = features[type];
	      for (var setting in _feature) {
	        var _r = void 0;
	        var _f2 = mapFeatureStrings([type, setting]);
	        if (_feature[setting] && (_r = AATMapping[_f2[0]] && AATMapping[_f2[0]][_f2[1]])) {
	          res[_r] = true;
	        }
	      }
	    }
	  }

	  return _Object$keys(res);
	}

	var _class$3;
	function _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	var AATLookupTable = (_class$3 = function () {
	  function AATLookupTable(table) {
	    _classCallCheck(this, AATLookupTable);

	    this.table = table;
	  }

	  _createClass(AATLookupTable, [{
	    key: 'lookup',
	    value: function lookup(glyph) {
	      switch (this.table.version) {
	        case 0:
	          // simple array format
	          return this.table.values.getItem(glyph);

	        case 2: // segment format
	        case 4:
	          {
	            var min = 0;
	            var max = this.table.binarySearchHeader.nUnits - 1;

	            while (min <= max) {
	              var mid = min + max >> 1;
	              var seg = this.table.segments[mid];

	              // special end of search value
	              if (seg.firstGlyph === 0xffff) {
	                return null;
	              }

	              if (glyph < seg.firstGlyph) {
	                max = mid - 1;
	              } else if (glyph > seg.lastGlyph) {
	                min = mid + 1;
	              } else {
	                if (this.table.version === 2) {
	                  return seg.value;
	                } else {
	                  return seg.values[glyph - seg.firstGlyph];
	                }
	              }
	            }

	            return null;
	          }

	        case 6:
	          {
	            // lookup single
	            var _min = 0;
	            var _max = this.table.binarySearchHeader.nUnits - 1;

	            while (_min <= _max) {
	              var mid = _min + _max >> 1;
	              var seg = this.table.segments[mid];

	              // special end of search value
	              if (seg.glyph === 0xffff) {
	                return null;
	              }

	              if (glyph < seg.glyph) {
	                _max = mid - 1;
	              } else if (glyph > seg.glyph) {
	                _min = mid + 1;
	              } else {
	                return seg.value;
	              }
	            }

	            return null;
	          }

	        case 8:
	          // lookup trimmed
	          return this.table.values[glyph - this.table.firstGlyph];

	        default:
	          throw new Error('Unknown lookup table format: ' + this.table.version);
	      }
	    }
	  }, {
	    key: 'glyphsForValue',
	    value: function glyphsForValue(classValue) {
	      var res = [];

	      switch (this.table.version) {
	        case 2: // segment format
	        case 4:
	          {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	              for (var _iterator = _getIterator(this.table.segments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var segment = _step.value;

	                if (this.table.version === 2 && segment.value === classValue) {
	                  res.push.apply(res, _toConsumableArray(range(segment.firstGlyph, segment.lastGlyph + 1)));
	                } else {
	                  for (var index = 0; index < segment.values.length; index++) {
	                    if (segment.values[index] === classValue) {
	                      res.push(segment.firstGlyph + index);
	                    }
	                  }
	                }
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                  _iterator.return();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }

	            break;
	          }

	        case 6:
	          {
	            // lookup single
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	              for (var _iterator2 = _getIterator(this.table.segments), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var _segment = _step2.value;

	                if (_segment.value === classValue) {
	                  res.push(_segment.glyph);
	                }
	              }
	            } catch (err) {
	              _didIteratorError2 = true;
	              _iteratorError2 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                  _iterator2.return();
	                }
	              } finally {
	                if (_didIteratorError2) {
	                  throw _iteratorError2;
	                }
	              }
	            }

	            break;
	          }

	        case 8:
	          {
	            // lookup trimmed
	            for (var i = 0; i < this.table.values.length; i++) {
	              if (this.table.values[i] === classValue) {
	                res.push(this.table.firstGlyph + i);
	              }
	            }

	            break;
	          }

	        default:
	          throw new Error('Unknown lookup table format: ' + this.table.version);
	      }

	      return res;
	    }
	  }]);

	  return AATLookupTable;
	}(), (_applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], _Object$getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype)), _class$3);

	var START_OF_TEXT_STATE = 0;
	var END_OF_TEXT_CLASS = 0;
	var OUT_OF_BOUNDS_CLASS = 1;
	var DELETED_GLYPH_CLASS = 2;
	var DONT_ADVANCE = 0x4000;

	var AATStateMachine = function () {
	  function AATStateMachine(stateTable) {
	    _classCallCheck(this, AATStateMachine);

	    this.stateTable = stateTable;
	    this.lookupTable = new AATLookupTable(stateTable.classTable);
	  }

	  _createClass(AATStateMachine, [{
	    key: 'process',
	    value: function process(glyphs, reverse, processEntry) {
	      var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?
	      var index = reverse ? glyphs.length - 1 : 0;
	      var dir = reverse ? -1 : 1;

	      while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
	        var glyph = null;
	        var classCode = OUT_OF_BOUNDS_CLASS;
	        var shouldAdvance = true;

	        if (index === glyphs.length || index === -1) {
	          classCode = END_OF_TEXT_CLASS;
	        } else {
	          glyph = glyphs[index];
	          if (glyph.id === 0xffff) {
	            // deleted glyph
	            classCode = DELETED_GLYPH_CLASS;
	          } else {
	            classCode = this.lookupTable.lookup(glyph.id);
	            if (classCode == null) {
	              classCode = OUT_OF_BOUNDS_CLASS;
	            }
	          }
	        }

	        var row = this.stateTable.stateArray.getItem(currentState);
	        var entryIndex = row[classCode];
	        var entry = this.stateTable.entryTable.getItem(entryIndex);

	        if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {
	          processEntry(glyph, entry, index);
	          shouldAdvance = !(entry.flags & DONT_ADVANCE);
	        }

	        currentState = entry.newState;
	        if (shouldAdvance) {
	          index += dir;
	        }
	      }

	      return glyphs;
	    }

	    /**
	     * Performs a depth-first traversal of the glyph strings
	     * represented by the state machine.
	     */

	  }, {
	    key: 'traverse',
	    value: function traverse(opts) {
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Set();

	      if (visited.has(state)) {
	        return;
	      }

	      visited.add(state);

	      var _stateTable = this.stateTable,
	          nClasses = _stateTable.nClasses,
	          stateArray = _stateTable.stateArray,
	          entryTable = _stateTable.entryTable;

	      var row = stateArray.getItem(state);

	      // Skip predefined classes
	      for (var classCode = 4; classCode < nClasses; classCode++) {
	        var entryIndex = row[classCode];
	        var entry = entryTable.getItem(entryIndex);

	        // Try all glyphs in the class
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = _getIterator(this.lookupTable.glyphsForValue(classCode)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var glyph = _step.value;

	            if (opts.enter) {
	              opts.enter(glyph, entry);
	            }

	            if (entry.newState !== 0) {
	              this.traverse(opts, entry.newState, visited);
	            }

	            if (opts.exit) {
	              opts.exit(glyph, entry);
	            }
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }
	      }
	    }
	  }]);

	  return AATStateMachine;
	}();

	var _class$2;
	function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	// indic replacement flags
	var MARK_FIRST = 0x8000;
	var MARK_LAST = 0x2000;
	var VERB = 0x000F;

	// contextual substitution and glyph insertion flag
	var SET_MARK = 0x8000;

	// ligature entry flags
	var SET_COMPONENT = 0x8000;
	var PERFORM_ACTION = 0x2000;

	// ligature action masks
	var LAST_MASK = 0x80000000;
	var STORE_MASK = 0x40000000;
	var OFFSET_MASK = 0x3FFFFFFF;

	var REVERSE_DIRECTION = 0x400000;
	var CURRENT_INSERT_BEFORE = 0x0800;
	var MARKED_INSERT_BEFORE = 0x0400;
	var CURRENT_INSERT_COUNT = 0x03E0;
	var MARKED_INSERT_COUNT = 0x001F;

	var AATMorxProcessor = (_class$2 = function () {
	  function AATMorxProcessor(font) {
	    _classCallCheck(this, AATMorxProcessor);

	    this.processIndicRearragement = this.processIndicRearragement.bind(this);
	    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
	    this.processLigature = this.processLigature.bind(this);
	    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
	    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
	    this.font = font;
	    this.morx = font.morx;
	    this.inputCache = null;
	  }

	  // Processes an array of glyphs and applies the specified features
	  // Features should be in the form of {featureType:{featureSetting:true}}


	  _createClass(AATMorxProcessor, [{
	    key: 'process',
	    value: function process(glyphs) {
	      var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.morx.chains), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var chain = _step.value;

	          var flags = chain.defaultFlags;

	          // enable/disable the requested features
	          var _iteratorNormalCompletion2 = true;
	          var _didIteratorError2 = false;
	          var _iteratorError2 = undefined;

	          try {
	            for (var _iterator2 = _getIterator(chain.features), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	              var feature = _step2.value;

	              var f = void 0;
	              if ((f = features[feature.featureType]) && f[feature.featureSetting]) {
	                flags &= feature.disableFlags;
	                flags |= feature.enableFlags;
	              }
	            }
	          } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	              }
	            } finally {
	              if (_didIteratorError2) {
	                throw _iteratorError2;
	              }
	            }
	          }

	          var _iteratorNormalCompletion3 = true;
	          var _didIteratorError3 = false;
	          var _iteratorError3 = undefined;

	          try {
	            for (var _iterator3 = _getIterator(chain.subtables), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	              var subtable = _step3.value;

	              if (subtable.subFeatureFlags & flags) {
	                this.processSubtable(subtable, glyphs);
	              }
	            }
	          } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                _iterator3.return();
	              }
	            } finally {
	              if (_didIteratorError3) {
	                throw _iteratorError3;
	              }
	            }
	          }
	        }

	        // remove deleted glyphs
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      var index = glyphs.length - 1;
	      while (index >= 0) {
	        if (glyphs[index].id === 0xffff) {
	          glyphs.splice(index, 1);
	        }

	        index--;
	      }

	      return glyphs;
	    }
	  }, {
	    key: 'processSubtable',
	    value: function processSubtable(subtable, glyphs) {
	      this.subtable = subtable;
	      this.glyphs = glyphs;
	      if (this.subtable.type === 4) {
	        this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
	        return;
	      }

	      this.ligatureStack = [];
	      this.markedGlyph = null;
	      this.firstGlyph = null;
	      this.lastGlyph = null;
	      this.markedIndex = null;

	      var stateMachine = this.getStateMachine(subtable);
	      var process = this.getProcessor();

	      var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);
	      return stateMachine.process(this.glyphs, reverse, process);
	    }
	  }, {
	    key: 'getStateMachine',
	    value: function getStateMachine(subtable) {
	      return new AATStateMachine(subtable.table.stateTable);
	    }
	  }, {
	    key: 'getProcessor',
	    value: function getProcessor() {
	      switch (this.subtable.type) {
	        case 0:
	          return this.processIndicRearragement;
	        case 1:
	          return this.processContextualSubstitution;
	        case 2:
	          return this.processLigature;
	        case 4:
	          return this.processNoncontextualSubstitutions;
	        case 5:
	          return this.processGlyphInsertion;
	        default:
	          throw new Error('Invalid morx subtable type: ' + this.subtable.type);
	      }
	    }
	  }, {
	    key: 'processIndicRearragement',
	    value: function processIndicRearragement(glyph, entry, index) {
	      if (entry.flags & MARK_FIRST) {
	        this.firstGlyph = index;
	      }

	      if (entry.flags & MARK_LAST) {
	        this.lastGlyph = index;
	      }

	      reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);
	    }
	  }, {
	    key: 'processContextualSubstitution',
	    value: function processContextualSubstitution(glyph, entry, index) {
	      var subsitutions = this.subtable.table.substitutionTable.items;
	      if (entry.markIndex !== 0xffff) {
	        var lookup = subsitutions.getItem(entry.markIndex);
	        var lookupTable = new AATLookupTable(lookup);
	        glyph = this.glyphs[this.markedGlyph];
	        var gid = lookupTable.lookup(glyph.id);
	        if (gid) {
	          this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
	        }
	      }

	      if (entry.currentIndex !== 0xffff) {
	        var _lookup = subsitutions.getItem(entry.currentIndex);
	        var _lookupTable = new AATLookupTable(_lookup);
	        glyph = this.glyphs[index];
	        var gid = _lookupTable.lookup(glyph.id);
	        if (gid) {
	          this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
	        }
	      }

	      if (entry.flags & SET_MARK) {
	        this.markedGlyph = index;
	      }
	    }
	  }, {
	    key: 'processLigature',
	    value: function processLigature(glyph, entry, index) {
	      if (entry.flags & SET_COMPONENT) {
	        this.ligatureStack.push(index);
	      }

	      if (entry.flags & PERFORM_ACTION) {
	        var _ligatureStack;

	        var actions = this.subtable.table.ligatureActions;
	        var components = this.subtable.table.components;
	        var ligatureList = this.subtable.table.ligatureList;

	        var actionIndex = entry.action;
	        var last = false;
	        var ligatureIndex = 0;
	        var codePoints = [];
	        var ligatureGlyphs = [];

	        while (!last) {
	          var _codePoints;

	          var componentGlyph = this.ligatureStack.pop();
	          (_codePoints = codePoints).unshift.apply(_codePoints, _toConsumableArray(this.glyphs[componentGlyph].codePoints));

	          var action = actions.getItem(actionIndex++);
	          last = !!(action & LAST_MASK);
	          var store = !!(action & STORE_MASK);
	          var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits
	          offset += this.glyphs[componentGlyph].id;

	          var component = components.getItem(offset);
	          ligatureIndex += component;

	          if (last || store) {
	            var ligatureEntry = ligatureList.getItem(ligatureIndex);
	            this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
	            ligatureGlyphs.push(componentGlyph);
	            ligatureIndex = 0;
	            codePoints = [];
	          } else {
	            this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
	          }
	        }

	        // Put ligature glyph indexes back on the stack
	        (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);
	      }
	    }
	  }, {
	    key: 'processNoncontextualSubstitutions',
	    value: function processNoncontextualSubstitutions(subtable, glyphs, index) {
	      var lookupTable = new AATLookupTable(subtable.table.lookupTable);

	      for (index = 0; index < glyphs.length; index++) {
	        var glyph = glyphs[index];
	        if (glyph.id !== 0xffff) {
	          var gid = lookupTable.lookup(glyph.id);
	          if (gid) {
	            // 0 means do nothing
	            glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
	          }
	        }
	      }
	    }
	  }, {
	    key: '_insertGlyphs',
	    value: function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
	      var _glyphs;

	      var insertions = [];
	      while (count--) {
	        var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
	        insertions.push(this.font.getGlyph(gid));
	      }

	      if (!isBefore) {
	        glyphIndex++;
	      }

	      (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));
	    }
	  }, {
	    key: 'processGlyphInsertion',
	    value: function processGlyphInsertion(glyph, entry, index) {
	      if (entry.flags & SET_MARK) {
	        this.markedIndex = index;
	      }

	      if (entry.markedInsertIndex !== 0xffff) {
	        var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;
	        var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);
	        this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
	      }

	      if (entry.currentInsertIndex !== 0xffff) {
	        var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;
	        var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);
	        this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);
	      }
	    }
	  }, {
	    key: 'getSupportedFeatures',
	    value: function getSupportedFeatures() {
	      var features = [];
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = _getIterator(this.morx.chains), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var chain = _step4.value;
	          var _iteratorNormalCompletion5 = true;
	          var _didIteratorError5 = false;
	          var _iteratorError5 = undefined;

	          try {
	            for (var _iterator5 = _getIterator(chain.features), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	              var feature = _step5.value;

	              features.push([feature.featureType, feature.featureSetting]);
	            }
	          } catch (err) {
	            _didIteratorError5 = true;
	            _iteratorError5 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                _iterator5.return();
	              }
	            } finally {
	              if (_didIteratorError5) {
	                throw _iteratorError5;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }

	      return features;
	    }
	  }, {
	    key: 'generateInputs',
	    value: function generateInputs(gid) {
	      if (!this.inputCache) {
	        this.generateInputCache();
	      }

	      return this.inputCache[gid] || [];
	    }
	  }, {
	    key: 'generateInputCache',
	    value: function generateInputCache() {
	      this.inputCache = {};

	      var _iteratorNormalCompletion6 = true;
	      var _didIteratorError6 = false;
	      var _iteratorError6 = undefined;

	      try {
	        for (var _iterator6 = _getIterator(this.morx.chains), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	          var chain = _step6.value;

	          var flags = chain.defaultFlags;

	          var _iteratorNormalCompletion7 = true;
	          var _didIteratorError7 = false;
	          var _iteratorError7 = undefined;

	          try {
	            for (var _iterator7 = _getIterator(chain.subtables), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	              var subtable = _step7.value;

	              if (subtable.subFeatureFlags & flags) {
	                this.generateInputsForSubtable(subtable);
	              }
	            }
	          } catch (err) {
	            _didIteratorError7 = true;
	            _iteratorError7 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                _iterator7.return();
	              }
	            } finally {
	              if (_didIteratorError7) {
	                throw _iteratorError7;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError6 = true;
	        _iteratorError6 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion6 && _iterator6.return) {
	            _iterator6.return();
	          }
	        } finally {
	          if (_didIteratorError6) {
	            throw _iteratorError6;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'generateInputsForSubtable',
	    value: function generateInputsForSubtable(subtable) {
	      var _this = this;

	      // Currently, only supporting ligature subtables.
	      if (subtable.type !== 2) {
	        return;
	      }

	      var reverse = !!(subtable.coverage & REVERSE_DIRECTION);
	      if (reverse) {
	        throw new Error('Reverse subtable, not supported.');
	      }

	      this.subtable = subtable;
	      this.ligatureStack = [];

	      var stateMachine = this.getStateMachine(subtable);
	      var process = this.getProcessor();

	      var input = [];
	      var stack = [];
	      this.glyphs = [];

	      stateMachine.traverse({
	        enter: function enter(glyph, entry) {
	          var glyphs = _this.glyphs;
	          stack.push({
	            glyphs: glyphs.slice(),
	            ligatureStack: _this.ligatureStack.slice()
	          });

	          // Add glyph to input and glyphs to process.
	          var g = _this.font.getGlyph(glyph);
	          input.push(g);
	          glyphs.push(input[input.length - 1]);

	          // Process ligature substitution
	          process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);

	          // Add input to result if only one matching (non-deleted) glyph remains.
	          var count = 0;
	          var found = 0;
	          for (var i = 0; i < glyphs.length && count <= 1; i++) {
	            if (glyphs[i].id !== 0xffff) {
	              count++;
	              found = glyphs[i].id;
	            }
	          }

	          if (count === 1) {
	            var result = input.map(function (g) {
	              return g.id;
	            });
	            var _cache = _this.inputCache[found];
	            if (_cache) {
	              _cache.push(result);
	            } else {
	              _this.inputCache[found] = [result];
	            }
	          }
	        },

	        exit: function exit() {
	          var _stack$pop = stack.pop();

	          _this.glyphs = _stack$pop.glyphs;
	          _this.ligatureStack = _stack$pop.ligatureStack;

	          input.pop();
	        }
	      });
	    }
	  }]);

	  return AATMorxProcessor;
	}(), (_applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], _Object$getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype)), _class$2);

	function swap(glyphs, rangeA, rangeB) {
	  var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
	  if (reverseB) {
	    end.reverse();
	  }

	  var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(_toConsumableArray(end)));
	  if (reverseA) {
	    start.reverse();
	  }

	  glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(_toConsumableArray(start)));
	  return glyphs;
	}

	function reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
	  var length = lastGlyph - firstGlyph + 1;
	  switch (verb) {
	    case 0:
	      // no change
	      return glyphs;

	    case 1:
	      // Ax => xA
	      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);

	    case 2:
	      // xD => Dx
	      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);

	    case 3:
	      // AxD => DxA
	      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);

	    case 4:
	      // ABx => xAB
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);

	    case 5:
	      // ABx => xBA
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);

	    case 6:
	      // xCD => CDx
	      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);

	    case 7:
	      // xCD => DCx
	      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);

	    case 8:
	      // AxCD => CDxA
	      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);

	    case 9:
	      // AxCD => DCxA
	      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);

	    case 10:
	      // ABxD => DxAB
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);

	    case 11:
	      // ABxD => DxBA
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);

	    case 12:
	      // ABxCD => CDxAB
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);

	    case 13:
	      // ABxCD => CDxBA
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);

	    case 14:
	      // ABxCD => DCxAB
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);

	    case 15:
	      // ABxCD => DCxBA
	      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);

	    default:
	      throw new Error('Unknown verb: ' + verb);
	  }
	}

	var AATLayoutEngine = function () {
	  function AATLayoutEngine(font) {
	    _classCallCheck(this, AATLayoutEngine);

	    this.font = font;
	    this.morxProcessor = new AATMorxProcessor(font);
	  }

	  _createClass(AATLayoutEngine, [{
	    key: 'substitute',
	    value: function substitute(glyphs, features, script, language) {
	      // AAT expects the glyphs to be in visual order prior to morx processing,
	      // so reverse the glyphs if the script is right-to-left.
	      var isRTL = direction(script) === 'rtl';
	      if (isRTL) {
	        glyphs.reverse();
	      }

	      this.morxProcessor.process(glyphs, mapOTToAAT(features));
	      return glyphs;
	    }
	  }, {
	    key: 'getAvailableFeatures',
	    value: function getAvailableFeatures(script, language) {
	      return mapAATToOT(this.morxProcessor.getSupportedFeatures());
	    }
	  }, {
	    key: 'stringsForGlyph',
	    value: function stringsForGlyph(gid) {
	      var glyphStrings = this.morxProcessor.generateInputs(gid);
	      var result = new _Set();

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(glyphStrings), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var glyphs = _step.value;

	          this._addStrings(glyphs, 0, result, '');
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return result;
	    }
	  }, {
	    key: '_addStrings',
	    value: function _addStrings(glyphs, index, strings, string) {
	      var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(codePoints), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var codePoint = _step2.value;

	          var s = string + _String$fromCodePoint(codePoint);
	          if (index < glyphs.length - 1) {
	            this._addStrings(glyphs, index + 1, strings, s);
	          } else {
	            strings.add(s);
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }
	  }]);

	  return AATLayoutEngine;
	}();

	/**
	 * ShapingPlans are used by the OpenType shapers to store which
	 * features should by applied, and in what order to apply them.
	 * The features are applied in groups called stages. A feature
	 * can be applied globally to all glyphs, or locally to only
	 * specific glyphs.
	 *
	 * @private
	 */

	var ShapingPlan = function () {
	  function ShapingPlan(font, script, language) {
	    _classCallCheck(this, ShapingPlan);

	    this.font = font;
	    this.script = script;
	    this.language = language;
	    this.direction = direction(script);
	    this.stages = [];
	    this.globalFeatures = {};
	    this.allFeatures = {};
	  }

	  /**
	   * Adds the given features to the last stage.
	   * Ignores features that have already been applied.
	   */


	  _createClass(ShapingPlan, [{
	    key: '_addFeatures',
	    value: function _addFeatures(features) {
	      var stage = this.stages[this.stages.length - 1];
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(features), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var feature = _step.value;

	          if (!this.allFeatures[feature]) {
	            stage.push(feature);
	            this.allFeatures[feature] = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }

	    /**
	     * Adds the given features to the global list
	     */

	  }, {
	    key: '_addGlobal',
	    value: function _addGlobal(features) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(features), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var feature = _step2.value;

	          this.globalFeatures[feature] = true;
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }

	    /**
	     * Add features to the last stage
	     */

	  }, {
	    key: 'add',
	    value: function add(arg) {
	      var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      if (this.stages.length === 0) {
	        this.stages.push([]);
	      }

	      if (typeof arg === 'string') {
	        arg = [arg];
	      }

	      if (Array.isArray(arg)) {
	        this._addFeatures(arg);
	        if (global) {
	          this._addGlobal(arg);
	        }
	      } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
	        var features = (arg.global || []).concat(arg.local || []);
	        this._addFeatures(features);
	        if (arg.global) {
	          this._addGlobal(arg.global);
	        }
	      } else {
	        throw new Error("Unsupported argument to ShapingPlan#add");
	      }
	    }

	    /**
	     * Add a new stage
	     */

	  }, {
	    key: 'addStage',
	    value: function addStage(arg, global) {
	      if (typeof arg === 'function') {
	        this.stages.push(arg, []);
	      } else {
	        this.stages.push([]);
	        this.add(arg, global);
	      }
	    }

	    /**
	     * Assigns the global features to the given glyphs
	     */

	  }, {
	    key: 'assignGlobalFeatures',
	    value: function assignGlobalFeatures(glyphs) {
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = _getIterator(glyphs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var glyph = _step3.value;

	          for (var feature in this.globalFeatures) {
	            glyph.features[feature] = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	    }

	    /**
	     * Executes the planned stages using the given OTProcessor
	     */

	  }, {
	    key: 'process',
	    value: function process(processor, glyphs, positions) {
	      processor.selectScript(this.script, this.language);

	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = _getIterator(this.stages), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var stage = _step4.value;

	          if (typeof stage === 'function') {
	            if (!positions) {
	              stage(this.font, glyphs, positions);
	            }
	          } else if (stage.length > 0) {
	            processor.applyFeatures(stage, glyphs, positions);
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }
	    }
	  }]);

	  return ShapingPlan;
	}();

	var _class$4;
	var _temp;
	var COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];
	var FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];
	var HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];
	var DIRECTIONAL_FEATURES = {
	  ltr: ['ltra', 'ltrm'],
	  rtl: ['rtla', 'rtlm']
	};

	var DefaultShaper = (_temp = _class$4 = function () {
	  function DefaultShaper() {
	    _classCallCheck(this, DefaultShaper);
	  }

	  _createClass(DefaultShaper, null, [{
	    key: 'plan',
	    value: function plan(_plan, glyphs, features) {
	      // Plan the features we want to apply
	      this.planPreprocessing(_plan);
	      this.planFeatures(_plan);
	      this.planPostprocessing(_plan, features);

	      // Assign the global features to all the glyphs
	      _plan.assignGlobalFeatures(glyphs);

	      // Assign local features to glyphs
	      this.assignFeatures(_plan, glyphs);
	    }
	  }, {
	    key: 'planPreprocessing',
	    value: function planPreprocessing(plan) {
	      plan.add({
	        global: DIRECTIONAL_FEATURES[plan.direction],
	        local: FRACTIONAL_FEATURES
	      });
	    }
	  }, {
	    key: 'planFeatures',
	    value: function planFeatures(plan) {
	      // Do nothing by default. Let subclasses override this.
	    }
	  }, {
	    key: 'planPostprocessing',
	    value: function planPostprocessing(plan, userFeatures) {
	      plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES, _toConsumableArray(userFeatures)));
	    }
	  }, {
	    key: 'assignFeatures',
	    value: function assignFeatures(plan, glyphs) {
	      // Enable contextual fractions
	      var i = 0;
	      while (i < glyphs.length) {
	        var glyph = glyphs[i];
	        if (glyph.codePoints[0] === 0x2044) {
	          // fraction slash
	          var start = i - 1;
	          var end = i + 1;

	          // Apply numerator
	          while (start >= 0 && unicode.isDigit(glyphs[start].codePoints[0])) {
	            glyphs[start].features.numr = true;
	            glyphs[start].features.frac = true;
	            start--;
	          }

	          // Apply denominator
	          while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {
	            glyphs[end].features.dnom = true;
	            glyphs[end].features.frac = true;
	            end++;
	          }

	          // Apply fraction slash
	          glyph.features.frac = true;
	          i = end - 1;
	        } else {
	          i++;
	        }
	      }
	    }
	  }]);

	  return DefaultShaper;
	}(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);

	var trie = new UnicodeTrie(__webpack_require__(10).readFileSync(__dirname + '/data.trie'));
	var FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];

	var ShapingClasses = {
	  Non_Joining: 0,
	  Left_Joining: 1,
	  Right_Joining: 2,
	  Dual_Joining: 3,
	  Join_Causing: 3,
	  ALAPH: 4,
	  'DALATH RISH': 5,
	  Transparent: 6
	};

	var ISOL = 'isol';
	var FINA = 'fina';
	var FIN2 = 'fin2';
	var FIN3 = 'fin3';
	var MEDI = 'medi';
	var MED2 = 'med2';
	var INIT = 'init';
	var NONE = null;

	// Each entry is [prevAction, curAction, nextState]
	var STATE_TABLE = [
	//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
	// State 0: prev was U,  not willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]],

	// State 1: prev was R or ISOL/ALAPH,  not willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]],

	// State 2: prev was D/L in ISOL form,  willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]],

	// State 3: prev was D in FINA form,  willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]],

	// State 4: prev was FINA ALAPH,  not willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]],

	// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]],

	// State 6: prev was DALATH/RISH,  not willing to join.
	[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];

	/**
	 * This is a shaper for Arabic, and other cursive scripts.
	 * It uses data from ArabicShaping.txt in the Unicode database,
	 * compiled to a UnicodeTrie by generate-data.coffee.
	 *
	 * The shaping state machine was ported from Harfbuzz.
	 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc
	 */

	var ArabicShaper = function (_DefaultShaper) {
	  _inherits(ArabicShaper, _DefaultShaper);

	  function ArabicShaper() {
	    _classCallCheck(this, ArabicShaper);

	    return _possibleConstructorReturn(this, (ArabicShaper.__proto__ || _Object$getPrototypeOf(ArabicShaper)).apply(this, arguments));
	  }

	  _createClass(ArabicShaper, null, [{
	    key: 'planFeatures',
	    value: function planFeatures(plan) {
	      plan.add(['ccmp', 'locl']);
	      for (var i = 0; i < FEATURES.length; i++) {
	        var feature = FEATURES[i];
	        plan.addStage(feature, false);
	      }

	      plan.addStage('mset');
	    }
	  }, {
	    key: 'assignFeatures',
	    value: function assignFeatures(plan, glyphs) {
	      _get(ArabicShaper.__proto__ || _Object$getPrototypeOf(ArabicShaper), 'assignFeatures', this).call(this, plan, glyphs);

	      var prev = -1;
	      var state = 0;
	      var actions = [];

	      // Apply the state machine to map glyphs to features
	      for (var i = 0; i < glyphs.length; i++) {
	        var curAction = void 0,
	            prevAction = void 0;
	        var glyph = glyphs[i];
	        var type = getShapingClass(glyph.codePoints[0]);
	        if (type === ShapingClasses.Transparent) {
	          actions[i] = NONE;
	          continue;
	        }

	        var _STATE_TABLE$state$ty = _slicedToArray(STATE_TABLE[state][type], 3);

	        prevAction = _STATE_TABLE$state$ty[0];
	        curAction = _STATE_TABLE$state$ty[1];
	        state = _STATE_TABLE$state$ty[2];


	        if (prevAction !== NONE && prev !== -1) {
	          actions[prev] = prevAction;
	        }

	        actions[i] = curAction;
	        prev = i;
	      }

	      // Apply the chosen features to their respective glyphs
	      for (var index = 0; index < glyphs.length; index++) {
	        var feature = void 0;
	        var glyph = glyphs[index];
	        if (feature = actions[index]) {
	          glyph.features[feature] = true;
	        }
	      }
	    }
	  }]);

	  return ArabicShaper;
	}(DefaultShaper);

	function getShapingClass(codePoint) {
	  var res = trie.get(codePoint);
	  if (res) {
	    return res - 1;
	  }

	  var category = unicode.getCategory(codePoint);
	  if (category === 'Mn' || category === 'Me' || category === 'Cf') {
	    return ShapingClasses.Transparent;
	  }

	  return ShapingClasses.Non_Joining;
	}

	var GlyphIterator = function () {
	  function GlyphIterator(glyphs, flags) {
	    _classCallCheck(this, GlyphIterator);

	    this.glyphs = glyphs;
	    this.reset(flags);
	  }

	  _createClass(GlyphIterator, [{
	    key: "reset",
	    value: function reset() {
	      var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      this.flags = flags;
	      this.index = 0;
	    }
	  }, {
	    key: "shouldIgnore",
	    value: function shouldIgnore(glyph, flags) {
	      return flags.ignoreMarks && glyph.isMark || flags.ignoreBaseGlyphs && !glyph.isMark || flags.ignoreLigatures && glyph.isLigature;
	    }
	  }, {
	    key: "move",
	    value: function move(dir) {
	      this.index += dir;
	      while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index], this.flags)) {
	        this.index += dir;
	      }

	      if (0 > this.index || this.index >= this.glyphs.length) {
	        return null;
	      }

	      return this.glyphs[this.index];
	    }
	  }, {
	    key: "next",
	    value: function next() {
	      return this.move(+1);
	    }
	  }, {
	    key: "prev",
	    value: function prev() {
	      return this.move(-1);
	    }
	  }, {
	    key: "peek",
	    value: function peek() {
	      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	      var idx = this.index;
	      var res = this.increment(count);
	      this.index = idx;
	      return res;
	    }
	  }, {
	    key: "peekIndex",
	    value: function peekIndex() {
	      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	      var idx = this.index;
	      this.increment(count);
	      var res = this.index;
	      this.index = idx;
	      return res;
	    }
	  }, {
	    key: "increment",
	    value: function increment() {
	      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	      var dir = count < 0 ? -1 : 1;
	      count = Math.abs(count);
	      while (count--) {
	        this.move(dir);
	      }

	      return this.glyphs[this.index];
	    }
	  }, {
	    key: "cur",
	    get: function get() {
	      return this.glyphs[this.index] || null;
	    }
	  }]);

	  return GlyphIterator;
	}();

	var DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];

	var OTProcessor = function () {
	  function OTProcessor(font, table) {
	    _classCallCheck(this, OTProcessor);

	    this.font = font;
	    this.table = table;

	    this.script = null;
	    this.scriptTag = null;

	    this.language = null;
	    this.languageTag = null;

	    this.features = {};
	    this.lookups = {};

	    // initialize to default script + language
	    this.selectScript();

	    // current context (set by applyFeatures)
	    this.glyphs = [];
	    this.positions = []; // only used by GPOS
	    this.ligatureID = 1;
	  }

	  _createClass(OTProcessor, [{
	    key: 'findScript',
	    value: function findScript(script) {
	      if (this.table.scriptList == null) {
	        return null;
	      }

	      if (!Array.isArray(script)) {
	        script = [script];
	      }

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.table.scriptList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var entry = _step.value;
	          var _iteratorNormalCompletion2 = true;
	          var _didIteratorError2 = false;
	          var _iteratorError2 = undefined;

	          try {
	            for (var _iterator2 = _getIterator(script), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	              var s = _step2.value;

	              if (entry.tag === s) {
	                return entry;
	              }
	            }
	          } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	              }
	            } finally {
	              if (_didIteratorError2) {
	                throw _iteratorError2;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return null;
	    }
	  }, {
	    key: 'selectScript',
	    value: function selectScript(script, language) {
	      var changed = false;
	      var entry = void 0;
	      if (!this.script || script !== this.scriptTag) {
	        entry = this.findScript(script);
	        if (script) {
	          entry = this.findScript(script);
	        }

	        if (!entry) {
	          entry = this.findScript(DEFAULT_SCRIPTS);
	        }

	        if (!entry) {
	          return;
	        }

	        this.scriptTag = entry.tag;
	        this.script = entry.script;
	        this.direction = direction(script);
	        this.language = null;
	        changed = true;
	      }

	      if (!language && language !== this.langugeTag) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = _getIterator(this.script.langSysRecords), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var lang = _step3.value;

	            if (lang.tag === language) {
	              this.language = lang.langSys;
	              this.langugeTag = lang.tag;
	              changed = true;
	              break;
	            }
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }
	      }

	      if (!this.language) {
	        this.language = this.script.defaultLangSys;
	      }

	      // Build a feature lookup table
	      if (changed) {
	        this.features = {};
	        if (this.language) {
	          var _iteratorNormalCompletion4 = true;
	          var _didIteratorError4 = false;
	          var _iteratorError4 = undefined;

	          try {
	            for (var _iterator4 = _getIterator(this.language.featureIndexes), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	              var featureIndex = _step4.value;

	              var record = this.table.featureList[featureIndex];
	              this.features[record.tag] = record.feature;
	            }
	          } catch (err) {
	            _didIteratorError4 = true;
	            _iteratorError4 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                _iterator4.return();
	              }
	            } finally {
	              if (_didIteratorError4) {
	                throw _iteratorError4;
	              }
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'lookupsForFeatures',
	    value: function lookupsForFeatures() {
	      var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	      var exclude = arguments[1];

	      var lookups = [];
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;

	      try {
	        for (var _iterator5 = _getIterator(userFeatures), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          var tag = _step5.value;

	          var feature = this.features[tag];
	          if (!feature) {
	            continue;
	          }

	          var _iteratorNormalCompletion6 = true;
	          var _didIteratorError6 = false;
	          var _iteratorError6 = undefined;

	          try {
	            for (var _iterator6 = _getIterator(feature.lookupListIndexes), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	              var lookupIndex = _step6.value;

	              if (exclude && exclude.indexOf(lookupIndex) !== -1) {
	                continue;
	              }

	              lookups.push({
	                feature: tag,
	                index: lookupIndex,
	                lookup: this.table.lookupList.get(lookupIndex)
	              });
	            }
	          } catch (err) {
	            _didIteratorError6 = true;
	            _iteratorError6 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                _iterator6.return();
	              }
	            } finally {
	              if (_didIteratorError6) {
	                throw _iteratorError6;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }

	      lookups.sort(function (a, b) {
	        return a.index - b.index;
	      });
	      return lookups;
	    }
	  }, {
	    key: 'applyFeatures',
	    value: function applyFeatures(userFeatures, glyphs, advances) {
	      var lookups = this.lookupsForFeatures(userFeatures);
	      this.applyLookups(lookups, glyphs, advances);
	    }
	  }, {
	    key: 'applyLookups',
	    value: function applyLookups(lookups, glyphs, positions) {
	      this.glyphs = glyphs;
	      this.positions = positions;
	      this.glyphIterator = new GlyphIterator(glyphs);

	      var _iteratorNormalCompletion7 = true;
	      var _didIteratorError7 = false;
	      var _iteratorError7 = undefined;

	      try {
	        for (var _iterator7 = _getIterator(lookups), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	          var _step7$value = _step7.value,
	              feature = _step7$value.feature,
	              lookup = _step7$value.lookup;

	          this.glyphIterator.reset(lookup.flags);

	          while (this.glyphIterator.index < glyphs.length) {
	            if (!(feature in this.glyphIterator.cur.features)) {
	              this.glyphIterator.next();
	              continue;
	            }

	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	              for (var _iterator8 = _getIterator(lookup.subTables), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                var table = _step8.value;

	                var res = this.applyLookup(lookup.lookupType, table);
	                if (res) {
	                  break;
	                }
	              }
	            } catch (err) {
	              _didIteratorError8 = true;
	              _iteratorError8 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                  _iterator8.return();
	                }
	              } finally {
	                if (_didIteratorError8) {
	                  throw _iteratorError8;
	                }
	              }
	            }

	            this.glyphIterator.next();
	          }
	        }
	      } catch (err) {
	        _didIteratorError7 = true;
	        _iteratorError7 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion7 && _iterator7.return) {
	            _iterator7.return();
	          }
	        } finally {
	          if (_didIteratorError7) {
	            throw _iteratorError7;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'applyLookup',
	    value: function applyLookup(lookup, table) {
	      throw new Error("applyLookup must be implemented by subclasses");
	    }
	  }, {
	    key: 'applyLookupList',
	    value: function applyLookupList(lookupRecords) {
	      var glyphIndex = this.glyphIterator.index;

	      var _iteratorNormalCompletion9 = true;
	      var _didIteratorError9 = false;
	      var _iteratorError9 = undefined;

	      try {
	        for (var _iterator9 = _getIterator(lookupRecords), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	          var lookupRecord = _step9.value;

	          this.glyphIterator.index = glyphIndex;
	          this.glyphIterator.increment(lookupRecord.sequenceIndex);

	          var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
	          var _iteratorNormalCompletion10 = true;
	          var _didIteratorError10 = false;
	          var _iteratorError10 = undefined;

	          try {
	            for (var _iterator10 = _getIterator(lookup.subTables), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	              var table = _step10.value;

	              this.applyLookup(lookup.lookupType, table);
	            }
	          } catch (err) {
	            _didIteratorError10 = true;
	            _iteratorError10 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                _iterator10.return();
	              }
	            } finally {
	              if (_didIteratorError10) {
	                throw _iteratorError10;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError9 = true;
	        _iteratorError9 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion9 && _iterator9.return) {
	            _iterator9.return();
	          }
	        } finally {
	          if (_didIteratorError9) {
	            throw _iteratorError9;
	          }
	        }
	      }

	      this.glyphIterator.index = glyphIndex;
	      return true;
	    }
	  }, {
	    key: 'coverageIndex',
	    value: function coverageIndex(coverage, glyph) {
	      if (glyph == null) {
	        glyph = this.glyphIterator.cur.id;
	      }

	      switch (coverage.version) {
	        case 1:
	          return coverage.glyphs.indexOf(glyph);

	        case 2:
	          var _iteratorNormalCompletion11 = true;
	          var _didIteratorError11 = false;
	          var _iteratorError11 = undefined;

	          try {
	            for (var _iterator11 = _getIterator(coverage.rangeRecords), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	              var range = _step11.value;

	              if (range.start <= glyph && glyph <= range.end) {
	                return range.startCoverageIndex + glyph - range.start;
	              }
	            }
	          } catch (err) {
	            _didIteratorError11 = true;
	            _iteratorError11 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion11 && _iterator11.return) {
	                _iterator11.return();
	              }
	            } finally {
	              if (_didIteratorError11) {
	                throw _iteratorError11;
	              }
	            }
	          }

	          break;
	      }

	      return -1;
	    }
	  }, {
	    key: 'match',
	    value: function match(sequenceIndex, sequence, fn, matched) {
	      var pos = this.glyphIterator.index;
	      var glyph = this.glyphIterator.increment(sequenceIndex);
	      var idx = 0;

	      while (idx < sequence.length && glyph && fn(sequence[idx], glyph.id)) {
	        if (matched) {
	          matched.push(this.glyphIterator.index);
	        }

	        idx++;
	        glyph = this.glyphIterator.next();
	      }

	      this.glyphIterator.index = pos;
	      if (idx < sequence.length) {
	        return false;
	      }

	      return matched || true;
	    }
	  }, {
	    key: 'sequenceMatches',
	    value: function sequenceMatches(sequenceIndex, sequence) {
	      return this.match(sequenceIndex, sequence, function (component, glyph) {
	        return component === glyph;
	      });
	    }
	  }, {
	    key: 'sequenceMatchIndices',
	    value: function sequenceMatchIndices(sequenceIndex, sequence) {
	      return this.match(sequenceIndex, sequence, function (component, glyph) {
	        return component === glyph;
	      }, []);
	    }
	  }, {
	    key: 'coverageSequenceMatches',
	    value: function coverageSequenceMatches(sequenceIndex, sequence) {
	      var _this = this;

	      return this.match(sequenceIndex, sequence, function (coverage, glyph) {
	        return _this.coverageIndex(coverage, glyph) >= 0;
	      });
	    }
	  }, {
	    key: 'getClassID',
	    value: function getClassID(glyph, classDef) {
	      switch (classDef.version) {
	        case 1:
	          // Class array
	          var i = glyph - classDef.startGlyph;
	          if (i < classDef.classValueArray.length) {
	            return classDef.classValueArray[i];
	          }

	          break;

	        case 2:
	          var _iteratorNormalCompletion12 = true;
	          var _didIteratorError12 = false;
	          var _iteratorError12 = undefined;

	          try {
	            for (var _iterator12 = _getIterator(classDef.classRangeRecord), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	              var range = _step12.value;

	              if (range.start <= glyph && glyph <= range.end) {
	                return range.class;
	              }
	            }
	          } catch (err) {
	            _didIteratorError12 = true;
	            _iteratorError12 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion12 && _iterator12.return) {
	                _iterator12.return();
	              }
	            } finally {
	              if (_didIteratorError12) {
	                throw _iteratorError12;
	              }
	            }
	          }

	          break;
	      }

	      return 0;
	    }
	  }, {
	    key: 'classSequenceMatches',
	    value: function classSequenceMatches(sequenceIndex, sequence, classDef) {
	      var _this2 = this;

	      return this.match(sequenceIndex, sequence, function (classID, glyph) {
	        return classID === _this2.getClassID(glyph, classDef);
	      });
	    }
	  }, {
	    key: 'applyContext',
	    value: function applyContext(table) {
	      switch (table.version) {
	        case 1:
	          var index = this.coverageIndex(table.coverage);
	          if (index === -1) {
	            return false;
	          }

	          var set = table.ruleSets[index];
	          var _iteratorNormalCompletion13 = true;
	          var _didIteratorError13 = false;
	          var _iteratorError13 = undefined;

	          try {
	            for (var _iterator13 = _getIterator(set), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	              var rule = _step13.value;

	              if (this.sequenceMatches(1, rule.input)) {
	                return this.applyLookupList(rule.lookupRecords);
	              }
	            }
	          } catch (err) {
	            _didIteratorError13 = true;
	            _iteratorError13 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion13 && _iterator13.return) {
	                _iterator13.return();
	              }
	            } finally {
	              if (_didIteratorError13) {
	                throw _iteratorError13;
	              }
	            }
	          }

	          break;

	        case 2:
	          if (this.coverageIndex(table.coverage) === -1) {
	            return false;
	          }

	          index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
	          if (index === -1) {
	            return false;
	          }

	          set = table.classSet[index];
	          var _iteratorNormalCompletion14 = true;
	          var _didIteratorError14 = false;
	          var _iteratorError14 = undefined;

	          try {
	            for (var _iterator14 = _getIterator(set), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
	              var _rule = _step14.value;

	              if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {
	                return this.applyLookupList(_rule.lookupRecords);
	              }
	            }
	          } catch (err) {
	            _didIteratorError14 = true;
	            _iteratorError14 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion14 && _iterator14.return) {
	                _iterator14.return();
	              }
	            } finally {
	              if (_didIteratorError14) {
	                throw _iteratorError14;
	              }
	            }
	          }

	          break;

	        case 3:
	          if (this.coverageSequenceMatches(0, table.coverages)) {
	            return this.applyLookupList(table.lookupRecords);
	          }

	          break;
	      }

	      return false;
	    }
	  }, {
	    key: 'applyChainingContext',
	    value: function applyChainingContext(table) {
	      switch (table.version) {
	        case 1:
	          var index = this.coverageIndex(table.coverage);
	          if (index === -1) {
	            return false;
	          }

	          var set = table.chainRuleSets[index];
	          var _iteratorNormalCompletion15 = true;
	          var _didIteratorError15 = false;
	          var _iteratorError15 = undefined;

	          try {
	            for (var _iterator15 = _getIterator(set), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
	              var rule = _step15.value;

	              if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {
	                return this.applyLookupList(rule.lookupRecords);
	              }
	            }
	          } catch (err) {
	            _didIteratorError15 = true;
	            _iteratorError15 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion15 && _iterator15.return) {
	                _iterator15.return();
	              }
	            } finally {
	              if (_didIteratorError15) {
	                throw _iteratorError15;
	              }
	            }
	          }

	          break;

	        case 2:
	          if (this.coverageIndex(table.coverage) === -1) {
	            return false;
	          }

	          index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
	          var rules = table.chainClassSet[index];
	          if (!rules) {
	            return false;
	          }

	          var _iteratorNormalCompletion16 = true;
	          var _didIteratorError16 = false;
	          var _iteratorError16 = undefined;

	          try {
	            for (var _iterator16 = _getIterator(rules), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
	              var _rule2 = _step16.value;

	              if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {
	                return this.applyLookupList(_rule2.lookupRecords);
	              }
	            }
	          } catch (err) {
	            _didIteratorError16 = true;
	            _iteratorError16 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion16 && _iterator16.return) {
	                _iterator16.return();
	              }
	            } finally {
	              if (_didIteratorError16) {
	                throw _iteratorError16;
	              }
	            }
	          }

	          break;

	        case 3:
	          if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {
	            return this.applyLookupList(table.lookupRecords);
	          }

	          break;
	      }

	      return false;
	    }
	  }]);

	  return OTProcessor;
	}();

	var GlyphInfo = function () {
	  function GlyphInfo(font, id) {
	    var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	    var features = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

	    _classCallCheck(this, GlyphInfo);

	    this._font = font;
	    this.codePoints = codePoints;
	    this.id = id;

	    this.features = {};
	    if (Array.isArray(features)) {
	      for (var i = 0; i < features.length; i++) {
	        var feature = features[i];
	        this.features[feature] = true;
	      }
	    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
	      _Object$assign(this.features, features);
	    }

	    this.ligatureID = null;
	    this.ligatureComponent = null;
	    this.ligated = false;
	    this.cursiveAttachment = null;
	    this.markAttachment = null;
	    this.shaperInfo = null;
	    this.substituted = false;
	  }

	  _createClass(GlyphInfo, [{
	    key: 'id',
	    get: function get() {
	      return this._id;
	    },
	    set: function set(id) {
	      this._id = id;
	      this.substituted = true;

	      if (this._font.GDEF) {
	        // TODO: clean this up
	        var classID = OTProcessor.prototype.getClassID(id, this._font.GDEF.glyphClassDef);
	        this.isMark = classID === 3;
	        this.isLigature = classID === 2;
	      } else {
	        this.isMark = this.codePoints.every(unicode.isMark);
	        this.isLigature = this.codePoints.length > 1;
	      }
	    }
	  }]);

	  return GlyphInfo;
	}();

	var _class$5;
	var _temp$1;
	/**
	 * This is a shaper for the Hangul script, used by the Korean language.
	 * It does the following:
	 *   - decompose if unsupported by the font:
	 *     <LV>   -> <L,V>
	 *     <LVT>  -> <L,V,T>
	 *     <LV,T> -> <L,V,T>
	 *
	 *   - compose if supported by the font:
	 *     <L,V>   -> <LV>
	 *     <L,V,T> -> <LVT>
	 *     <LV,T>  -> <LVT>
	 *
	 *   - reorder tone marks (S is any valid syllable):
	 *     <S, M> -> <M, S>
	 *
	 *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.
	 *
	 * This logic is based on the following documents:
	 *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm
	 *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf
	 */
	var HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {
	  _inherits(HangulShaper, _DefaultShaper);

	  function HangulShaper() {
	    _classCallCheck(this, HangulShaper);

	    return _possibleConstructorReturn(this, (HangulShaper.__proto__ || _Object$getPrototypeOf(HangulShaper)).apply(this, arguments));
	  }

	  _createClass(HangulShaper, null, [{
	    key: 'planFeatures',
	    value: function planFeatures(plan) {
	      plan.add(['ljmo', 'vjmo', 'tjmo'], false);
	    }
	  }, {
	    key: 'assignFeatures',
	    value: function assignFeatures(plan, glyphs) {
	      var state = 0;
	      var i = 0;
	      while (i < glyphs.length) {
	        var action = void 0;
	        var glyph = glyphs[i];
	        var code = glyph.codePoints[0];
	        var type = getType(code);

	        var _STATE_TABLE$state$ty = _slicedToArray(STATE_TABLE$1[state][type], 2);

	        action = _STATE_TABLE$state$ty[0];
	        state = _STATE_TABLE$state$ty[1];


	        switch (action) {
	          case DECOMPOSE:
	            // Decompose the composed syllable if it is not supported by the font.
	            if (!plan.font.hasGlyphForCodePoint(code)) {
	              i = decompose(glyphs, i, plan.font);
	            }
	            break;

	          case COMPOSE:
	            // Found a decomposed syllable. Try to compose if supported by the font.
	            i = compose(glyphs, i, plan.font);
	            break;

	          case TONE_MARK:
	            // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.
	            reorderToneMark(glyphs, i, plan.font);
	            break;

	          case INVALID:
	            // Tone mark has no valid syllable to attach to, so insert a dotted circle
	            i = insertDottedCircle(glyphs, i, plan.font);
	            break;
	        }

	        i++;
	      }
	    }
	  }]);

	  return HangulShaper;
	}(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);
	var HANGUL_BASE = 0xac00;
	var HANGUL_END = 0xd7a4;
	var HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;
	var L_BASE = 0x1100; // lead
	var V_BASE = 0x1161; // vowel
	var T_BASE = 0x11a7; // trail
	var L_COUNT = 19;
	var V_COUNT = 21;
	var T_COUNT = 28;
	var L_END = L_BASE + L_COUNT - 1;
	var V_END = V_BASE + V_COUNT - 1;
	var T_END = T_BASE + T_COUNT - 1;
	var DOTTED_CIRCLE = 0x25cc;

	var isL = function isL(code) {
	  return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;
	};
	var isV = function isV(code) {
	  return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;
	};
	var isT = function isT(code) {
	  return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;
	};
	var isTone = function isTone(code) {
	  return 0x302e <= code && code <= 0x302f;
	};
	var isLVT = function isLVT(code) {
	  return HANGUL_BASE <= code && code <= HANGUL_END;
	};
	var isLV = function isLV(code) {
	  return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;
	};
	var isCombiningL = function isCombiningL(code) {
	  return L_BASE <= code && code <= L_END;
	};
	var isCombiningV = function isCombiningV(code) {
	  return V_BASE <= code && code <= V_END;
	};
	var isCombiningT = function isCombiningT(code) {
	  return T_BASE + 1 && 1 <= code && code <= T_END;
	};

	// Character categories
	var X = 0; // Other character
	var L = 1; // Leading consonant
	var V = 2; // Medial vowel
	var T = 3; // Trailing consonant
	var LV = 4; // Composed <LV> syllable
	var LVT = 5; // Composed <LVT> syllable
	var M = 6; // Tone mark

	// This function classifies a character using the above categories.
	function getType(code) {
	  if (isL(code)) {
	    return L;
	  }
	  if (isV(code)) {
	    return V;
	  }
	  if (isT(code)) {
	    return T;
	  }
	  if (isLV(code)) {
	    return LV;
	  }
	  if (isLVT(code)) {
	    return LVT;
	  }
	  if (isTone(code)) {
	    return M;
	  }
	  return X;
	}

	// State machine actions
	var NO_ACTION = 0;
	var DECOMPOSE = 1;
	var COMPOSE = 2;
	var TONE_MARK = 4;
	var INVALID = 5;

	// Build a state machine that accepts valid syllables, and applies actions along the way.
	// The logic this is implementing is documented at the top of the file.
	var STATE_TABLE$1 = [
	//       X                 L                 V                T                  LV                LVT               M
	// State 0: start state
	[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],

	// State 1: <L>
	[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],

	// State 2: <L,V> or <LV>
	[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]],

	// State 3: <L,V,T> or <LVT>
	[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];

	function getGlyph(font, code, features) {
	  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);
	}

	function decompose(glyphs, i, font) {
	  var glyph = glyphs[i];
	  var code = glyph.codePoints[0];

	  var s = code - HANGUL_BASE;
	  var t = T_BASE + s % T_COUNT;
	  s = s / T_COUNT | 0;
	  var l = L_BASE + s / V_COUNT | 0;
	  var v = V_BASE + s % V_COUNT;

	  // Don't decompose if all of the components are not available
	  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {
	    return i;
	  }

	  // Replace the current glyph with decomposed L, V, and T glyphs,
	  // and apply the proper OpenType features to each component.
	  var ljmo = getGlyph(font, l, glyph.features);
	  ljmo.features.ljmo = true;

	  var vjmo = getGlyph(font, v, glyph.features);
	  vjmo.features.vjmo = true;

	  var insert = [ljmo, vjmo];

	  if (t > T_BASE) {
	    var tjmo = getGlyph(font, t, glyph.features);
	    tjmo.features.tjmo = true;
	    insert.push(tjmo);
	  }

	  glyphs.splice.apply(glyphs, [i, 1].concat(insert));
	  return i + insert.length - 1;
	}

	function compose(glyphs, i, font) {
	  var glyph = glyphs[i];
	  var code = glyphs[i].codePoints[0];
	  var type = getType(code);

	  var prev = glyphs[i - 1].codePoints[0];
	  var prevType = getType(prev);

	  // Figure out what type of syllable we're dealing with
	  var lv = void 0,
	      ljmo = void 0,
	      vjmo = void 0,
	      tjmo = void 0;
	  if (prevType === LV && type === T) {
	    // <LV,T>
	    lv = prev;
	    tjmo = glyph;
	  } else {
	    if (type === V) {
	      // <L,V>
	      ljmo = glyphs[i - 1];
	      vjmo = glyph;
	    } else {
	      // <L,V,T>
	      ljmo = glyphs[i - 2];
	      vjmo = glyphs[i - 1];
	      tjmo = glyph;
	    }

	    var l = ljmo.codePoints[0];
	    var v = vjmo.codePoints[0];

	    // Make sure L and V are combining characters
	    if (isCombiningL(l) && isCombiningV(v)) {
	      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;
	    }
	  }

	  var t = tjmo && tjmo.codePoints[0] || T_BASE;
	  if (lv != null && (t === T_BASE || isCombiningT(t))) {
	    var s = lv + (t - T_BASE);

	    // Replace with a composed glyph if supported by the font,
	    // otherwise apply the proper OpenType features to each component.
	    if (font.hasGlyphForCodePoint(s)) {
	      var del = prevType === V ? 3 : 2;
	      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));
	      return i - del + 1;
	    }
	  }

	  // Didn't compose (either a non-combining component or unsupported by font).
	  if (ljmo) {
	    ljmo.features.ljmo = true;
	  }
	  if (vjmo) {
	    vjmo.features.vjmo = true;
	  }
	  if (tjmo) {
	    tjmo.features.tjmo = true;
	  }

	  if (prevType === LV) {
	    // Sequence was originally <L,V>, which got combined earlier.
	    // Either the T was non-combining, or the LVT glyph wasn't supported.
	    // Decompose the glyph again and apply OT features.
	    decompose(glyphs, i - 1, font);
	    return i + 1;
	  }

	  return i;
	}

	function getLength(code) {
	  switch (getType(code)) {
	    case LV:
	    case LVT:
	      return 1;
	    case V:
	      return 2;
	    case T:
	      return 3;
	  }
	}

	function reorderToneMark(glyphs, i, font) {
	  var glyph = glyphs[i];
	  var code = glyphs[i].codePoints[0];

	  // Move tone mark to the beginning of the previous syllable, unless it is zero width
	  if (font.glyphForCodePoint(code).advanceWidth === 0) {
	    return;
	  }

	  var prev = glyphs[i - 1].codePoints[0];
	  var len = getLength(prev);

	  glyphs.splice(i, 1);
	  return glyphs.splice(i - len, 0, glyph);
	}

	function insertDottedCircle(glyphs, i, font) {
	  var glyph = glyphs[i];
	  var code = glyphs[i].codePoints[0];

	  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {
	    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);

	    // If the tone mark is zero width, insert the dotted circle before, otherwise after
	    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
	    glyphs.splice(idx, 0, dottedCircle);
	    i++;
	  }

	  return i;
	}

	var categories$1 = ["O", "IND", "S", "GB", "B", "FM", "CGJ", "VMAbv", "VMPst", "VAbv", "VPst", "CMBlw", "VPre", "VBlw", "H", "VMBlw", "CMAbv", "MBlw", "CS", "R", "SUB", "MPst", "MPre", "FAbv", "FPst", "FBlw", "SMAbv", "SMBlw", "VMPre", "ZWNJ", "ZWJ", "WJ", "VS", "N", "HN", "MAbv"];
	var decompositions$1 = { "2507": [2503, 2494], "2508": [2503, 2519], "2888": [2887, 2902], "2891": [2887, 2878], "2892": [2887, 2903], "3018": [3014, 3006], "3019": [3015, 3006], "3020": [3014, 3031], "3144": [3142, 3158], "3264": [3263, 3285], "3271": [3270, 3285], "3272": [3270, 3286], "3274": [3270, 3266], "3275": [3270, 3266, 3285], "3402": [3398, 3390], "3403": [3399, 3390], "3404": [3398, 3415], "3546": [3545, 3530], "3548": [3545, 3535], "3549": [3545, 3535, 3530], "3550": [3545, 3551], "3635": [3661, 3634], "3763": [3789, 3762], "3955": [3953, 3954], "3957": [3953, 3956], "3958": [4018, 3968], "3959": [4018, 3953, 3968], "3960": [4019, 3968], "3961": [4019, 3953, 3968], "3969": [3953, 3968], "6971": [6970, 6965], "6973": [6972, 6965], "6976": [6974, 6965], "6977": [6975, 6965], "6979": [6978, 6965], "69934": [69937, 69927], "69935": [69938, 69927], "70475": [70471, 70462], "70476": [70471, 70487], "70843": [70841, 70842], "70844": [70841, 70832], "70846": [70841, 70845], "71098": [71096, 71087], "71099": [71097, 71087] };
	var stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 2, 0, 23, 0, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 38, 0, 0, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 48, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 0, 0, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 0, 32, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 0, 34, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 0, 32, 0, 0, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 0, 30, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 0, 34, 35, 0, 37, 0, 0, 0, 0, 0, 34, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 0, 34, 35, 0, 37, 0, 39, 0, 0, 0, 34, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45], [0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 0, 34, 35, 0, 37, 0, 39, 0, 0, 0, 34, 0, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 50, 11, 12, 13, 14, 50, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 51, 0, 0, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 53, 34, 35, 36, 37, 53, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 54, 0, 0, 45], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 50, 11, 12, 13, 14, 0, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 50, 11, 12, 13, 14, 50, 16, 0, 0, 0, 11, 18, 19, 20, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 48, 0], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 53, 34, 35, 36, 37, 0, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45], [0, 0, 0, 0, 0, 28, 0, 29, 30, 31, 32, 53, 34, 35, 36, 37, 53, 39, 0, 0, 0, 34, 40, 41, 42, 43, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45]];
	var accepting = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
	var tags = [[], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["virama_terminated_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["broken_cluster"], ["numeral_cluster"], ["number_joiner_terminated_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["standard_cluster"], ["standard_cluster"]];
	var useData = {
		categories: categories$1,
		decompositions: decompositions$1,
		stateTable: stateTable,
		accepting: accepting,
		tags: tags
	};

	var _class$6;
	var _temp$2;
	var categories = useData.categories;
	var decompositions = useData.decompositions;
	var trie$1 = new UnicodeTrie(__webpack_require__(10).readFileSync(__dirname + '/use.trie'));
	var stateMachine = new StateMachine(useData);

	/**
	 * This shaper is an implementation of the Universal Shaping Engine, which
	 * uses Unicode data to shape a number of scripts without a dedicated shaping engine.
	 * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.
	 */
	var UniversalShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {
	  _inherits(UniversalShaper, _DefaultShaper);

	  function UniversalShaper() {
	    _classCallCheck(this, UniversalShaper);

	    return _possibleConstructorReturn(this, (UniversalShaper.__proto__ || _Object$getPrototypeOf(UniversalShaper)).apply(this, arguments));
	  }

	  _createClass(UniversalShaper, null, [{
	    key: 'planFeatures',
	    value: function planFeatures(plan) {
	      plan.addStage(setupSyllables);

	      // Default glyph pre-processing group
	      plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);

	      // Reordering group
	      plan.addStage(clearSubstitutionFlags);
	      plan.addStage(['rphf'], false);
	      plan.addStage(recordRphf);
	      plan.addStage(clearSubstitutionFlags);
	      plan.addStage(['pref']);
	      plan.addStage(recordPref);

	      // Orthographic unit shaping group
	      plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);
	      plan.addStage(reorder);

	      // Topographical features
	      // Scripts that need this are handled by the Arabic shaper, not implemented here for now.
	      // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);

	      // Standard topographic presentation and positional feature application
	      plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);
	    }
	  }, {
	    key: 'assignFeatures',
	    value: function assignFeatures(plan, glyphs) {
	      var _loop = function _loop(i) {
	        var codepoint = glyphs[i].codePoints[0];
	        if (decompositions[codepoint]) {
	          var decomposed = decompositions[codepoint].map(function (c) {
	            var g = plan.font.glyphForCodePoint(c);
	            return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
	          });

	          glyphs.splice.apply(glyphs, [i, 1].concat(_toConsumableArray(decomposed)));
	        }
	      };

	      // Decompose split vowels
	      // TODO: do this in a more general unicode normalizer
	      for (var i = glyphs.length - 1; i >= 0; i--) {
	        _loop(i);
	      }
	    }
	  }]);

	  return UniversalShaper;
	}(DefaultShaper), _class$6.zeroMarkWidths = 'BEFORE_GPOS', _temp$2);
	function useCategory(glyph) {
	  return trie$1.get(glyph.codePoints[0]);
	}

	var USEInfo = function USEInfo(category, syllableType, syllable) {
	  _classCallCheck(this, USEInfo);

	  this.category = category;
	  this.syllableType = syllableType;
	  this.syllable = syllable;
	};

	function setupSyllables(font, glyphs) {
	  var syllable = 0;
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = _getIterator(stateMachine.match(glyphs.map(useCategory))), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var _step$value = _slicedToArray(_step.value, 3),
	          start = _step$value[0],
	          end = _step$value[1],
	          tags = _step$value[2];

	      ++syllable;

	      // Create shaper info
	      for (var i = start; i <= end; i++) {
	        glyphs[i].shaperInfo = new USEInfo(categories[useCategory(glyphs[i])], tags[0], syllable);
	      }

	      // Assign rphf feature
	      var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);
	      for (var _i = start; _i < start + limit; _i++) {
	        glyphs[_i].features.rphf = true;
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	}

	function clearSubstitutionFlags(font, glyphs) {
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = _getIterator(glyphs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var glyph = _step2.value;

	      glyph.substituted = false;
	    }
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }
	}

	function recordRphf(font, glyphs) {
	  var _iteratorNormalCompletion3 = true;
	  var _didIteratorError3 = false;
	  var _iteratorError3 = undefined;

	  try {
	    for (var _iterator3 = _getIterator(glyphs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	      var glyph = _step3.value;

	      if (glyph.substituted && glyph.features.rphf) {
	        // Mark a substituted repha.
	        glyph.shaperInfo.category = 'R';
	      }
	    }
	  } catch (err) {
	    _didIteratorError3 = true;
	    _iteratorError3 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion3 && _iterator3.return) {
	        _iterator3.return();
	      }
	    } finally {
	      if (_didIteratorError3) {
	        throw _iteratorError3;
	      }
	    }
	  }
	}

	function recordPref(font, glyphs) {
	  var _iteratorNormalCompletion4 = true;
	  var _didIteratorError4 = false;
	  var _iteratorError4 = undefined;

	  try {
	    for (var _iterator4 = _getIterator(glyphs), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	      var glyph = _step4.value;

	      if (glyph.substituted) {
	        // Mark a substituted pref as VPre, as they behave the same way.
	        glyph.shaperInfo.category = 'VPre';
	      }
	    }
	  } catch (err) {
	    _didIteratorError4 = true;
	    _iteratorError4 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion4 && _iterator4.return) {
	        _iterator4.return();
	      }
	    } finally {
	      if (_didIteratorError4) {
	        throw _iteratorError4;
	      }
	    }
	  }
	}

	function reorder(font, glyphs) {
	  var dottedCircle = font.glyphForCodePoint(0x25cc).id;

	  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
	    var i = void 0,
	        j = void 0;
	    var info = glyphs[start].shaperInfo;
	    var type = info.syllableType;

	    // Only a few syllable types need reordering.
	    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {
	      continue;
	    }

	    // Insert a dotted circle glyph in broken clusters.
	    if (type === 'broken_cluster' && dottedCircle) {
	      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
	      g.shaperInfo = info;

	      // Insert after possible Repha.
	      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}
	      glyphs.splice(++i, 0, g);
	      end++;
	    }

	    // Move things forward.
	    if (info.category === 'R' && end - start > 1) {
	      // Got a repha. Reorder it to after first base, before first halant.
	      for (i = start + 1; i < end; i++) {
	        info = glyphs[i].shaperInfo;
	        if (isBase(info) || isHalant(glyphs[i])) {
	          // If we hit a halant, move before it; otherwise it's a base: move to it's
	          // place, and shift things in between backward.
	          if (isHalant(glyphs[i])) {
	            i--;
	          }

	          glyphs.splice.apply(glyphs, [start, 0].concat(_toConsumableArray(glyphs.splice(start + 1, i - start)), [glyphs[i]]));
	          break;
	        }
	      }
	    }

	    // Move things back.
	    for (i = start, j = end; i < end; i++) {
	      info = glyphs[i].shaperInfo;
	      if (isBase(info) || isHalant(glyphs[i])) {
	        // If we hit a halant, move after it; otherwise it's a base: move to it's
	        // place, and shift things in between backward.
	        j = isHalant(glyphs[i]) ? i + 1 : i;
	      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {
	        glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(_toConsumableArray(glyphs.splice(j, i - j))));
	      }
	    }
	  }
	}

	function nextSyllable(glyphs, start) {
	  if (start >= glyphs.length) return start;
	  var syllable = glyphs[start].shaperInfo.syllable;
	  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}
	  return start;
	}

	function isHalant(glyph) {
	  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;
	}

	function isBase(info) {
	  return info.category === 'B' || info.category === 'GB';
	}

	var SHAPERS = {
	  arab: ArabicShaper, // Arabic
	  mong: ArabicShaper, // Mongolian
	  syrc: ArabicShaper, // Syriac
	  'nko ': ArabicShaper, // N'Ko
	  phag: ArabicShaper, // Phags Pa
	  mand: ArabicShaper, // Mandaic
	  mani: ArabicShaper, // Manichaean
	  phlp: ArabicShaper, // Psalter Pahlavi

	  hang: HangulShaper, // Hangul

	  bali: UniversalShaper, // Balinese
	  batk: UniversalShaper, // Batak
	  brah: UniversalShaper, // Brahmi
	  bugi: UniversalShaper, // Buginese
	  buhd: UniversalShaper, // Buhid
	  cakm: UniversalShaper, // Chakma
	  cham: UniversalShaper, // Cham
	  dupl: UniversalShaper, // Duployan
	  egyp: UniversalShaper, // Egyptian Hieroglyphs
	  gran: UniversalShaper, // Grantha
	  hano: UniversalShaper, // Hanunoo
	  java: UniversalShaper, // Javanese
	  kthi: UniversalShaper, // Kaithi
	  kali: UniversalShaper, // Kayah Li
	  khar: UniversalShaper, // Kharoshthi
	  khoj: UniversalShaper, // Khojki
	  sind: UniversalShaper, // Khudawadi
	  lepc: UniversalShaper, // Lepcha
	  limb: UniversalShaper, // Limbu
	  mahj: UniversalShaper, // Mahajani
	  // mand: UniversalShaper, // Mandaic
	  // mani: UniversalShaper, // Manichaean
	  mtei: UniversalShaper, // Meitei Mayek
	  modi: UniversalShaper, // Modi
	  // mong: UniversalShaper, // Mongolian
	  // 'nko ': UniversalShaper, // N’Ko
	  hmng: UniversalShaper, // Pahawh Hmong
	  // phag: UniversalShaper, // Phags-pa
	  // phlp: UniversalShaper, // Psalter Pahlavi
	  rjng: UniversalShaper, // Rejang
	  saur: UniversalShaper, // Saurashtra
	  shrd: UniversalShaper, // Sharada
	  sidd: UniversalShaper, // Siddham
	  sinh: UniversalShaper, // Sinhala
	  sund: UniversalShaper, // Sundanese
	  sylo: UniversalShaper, // Syloti Nagri
	  tglg: UniversalShaper, // Tagalog
	  tagb: UniversalShaper, // Tagbanwa
	  tale: UniversalShaper, // Tai Le
	  lana: UniversalShaper, // Tai Tham
	  tavt: UniversalShaper, // Tai Viet
	  takr: UniversalShaper, // Takri
	  tibt: UniversalShaper, // Tibetan
	  tfng: UniversalShaper, // Tifinagh
	  tirh: UniversalShaper, // Tirhuta

	  latn: DefaultShaper, // Latin
	  DFLT: DefaultShaper // Default
	};

	function choose(script) {
	  var shaper = SHAPERS[script];
	  if (shaper) {
	    return shaper;
	  }

	  return DefaultShaper;
	}

	var GSUBProcessor = function (_OTProcessor) {
	  _inherits(GSUBProcessor, _OTProcessor);

	  function GSUBProcessor() {
	    _classCallCheck(this, GSUBProcessor);

	    return _possibleConstructorReturn(this, (GSUBProcessor.__proto__ || _Object$getPrototypeOf(GSUBProcessor)).apply(this, arguments));
	  }

	  _createClass(GSUBProcessor, [{
	    key: 'applyLookup',
	    value: function applyLookup(lookupType, table) {
	      var _this2 = this;

	      switch (lookupType) {
	        case 1:
	          {
	            // Single Substitution
	            var index = this.coverageIndex(table.coverage);
	            if (index === -1) {
	              return false;
	            }

	            var glyph = this.glyphIterator.cur;
	            switch (table.version) {
	              case 1:
	                glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
	                break;

	              case 2:
	                glyph.id = table.substitute.get(index);
	                break;
	            }

	            return true;
	          }

	        case 2:
	          {
	            // Multiple Substitution
	            var _index = this.coverageIndex(table.coverage);
	            if (_index !== -1) {
	              var _ret = function () {
	                var _glyphs;

	                var sequence = table.sequences.get(_index);
	                _this2.glyphIterator.cur.id = sequence[0];
	                _this2.glyphIterator.cur.ligatureComponent = 0;

	                var features = _this2.glyphIterator.cur.features;
	                var curGlyph = _this2.glyphIterator.cur;
	                var replacement = sequence.slice(1).map(function (gid, i) {
	                  var glyph = new GlyphInfo(_this2.font, gid, undefined, features);
	                  glyph.shaperInfo = curGlyph.shaperInfo;
	                  glyph.isLigated = curGlyph.isLigated;
	                  glyph.ligatureComponent = i + 1;
	                  glyph.substituted = true;
	                  return glyph;
	                });

	                (_glyphs = _this2.glyphs).splice.apply(_glyphs, [_this2.glyphIterator.index + 1, 0].concat(_toConsumableArray(replacement)));
	                return {
	                  v: true
	                };
	              }();

	              if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	            }

	            return false;
	          }

	        case 3:
	          {
	            // Alternate Substitution
	            var _index2 = this.coverageIndex(table.coverage);
	            if (_index2 !== -1) {
	              var USER_INDEX = 0; // TODO
	              this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];
	              return true;
	            }

	            return false;
	          }

	        case 4:
	          {
	            // Ligature Substitution
	            var _index3 = this.coverageIndex(table.coverage);
	            if (_index3 === -1) {
	              return false;
	            }

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	              for (var _iterator = _getIterator(table.ligatureSets.get(_index3)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var ligature = _step.value;

	                var matched = this.sequenceMatchIndices(1, ligature.components);
	                if (!matched) {
	                  continue;
	                }

	                var curGlyph = this.glyphIterator.cur;

	                // Concatenate all of the characters the new ligature will represent
	                var characters = curGlyph.codePoints.slice();
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                  for (var _iterator2 = _getIterator(matched), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _index4 = _step2.value;

	                    characters.push.apply(characters, _toConsumableArray(this.glyphs[_index4].codePoints));
	                  }

	                  // Create the replacement ligature glyph
	                } catch (err) {
	                  _didIteratorError2 = true;
	                  _iteratorError2 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                      _iterator2.return();
	                    }
	                  } finally {
	                    if (_didIteratorError2) {
	                      throw _iteratorError2;
	                    }
	                  }
	                }

	                var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, curGlyph.features);
	                ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
	                ligatureGlyph.isLigated = true;
	                ligatureGlyph.substituted = true;

	                // From Harfbuzz:
	                // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave
	                //   the ligature to keep its old ligature id.  This will allow it to attach to
	                //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,
	                //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a
	                //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature
	                //   later, we don't want them to lose their ligature id/component, otherwise
	                //   GPOS will fail to correctly position the mark ligature on top of the
	                //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343
	                //
	                // - If a ligature is formed of components that some of which are also ligatures
	                //   themselves, and those ligature components had marks attached to *their*
	                //   components, we have to attach the marks to the new ligature component
	                //   positions!  Now *that*'s tricky!  And these marks may be following the
	                //   last component of the whole sequence, so we should loop forward looking
	                //   for them and update them.
	                //
	                //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a
	                //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature
	                //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature
	                //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to
	                //   the new ligature with a component value of 2.
	                //
	                //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633
	                var isMarkLigature = curGlyph.isMark;
	                for (var i = 0; i < matched.length && isMarkLigature; i++) {
	                  isMarkLigature = this.glyphs[matched[i]].isMark;
	                }

	                ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;

	                var lastLigID = curGlyph.ligatureID;
	                var lastNumComps = curGlyph.codePoints.length;
	                var curComps = lastNumComps;
	                var idx = this.glyphIterator.index + 1;

	                // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.
	                // This allows GPOS to attach marks to the correct ligature components.
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                  for (var _iterator3 = _getIterator(matched), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var matchIndex = _step3.value;

	                    // Don't assign new ligature components for mark ligatures (see above)
	                    if (isMarkLigature) {
	                      idx = matchIndex;
	                    } else {
	                      while (idx < matchIndex) {
	                        var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
	                        this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
	                        this.glyphs[idx].ligatureComponent = ligatureComponent;
	                        idx++;
	                      }
	                    }

	                    lastLigID = this.glyphs[idx].ligatureID;
	                    lastNumComps = this.glyphs[idx].codePoints.length;
	                    curComps += lastNumComps;
	                    idx++; // skip base glyph
	                  }

	                  // Adjust ligature components for any marks following
	                } catch (err) {
	                  _didIteratorError3 = true;
	                  _iteratorError3 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                      _iterator3.return();
	                    }
	                  } finally {
	                    if (_didIteratorError3) {
	                      throw _iteratorError3;
	                    }
	                  }
	                }

	                if (lastLigID && !isMarkLigature) {
	                  for (var _i = idx; _i < this.glyphs.length; _i++) {
	                    if (this.glyphs[_i].ligatureID === lastLigID) {
	                      var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i].ligatureComponent || 1, lastNumComps);
	                      this.glyphs[_i].ligatureComponent = ligatureComponent;
	                    } else {
	                      break;
	                    }
	                  }
	                }

	                // Delete the matched glyphs, and replace the current glyph with the ligature glyph
	                for (var _i2 = matched.length - 1; _i2 >= 0; _i2--) {
	                  this.glyphs.splice(matched[_i2], 1);
	                }

	                this.glyphs[this.glyphIterator.index] = ligatureGlyph;
	                return true;
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                  _iterator.return();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }

	            return false;
	          }

	        case 5:
	          // Contextual Substitution
	          return this.applyContext(table);

	        case 6:
	          // Chaining Contextual Substitution
	          return this.applyChainingContext(table);

	        case 7:
	          // Extension Substitution
	          return this.applyLookup(table.lookupType, table.extension);

	        default:
	          throw new Error('GSUB lookupType ' + lookupType + ' is not supported');
	      }
	    }
	  }]);

	  return GSUBProcessor;
	}(OTProcessor);

	var GPOSProcessor = function (_OTProcessor) {
	  _inherits(GPOSProcessor, _OTProcessor);

	  function GPOSProcessor() {
	    _classCallCheck(this, GPOSProcessor);

	    return _possibleConstructorReturn(this, (GPOSProcessor.__proto__ || _Object$getPrototypeOf(GPOSProcessor)).apply(this, arguments));
	  }

	  _createClass(GPOSProcessor, [{
	    key: 'applyPositionValue',
	    value: function applyPositionValue(sequenceIndex, value) {
	      var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
	      if (value.xAdvance != null) {
	        position.xAdvance += value.xAdvance;
	      }

	      if (value.yAdvance != null) {
	        position.yAdvance += value.yAdvance;
	      }

	      if (value.xPlacement != null) {
	        position.xOffset += value.xPlacement;
	      }

	      if (value.yPlacement != null) {
	        position.yOffset += value.yPlacement;
	      }

	      // TODO: device tables
	    }
	  }, {
	    key: 'applyLookup',
	    value: function applyLookup(lookupType, table) {
	      switch (lookupType) {
	        case 1:
	          {
	            // Single positioning value
	            var index = this.coverageIndex(table.coverage);
	            if (index === -1) {
	              return false;
	            }

	            switch (table.version) {
	              case 1:
	                this.applyPositionValue(0, table.value);
	                break;

	              case 2:
	                this.applyPositionValue(0, table.values.get(index));
	                break;
	            }

	            return true;
	          }

	        case 2:
	          {
	            // Pair Adjustment Positioning
	            var nextGlyph = this.glyphIterator.peek();
	            if (!nextGlyph) {
	              return false;
	            }

	            var _index = this.coverageIndex(table.coverage);
	            if (_index === -1) {
	              return false;
	            }

	            switch (table.version) {
	              case 1:
	                // Adjustments for glyph pairs
	                var set = table.pairSets.get(_index);

	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                  for (var _iterator = _getIterator(set), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _pair = _step.value;

	                    if (_pair.secondGlyph === nextGlyph.id) {
	                      this.applyPositionValue(0, _pair.value1);
	                      this.applyPositionValue(1, _pair.value2);
	                      return true;
	                    }
	                  }
	                } catch (err) {
	                  _didIteratorError = true;
	                  _iteratorError = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                      _iterator.return();
	                    }
	                  } finally {
	                    if (_didIteratorError) {
	                      throw _iteratorError;
	                    }
	                  }
	                }

	                return false;

	              case 2:
	                // Class pair adjustment
	                var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
	                var class2 = this.getClassID(nextGlyph.id, table.classDef2);
	                if (class1 === -1 || class2 === -1) {
	                  return false;
	                }

	                var pair = table.classRecords.get(class1).get(class2);
	                this.applyPositionValue(0, pair.value1);
	                this.applyPositionValue(1, pair.value2);
	                return true;
	            }
	          }

	        case 3:
	          {
	            // Cursive Attachment Positioning
	            var nextIndex = this.glyphIterator.peekIndex();
	            var _nextGlyph = this.glyphs[nextIndex];
	            if (!_nextGlyph) {
	              return false;
	            }

	            var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
	            if (!curRecord || !curRecord.exitAnchor) {
	              return false;
	            }

	            var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];
	            if (!nextRecord || !nextRecord.entryAnchor) {
	              return false;
	            }

	            var entry = this.getAnchor(nextRecord.entryAnchor);
	            var exit = this.getAnchor(curRecord.exitAnchor);

	            var cur = this.positions[this.glyphIterator.index];
	            var next = this.positions[nextIndex];

	            switch (this.direction) {
	              case 'ltr':
	                cur.xAdvance = exit.x + cur.xOffset;

	                var d = entry.x + next.xOffset;
	                next.xAdvance -= d;
	                next.xOffset -= d;
	                break;

	              case 'rtl':
	                d = exit.x + cur.xOffset;
	                cur.xAdvance -= d;
	                cur.xOffset -= d;
	                next.xAdvance = entry.x + next.xOffset;
	                break;
	            }

	            if (this.glyphIterator.flags.rightToLeft) {
	              this.glyphIterator.cur.cursiveAttachment = nextIndex;
	              cur.yOffset = entry.y - exit.y;
	            } else {
	              _nextGlyph.cursiveAttachment = this.glyphIterator.index;
	              cur.yOffset = exit.y - entry.y;
	            }

	            return true;
	          }

	        case 4:
	          {
	            // Mark to base positioning
	            var markIndex = this.coverageIndex(table.markCoverage);
	            if (markIndex === -1) {
	              return false;
	            }

	            // search backward for a base glyph
	            var baseGlyphIndex = this.glyphIterator.index;
	            while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark) {}

	            if (baseGlyphIndex < 0) {
	              return false;
	            }

	            var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
	            if (baseIndex === -1) {
	              return false;
	            }

	            var markRecord = table.markArray[markIndex];
	            var baseAnchor = table.baseArray[baseIndex][markRecord.class];
	            this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
	            return true;
	          }

	        case 5:
	          {
	            // Mark to ligature positioning
	            var _markIndex = this.coverageIndex(table.markCoverage);
	            if (_markIndex === -1) {
	              return false;
	            }

	            // search backward for a base glyph
	            var _baseGlyphIndex = this.glyphIterator.index;
	            while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}

	            if (_baseGlyphIndex < 0) {
	              return false;
	            }

	            var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);
	            if (ligIndex === -1) {
	              return false;
	            }

	            var ligAttach = table.ligatureArray[ligIndex];
	            var markGlyph = this.glyphIterator.cur;
	            var ligGlyph = this.glyphs[_baseGlyphIndex];
	            var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent != null ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;

	            var _markRecord = table.markArray[_markIndex];
	            var _baseAnchor = ligAttach[compIndex][_markRecord.class];
	            this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);
	            return true;
	          }

	        case 6:
	          {
	            // Mark to mark positioning
	            var mark1Index = this.coverageIndex(table.mark1Coverage);
	            if (mark1Index === -1) {
	              return false;
	            }

	            // get the previous mark to attach to
	            var prevIndex = this.glyphIterator.peekIndex(-1);
	            var prev = this.glyphs[prevIndex];
	            if (!prev || !prev.isMark) {
	              return false;
	            }

	            var _cur = this.glyphIterator.cur;

	            // The following logic was borrowed from Harfbuzz
	            var good = false;
	            if (_cur.ligatureID === prev.ligatureID) {
	              if (!_cur.ligatureID) {
	                // Marks belonging to the same base
	                good = true;
	              } else if (_cur.ligatureComponent === prev.ligatureComponent) {
	                // Marks belonging to the same ligature component
	                good = true;
	              }
	            } else {
	              // If ligature ids don't match, it may be the case that one of the marks
	              // itself is a ligature, in which case match.
	              if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {
	                good = true;
	              }
	            }

	            if (!good) {
	              return false;
	            }

	            var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
	            if (mark2Index === -1) {
	              return false;
	            }

	            var _markRecord2 = table.mark1Array[mark1Index];
	            var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];
	            this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);
	            return true;
	          }

	        case 7:
	          // Contextual positioning
	          return this.applyContext(table);

	        case 8:
	          // Chaining contextual positioning
	          return this.applyChainingContext(table);

	        case 9:
	          // Extension positioning
	          return this.applyLookup(table.lookupType, table.extension);

	        default:
	          throw new Error('Unsupported GPOS table: ' + lookupType);
	      }
	    }
	  }, {
	    key: 'applyAnchor',
	    value: function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
	      var baseCoords = this.getAnchor(baseAnchor);
	      var markCoords = this.getAnchor(markRecord.markAnchor);

	      var basePos = this.positions[baseGlyphIndex];
	      var markPos = this.positions[this.glyphIterator.index];

	      markPos.xOffset = baseCoords.x - markCoords.x;
	      markPos.yOffset = baseCoords.y - markCoords.y;
	      this.glyphIterator.cur.markAttachment = baseGlyphIndex;
	    }
	  }, {
	    key: 'getAnchor',
	    value: function getAnchor(anchor) {
	      // TODO: contour point, device tables
	      return {
	        x: anchor.xCoordinate,
	        y: anchor.yCoordinate
	      };
	    }
	  }, {
	    key: 'applyFeatures',
	    value: function applyFeatures(userFeatures, glyphs, advances) {
	      _get(GPOSProcessor.prototype.__proto__ || _Object$getPrototypeOf(GPOSProcessor.prototype), 'applyFeatures', this).call(this, userFeatures, glyphs, advances);

	      for (var i = 0; i < this.glyphs.length; i++) {
	        this.fixCursiveAttachment(i);
	      }

	      this.fixMarkAttachment();
	    }
	  }, {
	    key: 'fixCursiveAttachment',
	    value: function fixCursiveAttachment(i) {
	      var glyph = this.glyphs[i];
	      if (glyph.cursiveAttachment != null) {
	        var j = glyph.cursiveAttachment;

	        glyph.cursiveAttachment = null;
	        this.fixCursiveAttachment(j);

	        this.positions[i].yOffset += this.positions[j].yOffset;
	      }
	    }
	  }, {
	    key: 'fixMarkAttachment',
	    value: function fixMarkAttachment() {
	      for (var i = 0; i < this.glyphs.length; i++) {
	        var glyph = this.glyphs[i];
	        if (glyph.markAttachment != null) {
	          var j = glyph.markAttachment;

	          this.positions[i].xOffset += this.positions[j].xOffset;
	          this.positions[i].yOffset += this.positions[j].yOffset;

	          if (this.direction === 'ltr') {
	            for (var k = j; k < i; k++) {
	              this.positions[i].xOffset -= this.positions[k].xAdvance;
	              this.positions[i].yOffset -= this.positions[k].yAdvance;
	            }
	          }
	        }
	      }
	    }
	  }]);

	  return GPOSProcessor;
	}(OTProcessor);

	var OTLayoutEngine = function () {
	  function OTLayoutEngine(font) {
	    _classCallCheck(this, OTLayoutEngine);

	    this.font = font;
	    this.glyphInfos = null;
	    this.plan = null;
	    this.GSUBProcessor = null;
	    this.GPOSProcessor = null;

	    if (font.GSUB) {
	      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);
	    }

	    if (font.GPOS) {
	      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);
	    }
	  }

	  _createClass(OTLayoutEngine, [{
	    key: 'setup',
	    value: function setup(glyphs, features, script, language) {
	      var _this = this;

	      // Map glyphs to GlyphInfo objects so data can be passed between
	      // GSUB and GPOS without mutating the real (shared) Glyph objects.
	      this.glyphInfos = glyphs.map(function (glyph) {
	        return new GlyphInfo(_this.font, glyph.id, [].concat(_toConsumableArray(glyph.codePoints)));
	      });

	      // Choose a shaper based on the script, and setup a shaping plan.
	      // This determines which features to apply to which glyphs.
	      this.shaper = choose(script);
	      this.plan = new ShapingPlan(this.font, script, language);
	      return this.shaper.plan(this.plan, this.glyphInfos, features);
	    }
	  }, {
	    key: 'substitute',
	    value: function substitute(glyphs) {
	      var _this2 = this;

	      if (this.GSUBProcessor) {
	        this.plan.process(this.GSUBProcessor, this.glyphInfos);

	        // Map glyph infos back to normal Glyph objects
	        glyphs = this.glyphInfos.map(function (glyphInfo) {
	          return _this2.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);
	        });
	      }

	      return glyphs;
	    }
	  }, {
	    key: 'position',
	    value: function position(glyphs, positions) {
	      if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {
	        this.zeroMarkAdvances(positions);
	      }

	      if (this.GPOSProcessor) {
	        this.plan.process(this.GPOSProcessor, this.glyphInfos, positions);
	      }

	      if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {
	        this.zeroMarkAdvances(positions);
	      }

	      // Reverse the glyphs and positions if the script is right-to-left
	      if (this.plan.direction === 'rtl') {
	        glyphs.reverse();
	        positions.reverse();
	      }

	      return this.GPOSProcessor && this.GPOSProcessor.features;
	    }
	  }, {
	    key: 'zeroMarkAdvances',
	    value: function zeroMarkAdvances(positions) {
	      for (var i = 0; i < this.glyphInfos.length; i++) {
	        if (this.glyphInfos[i].isMark) {
	          positions[i].xAdvance = 0;
	          positions[i].yAdvance = 0;
	        }
	      }
	    }
	  }, {
	    key: 'cleanup',
	    value: function cleanup() {
	      this.glyphInfos = null;
	      this.plan = null;
	      this.shaper = null;
	    }
	  }, {
	    key: 'getAvailableFeatures',
	    value: function getAvailableFeatures(script, language) {
	      var features = [];

	      if (this.GSUBProcessor) {
	        this.GSUBProcessor.selectScript(script, language);
	        features.push.apply(features, _toConsumableArray(_Object$keys(this.GSUBProcessor.features)));
	      }

	      if (this.GPOSProcessor) {
	        this.GPOSProcessor.selectScript(script, language);
	        features.push.apply(features, _toConsumableArray(_Object$keys(this.GPOSProcessor.features)));
	      }

	      return features;
	    }
	  }]);

	  return OTLayoutEngine;
	}();

	var LayoutEngine = function () {
	  function LayoutEngine(font) {
	    _classCallCheck(this, LayoutEngine);

	    this.font = font;
	    this.unicodeLayoutEngine = null;
	    this.kernProcessor = null;

	    // Choose an advanced layout engine. We try the AAT morx table first since more
	    // scripts are currently supported because the shaping logic is built into the font.
	    if (this.font.morx) {
	      this.engine = new AATLayoutEngine(this.font);
	    } else if (this.font.GSUB || this.font.GPOS) {
	      this.engine = new OTLayoutEngine(this.font);
	    }
	  }

	  _createClass(LayoutEngine, [{
	    key: 'layout',
	    value: function layout(string) {
	      var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	      var script = arguments[2];
	      var language = arguments[3];

	      // Make the features parameter optional
	      if (typeof features === 'string') {
	        script = features;
	        language = script;
	        features = [];
	      }

	      // Map string to glyphs if needed
	      if (typeof string === 'string') {
	        // Attempt to detect the script from the string if not provided.
	        if (script == null) {
	          script = forString(string);
	        }

	        var glyphs = this.font.glyphsForString(string);
	      } else {
	        // Attempt to detect the script from the glyph code points if not provided.
	        if (script == null) {
	          var codePoints = [];
	          var _iteratorNormalCompletion = true;
	          var _didIteratorError = false;
	          var _iteratorError = undefined;

	          try {
	            for (var _iterator = _getIterator(string), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	              var glyph = _step.value;

	              codePoints.push.apply(codePoints, _toConsumableArray(glyph.codePoints));
	            }
	          } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	              }
	            } finally {
	              if (_didIteratorError) {
	                throw _iteratorError;
	              }
	            }
	          }

	          script = forCodePoints(codePoints);
	        }

	        var glyphs = string;
	      }

	      // Return early if there are no glyphs
	      if (glyphs.length === 0) {
	        return new GlyphRun(glyphs, []);
	      }

	      // Setup the advanced layout engine
	      if (this.engine && this.engine.setup) {
	        this.engine.setup(glyphs, features, script, language);
	      }

	      // Substitute and position the glyphs
	      glyphs = this.substitute(glyphs, features, script, language);
	      var positions = this.position(glyphs, features, script, language);

	      // Let the layout engine clean up any state it might have
	      if (this.engine && this.engine.cleanup) {
	        this.engine.cleanup();
	      }

	      return new GlyphRun(glyphs, positions);
	    }
	  }, {
	    key: 'substitute',
	    value: function substitute(glyphs, features, script, language) {
	      // Call the advanced layout engine to make substitutions
	      if (this.engine && this.engine.substitute) {
	        glyphs = this.engine.substitute(glyphs, features, script, language);
	      }

	      return glyphs;
	    }
	  }, {
	    key: 'position',
	    value: function position(glyphs, features, script, language) {
	      // Get initial glyph positions
	      var positions = glyphs.map(function (glyph) {
	        return new GlyphPosition(glyph.advanceWidth);
	      });
	      var positioned = null;

	      // Call the advanced layout engine. Returns the features applied.
	      if (this.engine && this.engine.position) {
	        positioned = this.engine.position(glyphs, positions, features, script, language);
	      }

	      // if there is no GPOS table, use unicode properties to position marks.
	      if (!positioned) {
	        if (!this.unicodeLayoutEngine) {
	          this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);
	        }

	        this.unicodeLayoutEngine.positionGlyphs(glyphs, positions);
	      }

	      // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table
	      if ((!positioned || !positioned.kern) && this.font.kern) {
	        if (!this.kernProcessor) {
	          this.kernProcessor = new KernProcessor(this.font);
	        }

	        this.kernProcessor.process(glyphs, positions);
	      }

	      return positions;
	    }
	  }, {
	    key: 'getAvailableFeatures',
	    value: function getAvailableFeatures(script, language) {
	      var features = [];

	      if (this.engine) {
	        features.push.apply(features, _toConsumableArray(this.engine.getAvailableFeatures(script, language)));
	      }

	      if (this.font.kern && features.indexOf('kern') === -1) {
	        features.push('kern');
	      }

	      return features;
	    }
	  }, {
	    key: 'stringsForGlyph',
	    value: function stringsForGlyph(gid) {
	      var result = new _Set();

	      var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(codePoints), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var codePoint = _step2.value;

	          result.add(_String$fromCodePoint(codePoint));
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      if (this.engine && this.engine.stringsForGlyph) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = _getIterator(this.engine.stringsForGlyph(gid)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var string = _step3.value;

	            result.add(string);
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }
	      }

	      return _Array$from(result);
	    }
	  }]);

	  return LayoutEngine;
	}();

	var SVG_COMMANDS = {
	  moveTo: 'M',
	  lineTo: 'L',
	  quadraticCurveTo: 'Q',
	  bezierCurveTo: 'C',
	  closePath: 'Z'
	};

	/**
	 * Path objects are returned by glyphs and represent the actual
	 * vector outlines for each glyph in the font. Paths can be converted
	 * to SVG path data strings, or to functions that can be applied to
	 * render the path to a graphics context.
	 */

	var Path = function () {
	  function Path() {
	    _classCallCheck(this, Path);

	    this.commands = [];
	    this._bbox = null;
	    this._cbox = null;
	  }

	  /**
	   * Compiles the path to a JavaScript function that can be applied with
	   * a graphics context in order to render the path.
	   * @return {string}
	   */


	  _createClass(Path, [{
	    key: 'toFunction',
	    value: function toFunction() {
	      var cmds = this.commands.map(function (c) {
	        return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';
	      });
	      return new Function('ctx', cmds.join('\n'));
	    }

	    /**
	     * Converts the path to an SVG path data string
	     * @return {string}
	     */

	  }, {
	    key: 'toSVG',
	    value: function toSVG() {
	      var cmds = this.commands.map(function (c) {
	        var args = c.args.map(function (arg) {
	          return Math.round(arg * 100) / 100;
	        });
	        return '' + SVG_COMMANDS[c.command] + args.join(' ');
	      });

	      return cmds.join('');
	    }

	    /**
	     * Gets the "control box" of a path.
	     * This is like the bounding box, but it includes all points including
	     * control points of bezier segments and is much faster to compute than
	     * the real bounding box.
	     * @type {BBox}
	     */

	  }, {
	    key: 'cbox',
	    get: function get() {
	      if (!this._cbox) {
	        var cbox = new BBox();
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = _getIterator(this.commands), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var command = _step.value;

	            for (var _i = 0; _i < command.args.length; _i += 2) {
	              cbox.addPoint(command.args[_i], command.args[_i + 1]);
	            }
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }

	        this._cbox = _Object$freeze(cbox);
	      }

	      return this._cbox;
	    }

	    /**
	     * Gets the exact bounding box of the path by evaluating curve segments.
	     * Slower to compute than the control box, but more accurate.
	     * @type {BBox}
	     */

	  }, {
	    key: 'bbox',
	    get: function get() {
	      if (this._bbox) {
	        return this._bbox;
	      }

	      var bbox = new BBox();
	      var cx = 0,
	          cy = 0;

	      var f = function f(t) {
	        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
	      };

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(this.commands), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var c = _step2.value;

	          switch (c.command) {
	            case 'moveTo':
	            case 'lineTo':
	              var _c$args = _slicedToArray(c.args, 2),
	                  x = _c$args[0],
	                  y = _c$args[1];

	              bbox.addPoint(x, y);
	              cx = x;
	              cy = y;
	              break;

	            case 'quadraticCurveTo':
	            case 'bezierCurveTo':
	              if (c.command === 'quadraticCurveTo') {
	                // http://fontforge.org/bezier.html
	                var _c$args2 = _slicedToArray(c.args, 4),
	                    qp1x = _c$args2[0],
	                    qp1y = _c$args2[1],
	                    p3x = _c$args2[2],
	                    p3y = _c$args2[3];

	                var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)
	                var cp1y = cy + 2 / 3 * (qp1y - cy);
	                var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)
	                var cp2y = p3y + 2 / 3 * (qp1y - p3y);
	              } else {
	                var _c$args3 = _slicedToArray(c.args, 6),
	                    cp1x = _c$args3[0],
	                    cp1y = _c$args3[1],
	                    cp2x = _c$args3[2],
	                    cp2y = _c$args3[3],
	                    p3x = _c$args3[4],
	                    p3y = _c$args3[5];
	              }

	              // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
	              bbox.addPoint(p3x, p3y);

	              var p0 = [cx, cy];
	              var p1 = [cp1x, cp1y];
	              var p2 = [cp2x, cp2y];
	              var p3 = [p3x, p3y];

	              for (var i = 0; i <= 1; i++) {
	                var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
	                var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
	                c = 3 * p1[i] - 3 * p0[i];

	                if (a === 0) {
	                  if (b === 0) {
	                    continue;
	                  }

	                  var t = -c / b;
	                  if (0 < t && t < 1) {
	                    if (i === 0) {
	                      bbox.addPoint(f(t), bbox.maxY);
	                    } else if (i === 1) {
	                      bbox.addPoint(bbox.maxX, f(t));
	                    }
	                  }

	                  continue;
	                }

	                var b2ac = Math.pow(b, 2) - 4 * c * a;
	                if (b2ac < 0) {
	                  continue;
	                }

	                var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
	                if (0 < t1 && t1 < 1) {
	                  if (i === 0) {
	                    bbox.addPoint(f(t1), bbox.maxY);
	                  } else if (i === 1) {
	                    bbox.addPoint(bbox.maxX, f(t1));
	                  }
	                }

	                var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
	                if (0 < t2 && t2 < 1) {
	                  if (i === 0) {
	                    bbox.addPoint(f(t2), bbox.maxY);
	                  } else if (i === 1) {
	                    bbox.addPoint(bbox.maxX, f(t2));
	                  }
	                }
	              }

	              cx = p3x;
	              cy = p3y;
	              break;
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return this._bbox = _Object$freeze(bbox);
	    }
	  }]);

	  return Path;
	}();

	var _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];

	var _loop = function _loop() {
	  var command = _arr[_i2];
	  Path.prototype[command] = function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    this._bbox = this._cbox = null;
	    this.commands.push({
	      command: command,
	      args: args
	    });

	    return this;
	  };
	};

	for (var _i2 = 0; _i2 < _arr.length; _i2++) {
	  _loop();
	}

	var StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

	var _class$7;
	function _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	/**
	 * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and
	 * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.
	 *
	 * You do not create glyph objects directly. They are created by various methods on the font object.
	 * There are several subclasses of the base Glyph class internally that may be returned depending
	 * on the font format, but they all inherit from this class.
	 */
	var Glyph = (_class$7 = function () {
	  function Glyph(id, codePoints, font) {
	    _classCallCheck(this, Glyph);

	    /**
	     * The glyph id in the font
	     * @type {number}
	     */
	    this.id = id;

	    /**
	     * An array of unicode code points that are represented by this glyph.
	     * There can be multiple code points in the case of ligatures and other glyphs
	     * that represent multiple visual characters.
	     * @type {number[]}
	     */
	    this.codePoints = codePoints;
	    this._font = font;

	    // TODO: get this info from GDEF if available
	    this.isMark = this.codePoints.every(unicode.isMark);
	    this.isLigature = this.codePoints.length > 1;
	  }

	  _createClass(Glyph, [{
	    key: '_getPath',
	    value: function _getPath() {
	      return new Path();
	    }
	  }, {
	    key: '_getCBox',
	    value: function _getCBox() {
	      return this.path.cbox;
	    }
	  }, {
	    key: '_getBBox',
	    value: function _getBBox() {
	      return this.path.bbox;
	    }
	  }, {
	    key: '_getTableMetrics',
	    value: function _getTableMetrics(table) {
	      if (this.id < table.metrics.length) {
	        return table.metrics.get(this.id);
	      }

	      var metric = table.metrics.get(table.metrics.length - 1);
	      var res = {
	        advance: metric ? metric.advance : 0,
	        bearing: table.bearings.get(this.id - table.metrics.length) || 0
	      };

	      return res;
	    }
	  }, {
	    key: '_getMetrics',
	    value: function _getMetrics(cbox) {
	      if (this._metrics) {
	        return this._metrics;
	      }

	      var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),
	          advanceWidth = _getTableMetrics2.advance,
	          leftBearing = _getTableMetrics2.bearing;

	      // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea


	      if (this._font.vmtx) {
	        var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),
	            advanceHeight = _getTableMetrics3.advance,
	            topBearing = _getTableMetrics3.bearing;
	      } else {
	        var os2 = void 0;
	        if (typeof cbox === 'undefined' || cbox === null) {
	          cbox = this.cbox;
	        }

	        if ((os2 = this._font['OS/2']) && os2.version > 0) {
	          var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
	          var topBearing = os2.typoAscender - cbox.maxY;
	        } else {
	          var hhea = this._font.hhea;

	          var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
	          var topBearing = hhea.ascent - cbox.maxY;
	        }
	      }

	      return this._metrics = { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing };
	    }

	    /**
	     * The glyph’s control box.
	     * This is often the same as the bounding box, but is faster to compute.
	     * Because of the way bezier curves are defined, some of the control points
	     * can be outside of the bounding box. Where `bbox` takes this into account,
	     * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
	     * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
	     * for a more detailed description.
	     *
	     * @type {BBox}
	     */

	  }, {
	    key: '_getName',
	    value: function _getName() {
	      var post = this._font.post;

	      if (!post) {
	        return null;
	      }

	      switch (post.version) {
	        case 1:
	          return StandardNames[this.id];

	        case 2:
	          var id = post.glyphNameIndex[this.id];
	          if (id < StandardNames.length) {
	            return StandardNames[id];
	          }

	          return post.names[id - StandardNames.length];

	        case 2.5:
	          return StandardNames[this.id + post.offsets[this.id]];

	        case 4:
	          return String.fromCharCode(post.map[this.id]);
	      }
	    }

	    /**
	     * The glyph's name
	     * @type {string}
	     */

	  }, {
	    key: 'render',


	    /**
	     * Renders the glyph to the given graphics context, at the specified font size.
	     * @param {CanvasRenderingContext2d} ctx
	     * @param {number} size
	     */
	    value: function render(ctx, size) {
	      ctx.save();

	      var scale = 1 / this._font.head.unitsPerEm * size;
	      ctx.scale(scale, scale);

	      var fn = this.path.toFunction();
	      fn(ctx);
	      ctx.fill();

	      ctx.restore();
	    }
	  }, {
	    key: 'cbox',
	    get: function get() {
	      return this._getCBox();
	    }

	    /**
	     * The glyph’s bounding box, i.e. the rectangle that encloses the
	     * glyph outline as tightly as possible.
	     * @type {BBox}
	     */

	  }, {
	    key: 'bbox',
	    get: function get() {
	      return this._getBBox();
	    }

	    /**
	     * A vector Path object representing the glyph outline.
	     * @type {Path}
	     */

	  }, {
	    key: 'path',
	    get: function get() {
	      // Cache the path so we only decode it once
	      // Decoding is actually performed by subclasses
	      return this._getPath();
	    }

	    /**
	     * The glyph's advance width.
	     * @type {number}
	     */

	  }, {
	    key: 'advanceWidth',
	    get: function get() {
	      return this._getMetrics().advanceWidth;
	    }

	    /**
	     * The glyph's advance height.
	     * @type {number}
	     */

	  }, {
	    key: 'advanceHeight',
	    get: function get() {
	      return this._getMetrics().advanceHeight;
	    }
	  }, {
	    key: 'ligatureCaretPositions',
	    get: function get() {}
	  }, {
	    key: 'name',
	    get: function get() {
	      return this._getName();
	    }
	  }]);

	  return Glyph;
	}(), (_applyDecoratedDescriptor$4(_class$7.prototype, 'cbox', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'cbox'), _class$7.prototype), _applyDecoratedDescriptor$4(_class$7.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'bbox'), _class$7.prototype), _applyDecoratedDescriptor$4(_class$7.prototype, 'path', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'path'), _class$7.prototype), _applyDecoratedDescriptor$4(_class$7.prototype, 'advanceWidth', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'advanceWidth'), _class$7.prototype), _applyDecoratedDescriptor$4(_class$7.prototype, 'advanceHeight', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'advanceHeight'), _class$7.prototype), _applyDecoratedDescriptor$4(_class$7.prototype, 'name', [cache], _Object$getOwnPropertyDescriptor(_class$7.prototype, 'name'), _class$7.prototype)), _class$7);

	// The header for both simple and composite glyphs
	var GlyfHeader = new r.Struct({
	  numberOfContours: r.int16, // if negative, this is a composite glyph
	  xMin: r.int16,
	  yMin: r.int16,
	  xMax: r.int16,
	  yMax: r.int16
	});

	// Flags for simple glyphs
	var ON_CURVE = 1 << 0;
	var X_SHORT_VECTOR = 1 << 1;
	var Y_SHORT_VECTOR = 1 << 2;
	var REPEAT = 1 << 3;
	var SAME_X = 1 << 4;
	var SAME_Y = 1 << 5;

	// Flags for composite glyphs
	var ARG_1_AND_2_ARE_WORDS = 1 << 0;
	var WE_HAVE_A_SCALE = 1 << 3;
	var MORE_COMPONENTS = 1 << 5;
	var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
	var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
	var WE_HAVE_INSTRUCTIONS = 1 << 8;
	// Represents a point in a simple glyph
	var Point = function () {
	  function Point(onCurve, endContour) {
	    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	    _classCallCheck(this, Point);

	    this.onCurve = onCurve;
	    this.endContour = endContour;
	    this.x = x;
	    this.y = y;
	  }

	  _createClass(Point, [{
	    key: 'copy',
	    value: function copy() {
	      return new Point(this.onCurve, this.endContour, this.x, this.y);
	    }
	  }]);

	  return Point;
	}();

	// Represents a component in a composite glyph

	var Component = function Component(glyphID, dx, dy) {
	  _classCallCheck(this, Component);

	  this.glyphID = glyphID;
	  this.dx = dx;
	  this.dy = dy;
	  this.pos = 0;
	  this.scaleX = this.scaleY = 1;
	  this.scale01 = this.scale10 = 0;
	};

	/**
	 * Represents a TrueType glyph.
	 */


	var TTFGlyph = function (_Glyph) {
	  _inherits(TTFGlyph, _Glyph);

	  function TTFGlyph() {
	    _classCallCheck(this, TTFGlyph);

	    return _possibleConstructorReturn(this, (TTFGlyph.__proto__ || _Object$getPrototypeOf(TTFGlyph)).apply(this, arguments));
	  }

	  _createClass(TTFGlyph, [{
	    key: '_getCBox',

	    // Parses just the glyph header and returns the bounding box
	    value: function _getCBox(internal) {
	      // We need to decode the glyph if variation processing is requested,
	      // so it's easier just to recompute the path's cbox after decoding.
	      if (this._font._variationProcessor && !internal) {
	        return this.path.cbox;
	      }

	      var stream = this._font._getTableStream('glyf');
	      stream.pos += this._font.loca.offsets[this.id];
	      var glyph = GlyfHeader.decode(stream);

	      var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
	      return _Object$freeze(cbox);
	    }

	    // Parses a single glyph coordinate

	  }, {
	    key: '_parseGlyphCoord',
	    value: function _parseGlyphCoord(stream, prev, short, same) {
	      if (short) {
	        var val = stream.readUInt8();
	        if (!same) {
	          val = -val;
	        }

	        val += prev;
	      } else {
	        if (same) {
	          var val = prev;
	        } else {
	          var val = prev + stream.readInt16BE();
	        }
	      }

	      return val;
	    }

	    // Decodes the glyph data into points for simple glyphs,
	    // or components for composite glyphs

	  }, {
	    key: '_decode',
	    value: function _decode() {
	      var glyfPos = this._font.loca.offsets[this.id];
	      var nextPos = this._font.loca.offsets[this.id + 1];

	      // Nothing to do if there is no data for this glyph
	      if (glyfPos === nextPos) {
	        return null;
	      }

	      var stream = this._font._getTableStream('glyf');
	      stream.pos += glyfPos;
	      var startPos = stream.pos;

	      var glyph = GlyfHeader.decode(stream);

	      if (glyph.numberOfContours > 0) {
	        this._decodeSimple(glyph, stream);
	      } else if (glyph.numberOfContours < 0) {
	        this._decodeComposite(glyph, stream, startPos);
	      }

	      return glyph;
	    }
	  }, {
	    key: '_decodeSimple',
	    value: function _decodeSimple(glyph, stream) {
	      // this is a simple glyph
	      glyph.points = [];

	      var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);
	      glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);

	      var flags = [];
	      var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;

	      while (flags.length < numCoords) {
	        var flag = stream.readUInt8();
	        flags.push(flag);

	        // check for repeat flag
	        if (flag & REPEAT) {
	          var count = stream.readUInt8();
	          for (var j = 0; j < count; j++) {
	            flags.push(flag);
	          }
	        }
	      }

	      for (var i = 0; i < flags.length; i++) {
	        var flag = flags[i];
	        var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
	        glyph.points.push(point);
	      }

	      var px = 0;
	      for (var i = 0; i < flags.length; i++) {
	        var flag = flags[i];
	        glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);
	      }

	      var py = 0;
	      for (var i = 0; i < flags.length; i++) {
	        var flag = flags[i];
	        glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);
	      }

	      if (this._font._variationProcessor) {
	        var points = glyph.points.slice();
	        points.push.apply(points, _toConsumableArray(this._getPhantomPoints(glyph)));

	        this._font._variationProcessor.transformPoints(this.id, points);
	        glyph.phantomPoints = points.slice(-4);
	      }

	      return;
	    }
	  }, {
	    key: '_decodeComposite',
	    value: function _decodeComposite(glyph, stream) {
	      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	      // this is a composite glyph
	      glyph.components = [];
	      var haveInstructions = false;
	      var flags = MORE_COMPONENTS;

	      while (flags & MORE_COMPONENTS) {
	        flags = stream.readUInt16BE();
	        var gPos = stream.pos - offset;
	        var glyphID = stream.readUInt16BE();
	        if (!haveInstructions) {
	          haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;
	        }

	        if (flags & ARG_1_AND_2_ARE_WORDS) {
	          var dx = stream.readInt16BE();
	          var dy = stream.readInt16BE();
	        } else {
	          var dx = stream.readInt8();
	          var dy = stream.readInt8();
	        }

	        var component = new Component(glyphID, dx, dy);
	        component.pos = gPos;

	        if (flags & WE_HAVE_A_SCALE) {
	          // fixed number with 14 bits of fraction
	          component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
	          component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	          component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	        } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
	          component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	          component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	          component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	          component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
	        }

	        glyph.components.push(component);
	      }

	      if (this._font._variationProcessor) {
	        var points = [];
	        for (var j = 0; j < glyph.components.length; j++) {
	          var component = glyph.components[j];
	          points.push(new Point(true, true, component.dx, component.dy));
	        }

	        points.push.apply(points, _toConsumableArray(this._getPhantomPoints(glyph)));

	        this._font._variationProcessor.transformPoints(this.id, points);
	        glyph.phantomPoints = points.splice(-4, 4);

	        for (var i = 0; i < points.length; i++) {
	          var point = points[i];
	          glyph.components[i].dx = point.x;
	          glyph.components[i].dy = point.y;
	        }
	      }

	      return haveInstructions;
	    }
	  }, {
	    key: '_getPhantomPoints',
	    value: function _getPhantomPoints(glyph) {
	      var cbox = this._getCBox(true);
	      if (this._metrics == null) {
	        this._metrics = Glyph.prototype._getMetrics.call(this, cbox);
	      }

	      var _metrics = this._metrics,
	          advanceWidth = _metrics.advanceWidth,
	          advanceHeight = _metrics.advanceHeight,
	          leftBearing = _metrics.leftBearing,
	          topBearing = _metrics.topBearing;


	      return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];
	    }

	    // Decodes font data, resolves composite glyphs, and returns an array of contours

	  }, {
	    key: '_getContours',
	    value: function _getContours() {
	      var glyph = this._decode();
	      if (!glyph) {
	        return [];
	      }

	      if (glyph.numberOfContours < 0) {
	        // resolve composite glyphs
	        var points = [];
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = _getIterator(glyph.components), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var component = _step.value;

	            glyph = this._font.getGlyph(component.glyphID)._decode();
	            // TODO transform
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	              for (var _iterator2 = _getIterator(glyph.points), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var _point = _step2.value;

	                points.push(new Point(_point.onCurve, _point.endContour, _point.x + component.dx, _point.y + component.dy));
	              }
	            } catch (err) {
	              _didIteratorError2 = true;
	              _iteratorError2 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                  _iterator2.return();
	                }
	              } finally {
	                if (_didIteratorError2) {
	                  throw _iteratorError2;
	                }
	              }
	            }
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }
	      } else {
	        var points = glyph.points || [];
	      }

	      // Recompute and cache metrics if we performed variation processing
	      if (glyph.phantomPoints) {
	        this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
	        this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
	        this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
	        this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
	      }

	      var contours = [];
	      var cur = [];
	      for (var k = 0; k < points.length; k++) {
	        var point = points[k];
	        cur.push(point);
	        if (point.endContour) {
	          contours.push(cur);
	          cur = [];
	        }
	      }

	      return contours;
	    }
	  }, {
	    key: '_getMetrics',
	    value: function _getMetrics() {
	      if (this._metrics) {
	        return this._metrics;
	      }

	      var cbox = this._getCBox(true);
	      _get(TTFGlyph.prototype.__proto__ || _Object$getPrototypeOf(TTFGlyph.prototype), '_getMetrics', this).call(this, cbox);

	      if (this._font._variationProcessor) {
	        // Decode the font data (and cache for later).
	        // This triggers recomputation of metrics
	        this.path;
	      }

	      return this._metrics;
	    }

	    // Converts contours to a Path object that can be rendered

	  }, {
	    key: '_getPath',
	    value: function _getPath() {
	      var contours = this._getContours();
	      var path = new Path();

	      for (var i = 0; i < contours.length; i++) {
	        var contour = contours[i];
	        var firstPt = contour[0];
	        var lastPt = contour[contour.length - 1];
	        var start = 0;

	        if (firstPt.onCurve) {
	          // The first point will be consumed by the moveTo command, so skip in the loop
	          var curvePt = null;
	          start = 1;
	        } else {
	          if (lastPt.onCurve) {
	            // Start at the last point if the first point is off curve and the last point is on curve
	            firstPt = lastPt;
	          } else {
	            // Start at the middle if both the first and last points are off curve
	            firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
	          }

	          var curvePt = firstPt;
	        }

	        path.moveTo(firstPt.x, firstPt.y);

	        for (var j = start; j < contour.length; j++) {
	          var pt = contour[j];
	          var prevPt = j === 0 ? firstPt : contour[j - 1];

	          if (prevPt.onCurve && pt.onCurve) {
	            path.lineTo(pt.x, pt.y);
	          } else if (prevPt.onCurve && !pt.onCurve) {
	            var curvePt = pt;
	          } else if (!prevPt.onCurve && !pt.onCurve) {
	            var midX = (prevPt.x + pt.x) / 2;
	            var midY = (prevPt.y + pt.y) / 2;
	            path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
	            var curvePt = pt;
	          } else if (!prevPt.onCurve && pt.onCurve) {
	            path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
	            var curvePt = null;
	          } else {
	            throw new Error("Unknown TTF path state");
	          }
	        }

	        // Connect the first and last points
	        if (curvePt) {
	          path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
	        }

	        path.closePath();
	      }

	      return path;
	    }
	  }]);

	  return TTFGlyph;
	}(Glyph);

	/**
	 * Represents an OpenType PostScript glyph, in the Compact Font Format.
	 */

	var CFFGlyph = function (_Glyph) {
	  _inherits(CFFGlyph, _Glyph);

	  function CFFGlyph() {
	    _classCallCheck(this, CFFGlyph);

	    return _possibleConstructorReturn(this, (CFFGlyph.__proto__ || _Object$getPrototypeOf(CFFGlyph)).apply(this, arguments));
	  }

	  _createClass(CFFGlyph, [{
	    key: '_getName',
	    value: function _getName() {
	      return this._font['CFF '].getGlyphName(this.id);
	    }
	  }, {
	    key: 'bias',
	    value: function bias(s) {
	      if (s.length < 1240) {
	        return 107;
	      } else if (s.length < 33900) {
	        return 1131;
	      } else {
	        return 32768;
	      }
	    }
	  }, {
	    key: '_getPath',
	    value: function _getPath() {
	      var stream = this._font.stream;
	      var pos = stream.pos;


	      var cff = this._font['CFF '];
	      var str = cff.topDict.CharStrings[this.id];
	      var end = str.offset + str.length;
	      stream.pos = str.offset;

	      var path = new Path();
	      var stack = [];
	      var trans = [];

	      var width = null;
	      var nStems = 0;
	      var x = 0,
	          y = 0;
	      var usedGsubrs = void 0;
	      var usedSubrs = void 0;
	      var open = false;

	      this._usedGsubrs = usedGsubrs = {};
	      this._usedSubrs = usedSubrs = {};

	      var gsubrs = cff.globalSubrIndex || [];
	      var gsubrsBias = this.bias(gsubrs);

	      var privateDict = cff.privateDictForGlyph(this.id);
	      var subrs = privateDict.Subrs || [];
	      var subrsBias = this.bias(subrs);

	      function parseStems() {
	        if (stack.length % 2 !== 0) {
	          if (width === null) {
	            width = stack.shift() + privateDict.nominalWidthX;
	          }
	        }

	        nStems += stack.length >> 1;
	        return stack.length = 0;
	      }

	      function moveTo(x, y) {
	        if (open) {
	          path.closePath();
	        }

	        path.moveTo(x, y);
	        open = true;
	      }

	      var parse = function parse() {
	        while (stream.pos < end) {
	          var op = stream.readUInt8();
	          if (op < 32) {
	            switch (op) {
	              case 1: // hstem
	              case 3: // vstem
	              case 18: // hstemhm
	              case 23:
	                // vstemhm
	                parseStems();
	                break;

	              case 4:
	                // vmoveto
	                if (stack.length > 1) {
	                  if (typeof width === 'undefined' || width === null) {
	                    width = stack.shift() + privateDict.nominalWidthX;
	                  }
	                }

	                y += stack.shift();
	                moveTo(x, y);
	                break;

	              case 5:
	                // rlineto
	                while (stack.length >= 2) {
	                  x += stack.shift();
	                  y += stack.shift();
	                  path.lineTo(x, y);
	                }
	                break;

	              case 6: // hlineto
	              case 7:
	                // vlineto
	                var phase = op === 6;
	                while (stack.length >= 1) {
	                  if (phase) {
	                    x += stack.shift();
	                  } else {
	                    y += stack.shift();
	                  }

	                  path.lineTo(x, y);
	                  phase = !phase;
	                }
	                break;

	              case 8:
	                // rrcurveto
	                while (stack.length > 0) {
	                  var c1x = x + stack.shift();
	                  var c1y = y + stack.shift();
	                  var c2x = c1x + stack.shift();
	                  var c2y = c1y + stack.shift();
	                  x = c2x + stack.shift();
	                  y = c2y + stack.shift();
	                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                }
	                break;

	              case 10:
	                // callsubr
	                var index = stack.pop() + subrsBias;
	                var subr = subrs[index];
	                if (subr) {
	                  usedSubrs[index] = true;
	                  var p = stream.pos;
	                  var e = end;
	                  stream.pos = subr.offset;
	                  end = subr.offset + subr.length;
	                  parse();
	                  stream.pos = p;
	                  end = e;
	                }
	                break;

	              case 11:
	                // return
	                return;

	              case 14:
	                // endchar
	                if (stack.length > 0) {
	                  if (typeof width === 'undefined' || width === null) {
	                    width = stack.shift() + privateDict.nominalWidthX;
	                  }
	                }

	                path.closePath();
	                open = false;
	                break;

	              case 19: // hintmask
	              case 20:
	                // cntrmask
	                parseStems();
	                stream.pos += nStems + 7 >> 3;
	                break;

	              case 21:
	                // rmoveto
	                if (stack.length > 2) {
	                  if (typeof width === 'undefined' || width === null) {
	                    width = stack.shift() + privateDict.nominalWidthX;
	                  }
	                  var haveWidth = true;
	                }

	                x += stack.shift();
	                y += stack.shift();
	                moveTo(x, y);
	                break;

	              case 22:
	                // hmoveto
	                if (stack.length > 1) {
	                  if (typeof width === 'undefined' || width === null) {
	                    width = stack.shift() + privateDict.nominalWidthX;
	                  }
	                }

	                x += stack.shift();
	                moveTo(x, y);
	                break;

	              case 24:
	                // rcurveline
	                while (stack.length >= 8) {
	                  var c1x = x + stack.shift();
	                  var c1y = y + stack.shift();
	                  var c2x = c1x + stack.shift();
	                  var c2y = c1y + stack.shift();
	                  x = c2x + stack.shift();
	                  y = c2y + stack.shift();
	                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                x += stack.shift();
	                y += stack.shift();
	                path.lineTo(x, y);
	                break;

	              case 25:
	                // rlinecurve
	                while (stack.length >= 8) {
	                  x += stack.shift();
	                  y += stack.shift();
	                  path.lineTo(x, y);
	                }

	                var c1x = x + stack.shift();
	                var c1y = y + stack.shift();
	                var c2x = c1x + stack.shift();
	                var c2y = c1y + stack.shift();
	                x = c2x + stack.shift();
	                y = c2y + stack.shift();
	                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                break;

	              case 26:
	                // vvcurveto
	                if (stack.length % 2) {
	                  x += stack.shift();
	                }

	                while (stack.length >= 4) {
	                  c1x = x;
	                  c1y = y + stack.shift();
	                  c2x = c1x + stack.shift();
	                  c2y = c1y + stack.shift();
	                  x = c2x;
	                  y = c2y + stack.shift();
	                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                }
	                break;

	              case 27:
	                // hhcurveto
	                if (stack.length % 2) {
	                  y += stack.shift();
	                }

	                while (stack.length >= 4) {
	                  c1x = x + stack.shift();
	                  c1y = y;
	                  c2x = c1x + stack.shift();
	                  c2y = c1y + stack.shift();
	                  x = c2x + stack.shift();
	                  y = c2y;
	                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                }
	                break;

	              case 28:
	                // shortint
	                stack.push(stream.readInt16BE());
	                break;

	              case 29:
	                // callgsubr
	                index = stack.pop() + gsubrsBias;
	                subr = gsubrs[index];
	                if (subr) {
	                  usedGsubrs[index] = true;
	                  var p = stream.pos;
	                  var e = end;
	                  stream.pos = subr.offset;
	                  end = subr.offset + subr.length;
	                  parse();
	                  stream.pos = p;
	                  end = e;
	                }
	                break;

	              case 30: // vhcurveto
	              case 31:
	                // hvcurveto
	                phase = op === 31;
	                while (stack.length >= 4) {
	                  if (phase) {
	                    c1x = x + stack.shift();
	                    c1y = y;
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    y = c2y + stack.shift();
	                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
	                  } else {
	                    c1x = x;
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
	                  }

	                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
	                  phase = !phase;
	                }
	                break;

	              case 12:
	                op = stream.readUInt8();
	                switch (op) {
	                  case 3:
	                    // and
	                    var a = stack.pop();
	                    var b = stack.pop();
	                    stack.push(a && b ? 1 : 0);
	                    break;

	                  case 4:
	                    // or
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a || b ? 1 : 0);
	                    break;

	                  case 5:
	                    // not
	                    a = stack.pop();
	                    stack.push(a ? 0 : 1);
	                    break;

	                  case 9:
	                    // abs
	                    a = stack.pop();
	                    stack.push(Math.abs(a));
	                    break;

	                  case 10:
	                    // add
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a + b);
	                    break;

	                  case 11:
	                    // sub
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a - b);
	                    break;

	                  case 12:
	                    // div
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a / b);
	                    break;

	                  case 14:
	                    // neg
	                    a = stack.pop();
	                    stack.push(-a);
	                    break;

	                  case 15:
	                    // eq
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a === b ? 1 : 0);
	                    break;

	                  case 18:
	                    // drop
	                    stack.pop();
	                    break;

	                  case 20:
	                    // put
	                    var val = stack.pop();
	                    var idx = stack.pop();
	                    trans[idx] = val;
	                    break;

	                  case 21:
	                    // get
	                    idx = stack.pop();
	                    stack.push(trans[idx] || 0);
	                    break;

	                  case 22:
	                    // ifelse
	                    var s1 = stack.pop();
	                    var s2 = stack.pop();
	                    var v1 = stack.pop();
	                    var v2 = stack.pop();
	                    stack.push(v1 <= v2 ? s1 : s2);
	                    break;

	                  case 23:
	                    // random
	                    stack.push(Math.random());
	                    break;

	                  case 24:
	                    // mul
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(a * b);
	                    break;

	                  case 26:
	                    // sqrt
	                    a = stack.pop();
	                    stack.push(Math.sqrt(a));
	                    break;

	                  case 27:
	                    // dup
	                    a = stack.pop();
	                    stack.push(a, a);
	                    break;

	                  case 28:
	                    // exch
	                    a = stack.pop();
	                    b = stack.pop();
	                    stack.push(b, a);
	                    break;

	                  case 29:
	                    // index
	                    idx = stack.pop();
	                    if (idx < 0) {
	                      idx = 0;
	                    } else if (idx > stack.length - 1) {
	                      idx = stack.length - 1;
	                    }

	                    stack.push(stack[idx]);
	                    break;

	                  case 30:
	                    // roll
	                    var n = stack.pop();
	                    var j = stack.pop();

	                    if (j >= 0) {
	                      while (j > 0) {
	                        var t = stack[n - 1];
	                        for (var i = n - 2; i >= 0; i--) {
	                          stack[i + 1] = stack[i];
	                        }

	                        stack[0] = t;
	                        j--;
	                      }
	                    } else {
	                      while (j < 0) {
	                        var t = stack[0];
	                        for (var _i = 0; _i <= n; _i++) {
	                          stack[_i] = stack[_i + 1];
	                        }

	                        stack[n - 1] = t;
	                        j++;
	                      }
	                    }
	                    break;

	                  case 34:
	                    // hflex
	                    c1x = x + stack.shift();
	                    c1y = y;
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    var c3x = c2x + stack.shift();
	                    var c3y = c2y;
	                    var c4x = c3x + stack.shift();
	                    var c4y = c3y;
	                    var c5x = c4x + stack.shift();
	                    var c5y = c4y;
	                    var c6x = c5x + stack.shift();
	                    var c6y = c5y;
	                    x = c6x;
	                    y = c6y;

	                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
	                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
	                    break;

	                  case 35:
	                    // flex
	                    var pts = [];

	                    for (var _i2 = 0; _i2 <= 5; _i2++) {
	                      x += stack.shift();
	                      y += stack.shift();
	                      pts.push(x, y);
	                    }

	                    path.bezierCurveTo.apply(path, _toConsumableArray(pts.slice(0, 6)));
	                    path.bezierCurveTo.apply(path, _toConsumableArray(pts.slice(6)));
	                    stack.shift(); // fd
	                    break;

	                  case 36:
	                    // hflex1
	                    c1x = x + stack.shift();
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    c3x = c2x + stack.shift();
	                    c3y = c2y;
	                    c4x = c3x + stack.shift();
	                    c4y = c3y;
	                    c5x = c4x + stack.shift();
	                    c5y = c4y + stack.shift();
	                    c6x = c5x + stack.shift();
	                    c6y = c5y;
	                    x = c6x;
	                    y = c6y;

	                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
	                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
	                    break;

	                  case 37:
	                    // flex1
	                    var startx = x;
	                    var starty = y;

	                    pts = [];
	                    for (var _i3 = 0; _i3 <= 4; _i3++) {
	                      x += stack.shift();
	                      y += stack.shift();
	                      pts.push(x, y);
	                    }

	                    if (Math.abs(x - startx) > Math.abs(y - starty)) {
	                      // horizontal
	                      x += stack.shift();
	                      y = starty;
	                    } else {
	                      x = startx;
	                      y += stack.shift();
	                    }

	                    pts.push(x, y);
	                    path.bezierCurveTo.apply(path, _toConsumableArray(pts.slice(0, 6)));
	                    path.bezierCurveTo.apply(path, _toConsumableArray(pts.slice(6)));
	                    break;

	                  default:
	                    throw new Error('Unknown op: 12 ' + op);
	                }
	                break;

	              default:
	                throw new Error('Unknown op: ' + op);
	            }
	          } else if (op < 247) {
	            stack.push(op - 139);
	          } else if (op < 251) {
	            var b1 = stream.readUInt8();
	            stack.push((op - 247) * 256 + b1 + 108);
	          } else if (op < 255) {
	            var b1 = stream.readUInt8();
	            stack.push(-(op - 251) * 256 - b1 - 108);
	          } else {
	            stack.push(stream.readInt32BE() / 65536);
	          }
	        }
	      };

	      parse();
	      return path;
	    }
	  }]);

	  return CFFGlyph;
	}(Glyph);

	var SBIXImage = new r.Struct({
	  originX: r.uint16,
	  originY: r.uint16,
	  type: new r.String(4),
	  data: new r.Buffer(function (t) {
	    return t.parent.buflen - t._currentOffset;
	  })
	});

	/**
	 * Represents a color (e.g. emoji) glyph in Apple's SBIX format.
	 */

	var SBIXGlyph = function (_TTFGlyph) {
	  _inherits(SBIXGlyph, _TTFGlyph);

	  function SBIXGlyph() {
	    _classCallCheck(this, SBIXGlyph);

	    return _possibleConstructorReturn(this, (SBIXGlyph.__proto__ || _Object$getPrototypeOf(SBIXGlyph)).apply(this, arguments));
	  }

	  _createClass(SBIXGlyph, [{
	    key: 'getImageForSize',

	    /**
	     * Returns an object representing a glyph image at the given point size.
	     * The object has a data property with a Buffer containing the actual image data,
	     * along with the image type, and origin.
	     *
	     * @param {number} size
	     * @return {object}
	     */
	    value: function getImageForSize(size) {
	      for (var i = 0; i < this._font.sbix.imageTables.length; i++) {
	        var table = this._font.sbix.imageTables[i];
	        if (table.ppem >= size) {
	          break;
	        }
	      }

	      var offsets = table.imageOffsets;
	      var start = offsets[this.id];
	      var end = offsets[this.id + 1];

	      if (start === end) {
	        return null;
	      }

	      this._font.stream.pos = start;
	      return SBIXImage.decode(this._font.stream, { buflen: end - start });
	    }
	  }, {
	    key: 'render',
	    value: function render(ctx, size) {
	      var img = this.getImageForSize(size);
	      if (img != null) {
	        var scale = size / this._font.unitsPerEm;
	        ctx.image(img.data, { height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale });
	      }

	      if (this._font.sbix.flags.renderOutlines) {
	        _get(SBIXGlyph.prototype.__proto__ || _Object$getPrototypeOf(SBIXGlyph.prototype), 'render', this).call(this, ctx, size);
	      }
	    }
	  }]);

	  return SBIXGlyph;
	}(TTFGlyph);

	var COLRLayer = function COLRLayer(glyph, color) {
	  _classCallCheck(this, COLRLayer);

	  this.glyph = glyph;
	  this.color = color;
	};

	/**
	 * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.
	 * Each glyph in this format contain a list of colored layers, each
	 * of which  is another vector glyph.
	 */


	var COLRGlyph = function (_Glyph) {
	  _inherits(COLRGlyph, _Glyph);

	  function COLRGlyph() {
	    _classCallCheck(this, COLRGlyph);

	    return _possibleConstructorReturn(this, (COLRGlyph.__proto__ || _Object$getPrototypeOf(COLRGlyph)).apply(this, arguments));
	  }

	  _createClass(COLRGlyph, [{
	    key: '_getBBox',
	    value: function _getBBox() {
	      var bbox = new BBox();
	      for (var i = 0; i < this.layers.length; i++) {
	        var layer = this.layers[i];
	        var b = layer.glyph.bbox;
	        bbox.addPoint(b.minX, b.minY);
	        bbox.addPoint(b.maxX, b.maxY);
	      }

	      return bbox;
	    }

	    /**
	     * Returns an array of objects containing the glyph and color for
	     * each layer in the composite color glyph.
	     * @type {object[]}
	     */

	  }, {
	    key: 'render',
	    value: function render(ctx, size) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.layers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var _step$value = _step.value,
	              glyph = _step$value.glyph,
	              color = _step$value.color;

	          ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
	          glyph.render(ctx, size);
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return;
	    }
	  }, {
	    key: 'layers',
	    get: function get() {
	      var cpal = this._font.CPAL;
	      var colr = this._font.COLR;
	      var low = 0;
	      var high = colr.baseGlyphRecord.length - 1;

	      while (low <= high) {
	        var mid = low + high >> 1;
	        var rec = colr.baseGlyphRecord[mid];

	        if (this.id < rec.gid) {
	          high = mid - 1;
	        } else if (this.id > rec.gid) {
	          low = mid + 1;
	        } else {
	          var baseLayer = rec;
	          break;
	        }
	      }

	      // if base glyph not found in COLR table,
	      // default to normal glyph from glyf or CFF
	      if (baseLayer == null) {
	        var g = this._font._getBaseGlyph(this.id);
	        var color = {
	          red: 0,
	          green: 0,
	          blue: 0,
	          alpha: 255
	        };

	        return [new COLRLayer(g, color)];
	      }

	      // otherwise, return an array of all the layers
	      var layers = [];
	      for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {
	        var rec = colr.layerRecords[i];
	        var color = cpal.colorRecords[rec.paletteIndex];
	        var g = this._font._getBaseGlyph(rec.gid);
	        layers.push(new COLRLayer(g, color));
	      }

	      return layers;
	    }
	  }]);

	  return COLRGlyph;
	}(Glyph);

	var TUPLES_SHARE_POINT_NUMBERS = 0x8000;
	var TUPLE_COUNT_MASK = 0x0fff;
	var EMBEDDED_TUPLE_COORD = 0x8000;
	var INTERMEDIATE_TUPLE = 0x4000;
	var PRIVATE_POINT_NUMBERS = 0x2000;
	var TUPLE_INDEX_MASK = 0x0fff;
	var POINTS_ARE_WORDS = 0x80;
	var POINT_RUN_COUNT_MASK = 0x7f;
	var DELTAS_ARE_ZERO = 0x80;
	var DELTAS_ARE_WORDS = 0x40;
	var DELTA_RUN_COUNT_MASK = 0x3f;

	/**
	 * This class is transforms TrueType glyphs according to the data from
	 * the Apple Advanced Typography variation tables (fvar, gvar, and avar).
	 * These tables allow infinite adjustments to glyph weight, width, slant,
	 * and optical size without the designer needing to specify every exact style.
	 *
	 * Apple's documentation for these tables is not great, so thanks to the
	 * Freetype project for figuring much of this out.
	 *
	 * @private
	 */

	var GlyphVariationProcessor = function () {
	  function GlyphVariationProcessor(font, coords) {
	    _classCallCheck(this, GlyphVariationProcessor);

	    this.font = font;
	    this.normalizedCoords = this.normalizeCoords(coords);
	  }

	  _createClass(GlyphVariationProcessor, [{
	    key: 'normalizeCoords',
	    value: function normalizeCoords(coords) {
	      // the default mapping is linear along each axis, in two segments:
	      // from the minValue to defaultValue, and from defaultValue to maxValue.
	      var normalized = [];
	      for (var i = 0; i < this.font.fvar.axis.length; i++) {
	        var axis = this.font.fvar.axis[i];
	        if (coords[i] < axis.defaultValue) {
	          normalized.push((coords[i] - axis.defaultValue) / (axis.defaultValue - axis.minValue));
	        } else {
	          normalized.push((coords[i] - axis.defaultValue) / (axis.maxValue - axis.defaultValue));
	        }
	      }

	      // if there is an avar table, the normalized value is calculated
	      // by interpolating between the two nearest mapped values.
	      if (this.font.avar) {
	        for (var i = 0; i < this.font.avar.segment.length; i++) {
	          var segment = this.font.avar.segment[i];
	          for (var j = 0; j < segment.correspondence.length; j++) {
	            var pair = segment.correspondence[j];
	            if (j >= 1 && normalized[i] < pair.fromCoord) {
	              var prev = segment.correspondence[j - 1];
	              normalized[i] = (normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) / (pair.fromCoord - prev.fromCoord) + prev.toCoord;

	              break;
	            }
	          }
	        }
	      }

	      return normalized;
	    }
	  }, {
	    key: 'transformPoints',
	    value: function transformPoints(gid, glyphPoints) {
	      if (!this.font.fvar || !this.font.gvar) {
	        return;
	      }

	      var gvar = this.font.gvar;

	      if (gid >= gvar.glyphCount) {
	        return;
	      }

	      var offset = gvar.offsets[gid];
	      if (offset === gvar.offsets[gid + 1]) {
	        return;
	      }

	      // Read the gvar data for this glyph
	      var stream = this.font.stream;

	      stream.pos = offset;
	      if (stream.pos >= stream.length) {
	        return;
	      }

	      var tupleCount = stream.readUInt16BE();
	      var offsetToData = offset + stream.readUInt16BE();

	      if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {
	        var here = stream.pos;
	        stream.pos = offsetToData;
	        var sharedPoints = this.decodePoints();
	        offsetToData = stream.pos;
	        stream.pos = here;
	      }

	      var origPoints = glyphPoints.map(function (pt) {
	        return pt.copy();
	      });

	      tupleCount &= TUPLE_COUNT_MASK;
	      for (var i = 0; i < tupleCount; i++) {
	        var tupleDataSize = stream.readUInt16BE();
	        var tupleIndex = stream.readUInt16BE();

	        if (tupleIndex & EMBEDDED_TUPLE_COORD) {
	          var tupleCoords = [];
	          for (var a = 0; a < gvar.axisCount; a++) {
	            tupleCoords.push(stream.readInt16BE() / 16384);
	          }
	        } else {
	          if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {
	            throw new Error('Invalid gvar table');
	          }

	          var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];
	        }

	        if (tupleIndex & INTERMEDIATE_TUPLE) {
	          var startCoords = [];
	          for (var _a = 0; _a < gvar.axisCount; _a++) {
	            startCoords.push(stream.readInt16BE() / 16384);
	          }

	          var endCoords = [];
	          for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {
	            endCoords.push(stream.readInt16BE() / 16384);
	          }
	        }

	        // Get the factor at which to apply this tuple
	        var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
	        if (factor === 0) {
	          offsetToData += tupleDataSize;
	          continue;
	        }

	        var here = stream.pos;
	        stream.pos = offsetToData;

	        if (tupleIndex & PRIVATE_POINT_NUMBERS) {
	          var points = this.decodePoints();
	        } else {
	          var points = sharedPoints;
	        }

	        // points.length = 0 means there are deltas for all points
	        var nPoints = points.length === 0 ? glyphPoints.length : points.length;
	        var xDeltas = this.decodeDeltas(nPoints);
	        var yDeltas = this.decodeDeltas(nPoints);

	        if (points.length === 0) {
	          // all points
	          for (var _i = 0; _i < glyphPoints.length; _i++) {
	            var point = glyphPoints[_i];
	            point.x += Math.round(xDeltas[_i] * factor);
	            point.y += Math.round(yDeltas[_i] * factor);
	          }
	        } else {
	          var outPoints = origPoints.map(function (pt) {
	            return pt.copy();
	          });
	          var hasDelta = glyphPoints.map(function () {
	            return false;
	          });

	          for (var _i2 = 0; _i2 < points.length; _i2++) {
	            var idx = points[_i2];
	            if (idx < glyphPoints.length) {
	              var _point = outPoints[idx];
	              hasDelta[idx] = true;

	              _point.x += Math.round(xDeltas[_i2] * factor);
	              _point.y += Math.round(yDeltas[_i2] * factor);
	            }
	          }

	          this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);

	          for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {
	            var deltaX = outPoints[_i3].x - origPoints[_i3].x;
	            var deltaY = outPoints[_i3].y - origPoints[_i3].y;

	            glyphPoints[_i3].x += deltaX;
	            glyphPoints[_i3].y += deltaY;
	          }
	        }

	        offsetToData += tupleDataSize;
	        stream.pos = here;
	      }
	    }
	  }, {
	    key: 'decodePoints',
	    value: function decodePoints() {
	      var stream = this.font.stream;
	      var count = stream.readUInt8();

	      if (count & POINTS_ARE_WORDS) {
	        count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
	      }

	      var points = new Uint16Array(count);
	      var i = 0;
	      var point = 0;
	      while (i < count) {
	        var run = stream.readUInt8();
	        var runCount = (run & POINT_RUN_COUNT_MASK) + 1;
	        var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;

	        for (var j = 0; j < runCount && i < count; j++) {
	          point += fn.call(stream);
	          points[i++] = point;
	        }
	      }

	      return points;
	    }
	  }, {
	    key: 'decodeDeltas',
	    value: function decodeDeltas(count) {
	      var stream = this.font.stream;
	      var i = 0;
	      var deltas = new Int16Array(count);

	      while (i < count) {
	        var run = stream.readUInt8();
	        var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;

	        if (run & DELTAS_ARE_ZERO) {
	          i += runCount;
	        } else {
	          var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
	          for (var j = 0; j < runCount && i < count; j++) {
	            deltas[i++] = fn.call(stream);
	          }
	        }
	      }

	      return deltas;
	    }
	  }, {
	    key: 'tupleFactor',
	    value: function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
	      var normalized = this.normalizedCoords;
	      var gvar = this.font.gvar;

	      var factor = 1;

	      for (var i = 0; i < gvar.axisCount; i++) {
	        if (tupleCoords[i] === 0) {
	          continue;
	        }

	        if (normalized[i] === 0) {
	          return 0;
	        }

	        if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {
	          if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {
	            return 0;
	          }

	          factor = factor * normalized[i] / tupleCoords[i];
	        } else {
	          if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {
	            return 0;
	          } else if (normalized[i] < tupleCoords[i]) {
	            factor = factor * (normalized[i] - startCoords[i]) / (tupleCoords[i] - startCoords[i]);
	          } else {
	            factor = factor * (endCoords[i] - normalized[i]) / (endCoords[i] - tupleCoords[i]);
	          }
	        }
	      }

	      return factor;
	    }

	    // Interpolates points without delta values.
	    // Needed for the Ø and Q glyphs in Skia.
	    // Algorithm from Freetype.

	  }, {
	    key: 'interpolateMissingDeltas',
	    value: function interpolateMissingDeltas(points, inPoints, hasDelta) {
	      if (points.length === 0) {
	        return;
	      }

	      var point = 0;
	      while (point < points.length) {
	        var firstPoint = point;

	        // find the end point of the contour
	        var endPoint = point;
	        var pt = points[endPoint];
	        while (!pt.endContour) {
	          pt = points[++endPoint];
	        }

	        // find the first point that has a delta
	        while (point <= endPoint && !hasDelta[point]) {
	          point++;
	        }

	        if (point > endPoint) {
	          continue;
	        }

	        var firstDelta = point;
	        var curDelta = point;
	        point++;

	        while (point <= endPoint) {
	          // find the next point with a delta, and interpolate intermediate points
	          if (hasDelta[point]) {
	            this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
	            curDelta = point;
	          }

	          point++;
	        }

	        // shift contour if we only have a single delta
	        if (curDelta === firstDelta) {
	          this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
	        } else {
	          // otherwise, handle the remaining points at the end and beginning of the contour
	          this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);

	          if (firstDelta > 0) {
	            this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
	          }
	        }

	        point = endPoint + 1;
	      }
	    }
	  }, {
	    key: 'deltaInterpolate',
	    value: function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
	      if (p1 > p2) {
	        return;
	      }

	      var iterable = ['x', 'y'];
	      for (var i = 0; i < iterable.length; i++) {
	        var k = iterable[i];
	        if (inPoints[ref1][k] > inPoints[ref2][k]) {
	          var p = ref1;
	          ref1 = ref2;
	          ref2 = p;
	        }

	        var in1 = inPoints[ref1][k];
	        var in2 = inPoints[ref2][k];
	        var out1 = outPoints[ref1][k];
	        var out2 = outPoints[ref2][k];

	        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);

	        for (var _p = p1; _p <= p2; _p++) {
	          var out = inPoints[_p][k];

	          if (out <= in1) {
	            out += out1 - in1;
	          } else if (out >= in2) {
	            out += out2 - in2;
	          } else {
	            out = out1 + (out - in1) * scale;
	          }

	          outPoints[_p][k] = out;
	        }
	      }
	    }
	  }, {
	    key: 'deltaShift',
	    value: function deltaShift(p1, p2, ref, inPoints, outPoints) {
	      var deltaX = outPoints[ref].x - inPoints[ref].x;
	      var deltaY = outPoints[ref].y - inPoints[ref].y;

	      if (deltaX === 0 && deltaY === 0) {
	        return;
	      }

	      for (var p = p1; p <= p2; p++) {
	        if (p !== ref) {
	          outPoints[p].x += deltaX;
	          outPoints[p].y += deltaY;
	        }
	      }
	    }
	  }]);

	  return GlyphVariationProcessor;
	}();

	var Subset = function () {
	  function Subset(font) {
	    _classCallCheck(this, Subset);

	    this.font = font;
	    this.glyphs = [];
	    this.mapping = {};

	    // always include the missing glyph
	    this.includeGlyph(0);
	  }

	  _createClass(Subset, [{
	    key: 'includeGlyph',
	    value: function includeGlyph(glyph) {
	      if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {
	        glyph = glyph.id;
	      }

	      if (this.mapping[glyph] == null) {
	        this.glyphs.push(glyph);
	        this.mapping[glyph] = this.glyphs.length - 1;
	      }

	      return this.mapping[glyph];
	    }
	  }, {
	    key: 'encodeStream',
	    value: function encodeStream() {
	      var _this = this;

	      var s = new r.EncodeStream();

	      process.nextTick(function () {
	        _this.encode(s);
	        return s.end();
	      });

	      return s;
	    }
	  }]);

	  return Subset;
	}();

	// Flags for simple glyphs
	var ON_CURVE$1 = 1 << 0;
	var X_SHORT_VECTOR$1 = 1 << 1;
	var Y_SHORT_VECTOR$1 = 1 << 2;
	var REPEAT$1 = 1 << 3;
	var SAME_X$1 = 1 << 4;
	var SAME_Y$1 = 1 << 5;

	var Point$1 = function () {
	  function Point() {
	    _classCallCheck(this, Point);
	  }

	  _createClass(Point, null, [{
	    key: 'size',
	    value: function size(val) {
	      return val >= 0 && val <= 255 ? 1 : 2;
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream, value) {
	      if (value >= 0 && value <= 255) {
	        stream.writeUInt8(value);
	      } else {
	        stream.writeInt16BE(value);
	      }
	    }
	  }]);

	  return Point;
	}();

	var Glyf = new r.Struct({
	  numberOfContours: r.int16, // if negative, this is a composite glyph
	  xMin: r.int16,
	  yMin: r.int16,
	  xMax: r.int16,
	  yMax: r.int16,
	  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),
	  instructions: new r.Array(r.uint8, r.uint16),
	  flags: new r.Array(r.uint8, 0),
	  xPoints: new r.Array(Point$1, 0),
	  yPoints: new r.Array(Point$1, 0)
	});

	/**
	 * Encodes TrueType glyph outlines
	 */

	var TTFGlyphEncoder = function () {
	  function TTFGlyphEncoder() {
	    _classCallCheck(this, TTFGlyphEncoder);
	  }

	  _createClass(TTFGlyphEncoder, [{
	    key: 'encodeSimple',
	    value: function encodeSimple(path) {
	      var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      var endPtsOfContours = [];
	      var xPoints = [];
	      var yPoints = [];
	      var flags = [];
	      var same = 0;
	      var lastX = 0,
	          lastY = 0,
	          lastFlag = 0;
	      var pointCount = 0;

	      for (var i = 0; i < path.commands.length; i++) {
	        var c = path.commands[i];

	        for (var j = 0; j < c.args.length; j += 2) {
	          var x = c.args[j];
	          var y = c.args[j + 1];
	          var flag = 0;

	          // If the ending point of a quadratic curve is the midpoint
	          // between the control point and the control point of the next
	          // quadratic curve, we can omit the ending point.
	          if (c.command === 'quadraticCurveTo' && j === 2) {
	            var next = path.commands[i + 1];
	            if (next && next.command === 'quadraticCurveTo') {
	              var midX = (lastX + next.args[0]) / 2;
	              var midY = (lastY + next.args[1]) / 2;

	              if (x === midX && y === midY) {
	                continue;
	              }
	            }
	          }

	          // All points except control points are on curve.
	          if (!(c.command === 'quadraticCurveTo' && j === 0)) {
	            flag |= ON_CURVE$1;
	          }

	          flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);
	          flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);

	          if (flag === lastFlag && same < 255) {
	            flags[flags.length - 1] |= REPEAT$1;
	            same++;
	          } else {
	            if (same > 0) {
	              flags.push(same);
	              same = 0;
	            }

	            flags.push(flag);
	            lastFlag = flag;
	          }

	          lastX = x;
	          lastY = y;
	          pointCount++;
	        }

	        if (c.command === 'closePath') {
	          endPtsOfContours.push(pointCount - 1);
	        }
	      }

	      // Close the path if the last command didn't already
	      if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {
	        endPtsOfContours.push(pointCount - 1);
	      }

	      var bbox = path.bbox;
	      var glyf = {
	        numberOfContours: endPtsOfContours.length,
	        xMin: bbox.minX,
	        yMin: bbox.minY,
	        xMax: bbox.maxX,
	        yMax: bbox.maxY,
	        endPtsOfContours: endPtsOfContours,
	        instructions: instructions,
	        flags: flags,
	        xPoints: xPoints,
	        yPoints: yPoints
	      };

	      var size = Glyf.size(glyf);
	      var tail = 4 - size % 4;

	      var stream = new r.EncodeStream(size + tail);
	      Glyf.encode(stream, glyf);

	      // Align to 4-byte length
	      if (tail !== 0) {
	        stream.fill(0, tail);
	      }

	      return stream.buffer;
	    }
	  }, {
	    key: '_encodePoint',
	    value: function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
	      var diff = value - last;

	      if (value === last) {
	        flag |= sameFlag;
	      } else {
	        if (-255 <= diff && diff <= 255) {
	          flag |= shortFlag;
	          if (diff < 0) {
	            diff = -diff;
	          } else {
	            flag |= sameFlag;
	          }
	        }

	        points.push(diff);
	      }

	      return flag;
	    }
	  }]);

	  return TTFGlyphEncoder;
	}();

	var TTFSubset = function (_Subset) {
	  _inherits(TTFSubset, _Subset);

	  function TTFSubset(font) {
	    _classCallCheck(this, TTFSubset);

	    var _this = _possibleConstructorReturn(this, (TTFSubset.__proto__ || _Object$getPrototypeOf(TTFSubset)).call(this, font));

	    _this.glyphEncoder = new TTFGlyphEncoder();
	    return _this;
	  }

	  _createClass(TTFSubset, [{
	    key: '_addGlyph',
	    value: function _addGlyph(gid) {
	      var glyph = this.font.getGlyph(gid);
	      var glyf = glyph._decode();

	      // get the offset to the glyph from the loca table
	      var curOffset = this.font.loca.offsets[gid];
	      var nextOffset = this.font.loca.offsets[gid + 1];

	      var stream = this.font._getTableStream('glyf');
	      stream.pos += curOffset;

	      var buffer = stream.readBuffer(nextOffset - curOffset);

	      // if it is a compound glyph, include its components
	      if (glyf && glyf.numberOfContours < 0) {
	        buffer = new Buffer(buffer);
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = _getIterator(glyf.components), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var component = _step.value;

	            gid = this.includeGlyph(component.glyphID);
	            buffer.writeUInt16BE(gid, component.pos);
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }
	      } else if (glyf && this.font._variationProcessor) {
	        // If this is a TrueType variation glyph, re-encode the path
	        buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
	      }

	      this.glyf.push(buffer);
	      this.loca.offsets.push(this.offset);

	      this.hmtx.metrics.push({
	        advance: glyph.advanceWidth,
	        bearing: glyph._getMetrics().leftBearing
	      });

	      this.offset += buffer.length;
	      return this.glyf.length - 1;
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream) {
	      // tables required by PDF spec:
	      //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm
	      //
	      // additional tables required for standalone fonts:
	      //   name, cmap, OS/2, post

	      this.glyf = [];
	      this.offset = 0;
	      this.loca = {
	        offsets: []
	      };

	      this.hmtx = {
	        metrics: [],
	        bearings: []
	      };

	      // include all the glyphs
	      // not using a for loop because we need to support adding more
	      // glyphs to the array as we go, and CoffeeScript caches the length.
	      var i = 0;
	      while (i < this.glyphs.length) {
	        this._addGlyph(this.glyphs[i++]);
	      }

	      var maxp = cloneDeep(this.font.maxp);
	      maxp.numGlyphs = this.glyf.length;

	      this.loca.offsets.push(this.offset);
	      tables.loca.preEncode.call(this.loca);

	      var head = cloneDeep(this.font.head);
	      head.indexToLocFormat = this.loca.version;

	      var hhea = cloneDeep(this.font.hhea);
	      hhea.numberOfMetrics = this.hmtx.metrics.length;

	      // map = []
	      // for index in [0...256]
	      //     if index < @numGlyphs
	      //         map[index] = index
	      //     else
	      //         map[index] = 0
	      //
	      // cmapTable =
	      //     version: 0
	      //     length: 262
	      //     language: 0
	      //     codeMap: map
	      //
	      // cmap =
	      //     version: 0
	      //     numSubtables: 1
	      //     tables: [
	      //         platformID: 1
	      //         encodingID: 0
	      //         table: cmapTable
	      //     ]

	      // TODO: subset prep, cvt, fpgm?
	      Directory.encode(stream, {
	        tables: {
	          head: head,
	          hhea: hhea,
	          loca: this.loca,
	          maxp: maxp,
	          'cvt ': this.font['cvt '],
	          prep: this.font.prep,
	          glyf: this.glyf,
	          hmtx: this.hmtx,
	          fpgm: this.font.fpgm

	          // name: clone @font.name
	          // 'OS/2': clone @font['OS/2']
	          // post: clone @font.post
	          // cmap: cmap
	        }
	      });
	    }
	  }]);

	  return TTFSubset;
	}(Subset);

	var CFFSubset = function (_Subset) {
	  _inherits(CFFSubset, _Subset);

	  function CFFSubset(font) {
	    _classCallCheck(this, CFFSubset);

	    var _this = _possibleConstructorReturn(this, (CFFSubset.__proto__ || _Object$getPrototypeOf(CFFSubset)).call(this, font));

	    _this.cff = _this.font['CFF '];
	    if (!_this.cff) {
	      throw new Error('Not a CFF Font');
	    }
	    return _this;
	  }

	  _createClass(CFFSubset, [{
	    key: 'subsetCharstrings',
	    value: function subsetCharstrings() {
	      this.charstrings = [];
	      var gsubrs = {};

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.glyphs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var gid = _step.value;

	          this.charstrings.push(this.cff.getCharString(gid));

	          var glyph = this.font.getGlyph(gid);
	          var path = glyph.path; // this causes the glyph to be parsed

	          for (var subr in glyph._usedGsubrs) {
	            gsubrs[subr] = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
	    }
	  }, {
	    key: 'subsetSubrs',
	    value: function subsetSubrs(subrs, used) {
	      var res = [];
	      for (var i = 0; i < subrs.length; i++) {
	        var subr = subrs[i];
	        if (used[i]) {
	          this.cff.stream.pos = subr.offset;
	          res.push(this.cff.stream.readBuffer(subr.length));
	        } else {
	          res.push(new Buffer([11])); // return
	        }
	      }

	      return res;
	    }
	  }, {
	    key: 'subsetFontdict',
	    value: function subsetFontdict(topDict) {
	      topDict.FDArray = [];
	      topDict.FDSelect = {
	        version: 0,
	        fds: []
	      };

	      var used_fds = {};
	      var used_subrs = [];
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(this.glyphs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var gid = _step2.value;

	          var fd = this.cff.fdForGlyph(gid);
	          if (fd == null) {
	            continue;
	          }

	          if (!used_fds[fd]) {
	            topDict.FDArray.push(_Object$assign({}, this.cff.topDict.FDArray[fd]));
	            used_subrs.push({});
	          }

	          used_fds[fd] = true;
	          topDict.FDSelect.fds.push(topDict.FDArray.length - 1);

	          var glyph = this.font.getGlyph(gid);
	          var path = glyph.path; // this causes the glyph to be parsed
	          for (var subr in glyph._usedSubrs) {
	            used_subrs[used_subrs.length - 1][subr] = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      for (var i = 0; i < topDict.FDArray.length; i++) {
	        var dict = topDict.FDArray[i];
	        delete dict.FontName;
	        if (dict.Private && dict.Private.Subrs) {
	          dict.Private = _Object$assign({}, dict.Private);
	          dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
	        }
	      }

	      return;
	    }
	  }, {
	    key: 'createCIDFontdict',
	    value: function createCIDFontdict(topDict) {
	      var used_subrs = {};
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = _getIterator(this.glyphs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var gid = _step3.value;

	          var glyph = this.font.getGlyph(gid);
	          var path = glyph.path; // this causes the glyph to be parsed

	          for (var subr in glyph._usedSubrs) {
	            used_subrs[subr] = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      var privateDict = _Object$assign({}, this.cff.topDict.Private);
	      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);

	      topDict.FDArray = [{ Private: privateDict }];
	      return topDict.FDSelect = {
	        version: 3,
	        nRanges: 1,
	        ranges: [{ first: 0, fd: 0 }],
	        sentinel: this.charstrings.length
	      };
	    }
	  }, {
	    key: 'addString',
	    value: function addString(string) {
	      if (!string) {
	        return null;
	      }

	      if (!this.strings) {
	        this.strings = [];
	      }

	      this.strings.push(string);
	      return standardStrings.length + this.strings.length - 1;
	    }
	  }, {
	    key: 'encode',
	    value: function encode(stream) {
	      this.subsetCharstrings();

	      var charset = {
	        version: this.charstrings.length > 255 ? 2 : 1,
	        ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]
	      };

	      var topDict = _Object$assign({}, this.cff.topDict);
	      topDict.Private = null;
	      topDict.charset = charset;
	      topDict.Encoding = null;
	      topDict.CharStrings = this.charstrings;

	      var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var key = _arr[_i];
	        topDict[key] = this.addString(this.cff.string(topDict[key]));
	      }

	      topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];
	      topDict.CIDCount = this.charstrings.length;

	      if (this.cff.isCIDFont) {
	        this.subsetFontdict(topDict);
	      } else {
	        this.createCIDFontdict(topDict);
	      }

	      var top = {
	        header: this.cff.header,
	        nameIndex: [this.cff.postscriptName],
	        topDictIndex: [topDict],
	        stringIndex: this.strings,
	        globalSubrIndex: this.gsubrs
	      };

	      CFFTop.encode(stream, top);
	    }
	  }]);

	  return CFFSubset;
	}(Subset);

	var _class;
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	/**
	 * This is the base class for all SFNT-based font formats in fontkit.
	 * It supports TrueType, and PostScript glyphs, and several color glyph formats.
	 */
	var TTFFont = (_class = function () {
	  _createClass(TTFFont, null, [{
	    key: 'probe',
	    value: function probe(buffer) {
	      var format = buffer.toString('ascii', 0, 4);
	      return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);
	    }
	  }]);

	  function TTFFont(stream) {
	    var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	    _classCallCheck(this, TTFFont);

	    this.stream = stream;
	    this._directoryPos = this.stream.pos;
	    this._tables = {};
	    this._glyphs = {};
	    this._decodeDirectory();

	    // define properties for each table to lazily parse
	    for (var tag in this.directory.tables) {
	      var table = this.directory.tables[tag];
	      if (tables[tag] && table.length > 0) {
	        _Object$defineProperty(this, tag, {
	          get: this._getTable.bind(this, table)
	        });
	      }
	    }

	    if (variationCoords) {
	      this._variationProcessor = new GlyphVariationProcessor(this, variationCoords);
	    }
	  }

	  _createClass(TTFFont, [{
	    key: '_getTable',
	    value: function _getTable(table) {
	      if (!(table.tag in this._tables)) {
	        try {
	          this._tables[table.tag] = this._decodeTable(table);
	        } catch (e) {
	          if (fontkit.logErrors) {
	            console.error('Error decoding table ' + table.tag);
	            console.error(e.stack);
	          }
	        }
	      }

	      return this._tables[table.tag];
	    }
	  }, {
	    key: '_getTableStream',
	    value: function _getTableStream(tag) {
	      var table = this.directory.tables[tag];
	      if (table) {
	        this.stream.pos = table.offset;
	        return this.stream;
	      }

	      return null;
	    }
	  }, {
	    key: '_decodeDirectory',
	    value: function _decodeDirectory() {
	      return this.directory = Directory.decode(this.stream, { _startOffset: 0 });
	    }
	  }, {
	    key: '_decodeTable',
	    value: function _decodeTable(table) {
	      var pos = this.stream.pos;

	      var stream = this._getTableStream(table.tag);
	      var result = tables[table.tag].decode(stream, this, table.length);

	      this.stream.pos = pos;
	      return result;
	    }

	    /**
	     * The unique PostScript name for this font
	     * @type {string}
	     */

	  }, {
	    key: 'getName',


	    /**
	     * Gets a string from the font's `name` table
	     * `lang` is a BCP-47 language code.
	     * @return {string}
	     */
	    value: function getName(key) {
	      var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';

	      var record = this.name.records[key];
	      if (record) {
	        return record[lang];
	      }

	      return null;
	    }

	    /**
	     * The font's full name, e.g. "Helvetica Bold"
	     * @type {string}
	     */

	  }, {
	    key: 'hasGlyphForCodePoint',


	    /**
	     * Returns whether there is glyph in the font for the given unicode code point.
	     *
	     * @param {number} codePoint
	     * @return {boolean}
	     */
	    value: function hasGlyphForCodePoint(codePoint) {
	      return !!this._cmapProcessor.lookup(codePoint);
	    }

	    /**
	     * Maps a single unicode code point to a Glyph object.
	     * Does not perform any advanced substitutions (there is no context to do so).
	     *
	     * @param {number} codePoint
	     * @return {Glyph}
	     */

	  }, {
	    key: 'glyphForCodePoint',
	    value: function glyphForCodePoint(codePoint) {
	      return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);
	    }

	    /**
	     * Returns an array of Glyph objects for the given string.
	     * This is only a one-to-one mapping from characters to glyphs.
	     * For most uses, you should use font.layout (described below), which
	     * provides a much more advanced mapping supporting AAT and OpenType shaping.
	     *
	     * @param {string} string
	     * @return {Glyph[]}
	     */

	  }, {
	    key: 'glyphsForString',
	    value: function glyphsForString(string) {
	      var glyphs = [];
	      var len = string.length;
	      var idx = 0;
	      var last = -1;
	      var state = -1;

	      while (idx <= len) {
	        var code = 0;
	        var nextState = 0;

	        if (idx < len) {
	          // Decode the next codepoint from UTF 16
	          code = string.charCodeAt(idx++);
	          if (0xd800 <= code && code <= 0xdbff && idx < len) {
	            var next = string.charCodeAt(idx);
	            if (0xdc00 <= next && next <= 0xdfff) {
	              idx++;
	              code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
	            }
	          }

	          // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.
	          nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
	        } else {
	          idx++;
	        }

	        if (state === 0 && nextState === 1) {
	          // Variation selector following normal codepoint.
	          glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));
	        } else if (state === 0 && nextState === 0) {
	          // Normal codepoint following normal codepoint.
	          glyphs.push(this.glyphForCodePoint(last));
	        }

	        last = code;
	        state = nextState;
	      }

	      return glyphs;
	    }
	  }, {
	    key: 'layout',


	    /**
	     * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
	     *
	     * @param {string} string
	     * @param {string[]} [userFeatures]
	     * @param {string} [script]
	     * @param {string} [language]
	     * @return {GlyphRun}
	     */
	    value: function layout(string, userFeatures, script, language) {
	      return this._layoutEngine.layout(string, userFeatures, script, language);
	    }

	    /**
	     * Returns an array of strings that map to the given glyph id.
	     * @param {number} gid - glyph id
	     */

	  }, {
	    key: 'stringsForGlyph',
	    value: function stringsForGlyph(gid) {
	      return this._layoutEngine.stringsForGlyph(gid);
	    }

	    /**
	     * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
	     * (or mapped AAT tags) supported by the font.
	     * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
	     * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
	     *
	     * @type {string[]}
	     */

	  }, {
	    key: '_getBaseGlyph',
	    value: function _getBaseGlyph(glyph) {
	      var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      if (!this._glyphs[glyph]) {
	        if (this.directory.tables.glyf) {
	          this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);
	        } else if (this.directory.tables['CFF ']) {
	          this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);
	        }
	      }

	      return this._glyphs[glyph] || null;
	    }

	    /**
	     * Returns a glyph object for the given glyph id.
	     * You can pass the array of code points this glyph represents for
	     * your use later, and it will be stored in the glyph object.
	     *
	     * @param {number} glyph
	     * @param {number[]} characters
	     * @return {Glyph}
	     */

	  }, {
	    key: 'getGlyph',
	    value: function getGlyph(glyph) {
	      var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      if (!this._glyphs[glyph]) {
	        if (this.directory.tables.sbix) {
	          this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);
	        } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {
	          this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);
	        } else {
	          this._getBaseGlyph(glyph, characters);
	        }
	      }

	      return this._glyphs[glyph] || null;
	    }

	    /**
	     * Returns a Subset for this font.
	     * @return {Subset}
	     */

	  }, {
	    key: 'createSubset',
	    value: function createSubset() {
	      if (this.directory.tables['CFF ']) {
	        return new CFFSubset(this);
	      }

	      return new TTFSubset(this);
	    }

	    /**
	     * Returns an object describing the available variation axes
	     * that this font supports. Keys are setting tags, and values
	     * contain the axis name, range, and default value.
	     *
	     * @type {object}
	     */

	  }, {
	    key: 'getVariation',


	    /**
	     * Returns a new font with the given variation settings applied.
	     * Settings can either be an instance name, or an object containing
	     * variation tags as specified by the `variationAxes` property.
	     *
	     * @param {object} settings
	     * @return {TTFFont}
	     */
	    value: function getVariation(settings) {
	      if (!this.directory.tables.fvar || !this.directory.tables.gvar || !this.directory.tables.glyf) {
	        throw new Error('Variations require a font with the fvar, gvar, and glyf tables.');
	      }

	      if (typeof settings === 'string') {
	        settings = this.namedVariations[settings];
	      }

	      if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {
	        throw new Error('Variation settings must be either a variation name or settings object.');
	      }

	      // normalize the coordinates
	      var coords = this.fvar.axis.map(function (axis, i) {
	        var axisTag = axis.axisTag.trim();
	        if (axisTag in settings) {
	          return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
	        } else {
	          return axis.defaultValue;
	        }
	      });

	      var stream = new r.DecodeStream(this.stream.buffer);
	      stream.pos = this._directoryPos;

	      var font = new TTFFont(stream, coords);
	      font._tables = this._tables;

	      return font;
	    }

	    // Standardized format plugin API

	  }, {
	    key: 'getFont',
	    value: function getFont(name) {
	      return this.getVariation(name);
	    }
	  }, {
	    key: 'postscriptName',
	    get: function get() {
	      var name = this.name.records.postscriptName;
	      var lang = _Object$keys(name)[0];
	      return name[lang];
	    }
	  }, {
	    key: 'fullName',
	    get: function get() {
	      return this.getName('fullName');
	    }

	    /**
	     * The font's family name, e.g. "Helvetica"
	     * @type {string}
	     */

	  }, {
	    key: 'familyName',
	    get: function get() {
	      return this.getName('fontFamily');
	    }

	    /**
	     * The font's sub-family, e.g. "Bold".
	     * @type {string}
	     */

	  }, {
	    key: 'subfamilyName',
	    get: function get() {
	      return this.getName('fontSubfamily');
	    }

	    /**
	     * The font's copyright information
	     * @type {string}
	     */

	  }, {
	    key: 'copyright',
	    get: function get() {
	      return this.getName('copyright');
	    }

	    /**
	     * The font's version number
	     * @type {string}
	     */

	  }, {
	    key: 'version',
	    get: function get() {
	      return this.getName('version');
	    }

	    /**
	     * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
	     * @type {number}
	     */

	  }, {
	    key: 'ascent',
	    get: function get() {
	      return this.hhea.ascent;
	    }

	    /**
	     * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
	     * @type {number}
	     */

	  }, {
	    key: 'descent',
	    get: function get() {
	      return this.hhea.descent;
	    }

	    /**
	     * The amount of space that should be included between lines
	     * @type {number}
	     */

	  }, {
	    key: 'lineGap',
	    get: function get() {
	      return this.hhea.lineGap;
	    }

	    /**
	     * The offset from the normal underline position that should be used
	     * @type {number}
	     */

	  }, {
	    key: 'underlinePosition',
	    get: function get() {
	      return this.post.underlinePosition;
	    }

	    /**
	     * The weight of the underline that should be used
	     * @type {number}
	     */

	  }, {
	    key: 'underlineThickness',
	    get: function get() {
	      return this.post.underlineThickness;
	    }

	    /**
	     * If this is an italic font, the angle the cursor should be drawn at to match the font design
	     * @type {number}
	     */

	  }, {
	    key: 'italicAngle',
	    get: function get() {
	      return this.post.italicAngle;
	    }

	    /**
	     * The height of capital letters above the baseline.
	     * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
	     * @type {number}
	     */

	  }, {
	    key: 'capHeight',
	    get: function get() {
	      var os2 = this['OS/2'];
	      return os2 ? os2.capHeight : this.ascent;
	    }

	    /**
	     * The height of lower case letters in the font.
	     * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
	     * @type {number}
	     */

	  }, {
	    key: 'xHeight',
	    get: function get() {
	      var os2 = this['OS/2'];
	      return os2 ? os2.xHeight : 0;
	    }

	    /**
	     * The number of glyphs in the font.
	     * @type {number}
	     */

	  }, {
	    key: 'numGlyphs',
	    get: function get() {
	      return this.maxp.numGlyphs;
	    }

	    /**
	     * The size of the font’s internal coordinate grid
	     * @type {number}
	     */

	  }, {
	    key: 'unitsPerEm',
	    get: function get() {
	      return this.head.unitsPerEm;
	    }

	    /**
	     * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
	     * @type {BBox}
	     */

	  }, {
	    key: 'bbox',
	    get: function get() {
	      return _Object$freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
	    }
	  }, {
	    key: '_cmapProcessor',
	    get: function get() {
	      return new CmapProcessor(this.cmap);
	    }

	    /**
	     * An array of all of the unicode code points supported by the font.
	     * @type {number[]}
	     */

	  }, {
	    key: 'characterSet',
	    get: function get() {
	      return this._cmapProcessor.getCharacterSet();
	    }
	  }, {
	    key: '_layoutEngine',
	    get: function get() {
	      return new LayoutEngine(this);
	    }
	  }, {
	    key: 'availableFeatures',
	    get: function get() {
	      return this._layoutEngine.getAvailableFeatures();
	    }
	  }, {
	    key: 'variationAxes',
	    get: function get() {
	      var res = {};
	      if (!this.fvar) {
	        return res;
	      }

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.fvar.axis), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var axis = _step.value;

	          res[axis.axisTag.trim()] = {
	            name: axis.name.en,
	            min: axis.minValue,
	            default: axis.defaultValue,
	            max: axis.maxValue
	          };
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return res;
	    }

	    /**
	     * Returns an object describing the named variation instances
	     * that the font designer has specified. Keys are variation names
	     * and values are the variation settings for this instance.
	     *
	     * @type {object}
	     */

	  }, {
	    key: 'namedVariations',
	    get: function get() {
	      var res = {};
	      if (!this.fvar) {
	        return res;
	      }

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(this.fvar.instance), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var instance = _step2.value;

	          var settings = {};
	          for (var i = 0; i < this.fvar.axis.length; i++) {
	            var axis = this.fvar.axis[i];
	            settings[axis.axisTag.trim()] = instance.coord[i];
	          }

	          res[instance.name.en] = settings;
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return res;
	    }
	  }]);

	  return TTFFont;
	}(), (_applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype)), _class);

	var WOFFDirectoryEntry = new r.Struct({
	  tag: new r.String(4),
	  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),
	  compLength: r.uint32,
	  length: r.uint32,
	  origChecksum: r.uint32
	});

	var WOFFDirectory = new r.Struct({
	  tag: new r.String(4), // should be 'wOFF'
	  flavor: r.uint32,
	  length: r.uint32,
	  numTables: r.uint16,
	  reserved: new r.Reserved(r.uint16),
	  totalSfntSize: r.uint32,
	  majorVersion: r.uint16,
	  minorVersion: r.uint16,
	  metaOffset: r.uint32,
	  metaLength: r.uint32,
	  metaOrigLength: r.uint32,
	  privOffset: r.uint32,
	  privLength: r.uint32,
	  tables: new r.Array(WOFFDirectoryEntry, 'numTables')
	});

	WOFFDirectory.process = function () {
	  var tables = {};
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = _getIterator(this.tables), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var table = _step.value;

	      tables[table.tag] = table;
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  this.tables = tables;
	};

	var WOFFFont = function (_TTFFont) {
	  _inherits(WOFFFont, _TTFFont);

	  function WOFFFont() {
	    _classCallCheck(this, WOFFFont);

	    return _possibleConstructorReturn(this, (WOFFFont.__proto__ || _Object$getPrototypeOf(WOFFFont)).apply(this, arguments));
	  }

	  _createClass(WOFFFont, [{
	    key: '_decodeDirectory',
	    value: function _decodeDirectory() {
	      this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });
	    }
	  }, {
	    key: '_getTableStream',
	    value: function _getTableStream(tag) {
	      var table = this.directory.tables[tag];
	      if (table) {
	        this.stream.pos = table.offset;

	        if (table.compLength < table.length) {
	          this.stream.pos += 2; // skip deflate header
	          var outBuffer = new Buffer(table.length);
	          var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);
	          return new r.DecodeStream(buf);
	        } else {
	          return this.stream;
	        }
	      }

	      return null;
	    }
	  }], [{
	    key: 'probe',
	    value: function probe(buffer) {
	      return buffer.toString('ascii', 0, 4) === 'wOFF';
	    }
	  }]);

	  return WOFFFont;
	}(TTFFont);

	/**
	 * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.
	 */

	var WOFF2Glyph = function (_TTFGlyph) {
	  _inherits(WOFF2Glyph, _TTFGlyph);

	  function WOFF2Glyph() {
	    _classCallCheck(this, WOFF2Glyph);

	    return _possibleConstructorReturn(this, (WOFF2Glyph.__proto__ || _Object$getPrototypeOf(WOFF2Glyph)).apply(this, arguments));
	  }

	  _createClass(WOFF2Glyph, [{
	    key: '_decode',
	    value: function _decode() {
	      // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.
	      return this._font._transformedGlyphs[this.id];
	    }
	  }, {
	    key: '_getCBox',
	    value: function _getCBox() {
	      return this.path.bbox;
	    }
	  }]);

	  return WOFF2Glyph;
	}(TTFGlyph);

	var Base128 = {
	  decode: function decode(stream) {
	    var result = 0;
	    var iterable = [0, 1, 2, 3, 4];
	    for (var j = 0; j < iterable.length; j++) {
	      var i = iterable[j];
	      var code = stream.readUInt8();

	      // If any of the top seven bits are set then we're about to overflow.
	      if (result & 0xe0000000) {
	        throw new Error('Overflow');
	      }

	      result = result << 7 | code & 0x7f;
	      if ((code & 0x80) === 0) {
	        return result;
	      }
	    }

	    throw new Error('Bad base 128 number');
	  }
	};

	var knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];

	var WOFF2DirectoryEntry = new r.Struct({
	  flags: r.uint8,
	  customTag: new r.Optional(new r.String(4), function (t) {
	    return (t.flags & 0x3f) === 0x3f;
	  }),
	  tag: function tag(t) {
	    return t.customTag || knownTags[t.flags & 0x3f];
	  }, // || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },
	  length: Base128,
	  transformVersion: function transformVersion(t) {
	    return t.flags >>> 6 & 0x03;
	  },
	  transformed: function transformed(t) {
	    return t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0;
	  },
	  transformLength: new r.Optional(Base128, function (t) {
	    return t.transformed;
	  })
	});

	var WOFF2Directory = new r.Struct({
	  tag: new r.String(4), // should be 'wOF2'
	  flavor: r.uint32,
	  length: r.uint32,
	  numTables: r.uint16,
	  reserved: new r.Reserved(r.uint16),
	  totalSfntSize: r.uint32,
	  totalCompressedSize: r.uint32,
	  majorVersion: r.uint16,
	  minorVersion: r.uint16,
	  metaOffset: r.uint32,
	  metaLength: r.uint32,
	  metaOrigLength: r.uint32,
	  privOffset: r.uint32,
	  privLength: r.uint32,
	  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')
	});

	WOFF2Directory.process = function () {
	  var tables = {};
	  for (var i = 0; i < this.tables.length; i++) {
	    var table = this.tables[i];
	    tables[table.tag] = table;
	  }

	  return this.tables = tables;
	};

	/**
	 * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2
	 * See spec here: http://www.w3.org/TR/WOFF2/
	 */

	var WOFF2Font = function (_TTFFont) {
	  _inherits(WOFF2Font, _TTFFont);

	  function WOFF2Font() {
	    _classCallCheck(this, WOFF2Font);

	    return _possibleConstructorReturn(this, (WOFF2Font.__proto__ || _Object$getPrototypeOf(WOFF2Font)).apply(this, arguments));
	  }

	  _createClass(WOFF2Font, [{
	    key: '_decodeDirectory',
	    value: function _decodeDirectory() {
	      this.directory = WOFF2Directory.decode(this.stream);
	      this._dataPos = this.stream.pos;
	    }
	  }, {
	    key: '_decompress',
	    value: function _decompress() {
	      // decompress data and setup table offsets if we haven't already
	      if (!this._decompressed) {
	        this.stream.pos = this._dataPos;
	        var buffer = this.stream.readBuffer(this.directory.totalCompressedSize);

	        var decompressedSize = 0;
	        for (var tag in this.directory.tables) {
	          var entry = this.directory.tables[tag];
	          entry.offset = decompressedSize;
	          decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
	        }

	        var decompressed = brotli(buffer, decompressedSize);
	        if (!decompressed) {
	          throw new Error('Error decoding compressed data in WOFF2');
	        }

	        this.stream = new r.DecodeStream(new Buffer(decompressed));
	        this._decompressed = true;
	      }
	    }
	  }, {
	    key: '_decodeTable',
	    value: function _decodeTable(table) {
	      this._decompress();
	      return _get(WOFF2Font.prototype.__proto__ || _Object$getPrototypeOf(WOFF2Font.prototype), '_decodeTable', this).call(this, table);
	    }

	    // Override this method to get a glyph and return our
	    // custom subclass if there is a glyf table.

	  }, {
	    key: '_getBaseGlyph',
	    value: function _getBaseGlyph(glyph) {
	      var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      if (!this._glyphs[glyph]) {
	        if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
	          if (!this._transformedGlyphs) {
	            this._transformGlyfTable();
	          }
	          return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);
	        } else {
	          return _get(WOFF2Font.prototype.__proto__ || _Object$getPrototypeOf(WOFF2Font.prototype), '_getBaseGlyph', this).call(this, glyph, characters);
	        }
	      }
	    }
	  }, {
	    key: '_transformGlyfTable',
	    value: function _transformGlyfTable() {
	      this._decompress();
	      this.stream.pos = this.directory.tables.glyf.offset;
	      var table = GlyfTable.decode(this.stream);
	      var glyphs = [];

	      for (var index = 0; index < table.numGlyphs; index++) {
	        var glyph = {};
	        var nContours = table.nContours.readInt16BE();
	        glyph.numberOfContours = nContours;

	        if (nContours > 0) {
	          // simple glyph
	          var nPoints = [];
	          var totalPoints = 0;

	          for (var i = 0; i < nContours; i++) {
	            var _r = read255UInt16(table.nPoints);
	            nPoints.push(_r);
	            totalPoints += _r;
	          }

	          glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);
	          for (var _i = 0; _i < nContours; _i++) {
	            glyph.points[nPoints[_i] - 1].endContour = true;
	          }

	          var instructionSize = read255UInt16(table.glyphs);
	        } else if (nContours < 0) {
	          // composite glyph
	          var haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);
	          if (haveInstructions) {
	            var instructionSize = read255UInt16(table.glyphs);
	          }
	        }

	        glyphs.push(glyph);
	      }

	      this._transformedGlyphs = glyphs;
	    }
	  }], [{
	    key: 'probe',
	    value: function probe(buffer) {
	      return buffer.toString('ascii', 0, 4) === 'wOF2';
	    }
	  }]);

	  return WOFF2Font;
	}(TTFFont);

	var Substream = function () {
	  function Substream(length) {
	    _classCallCheck(this, Substream);

	    this.length = length;
	    this._buf = new r.Buffer(length);
	  }

	  _createClass(Substream, [{
	    key: 'decode',
	    value: function decode(stream, parent) {
	      return new r.DecodeStream(this._buf.decode(stream, parent));
	    }
	  }]);

	  return Substream;
	}();

	// This struct represents the entire glyf table


	var GlyfTable = new r.Struct({
	  version: r.uint32,
	  numGlyphs: r.uint16,
	  indexFormat: r.uint16,
	  nContourStreamSize: r.uint32,
	  nPointsStreamSize: r.uint32,
	  flagStreamSize: r.uint32,
	  glyphStreamSize: r.uint32,
	  compositeStreamSize: r.uint32,
	  bboxStreamSize: r.uint32,
	  instructionStreamSize: r.uint32,
	  nContours: new Substream('nContourStreamSize'),
	  nPoints: new Substream('nPointsStreamSize'),
	  flags: new Substream('flagStreamSize'),
	  glyphs: new Substream('glyphStreamSize'),
	  composites: new Substream('compositeStreamSize'),
	  bboxes: new Substream('bboxStreamSize'),
	  instructions: new Substream('instructionStreamSize')
	});

	var WORD_CODE = 253;
	var ONE_MORE_BYTE_CODE2 = 254;
	var ONE_MORE_BYTE_CODE1 = 255;
	var LOWEST_U_CODE = 253;

	function read255UInt16(stream) {
	  var code = stream.readUInt8();

	  if (code === WORD_CODE) {
	    return stream.readUInt16BE();
	  }

	  if (code === ONE_MORE_BYTE_CODE1) {
	    return stream.readUInt8() + LOWEST_U_CODE;
	  }

	  if (code === ONE_MORE_BYTE_CODE2) {
	    return stream.readUInt8() + LOWEST_U_CODE * 2;
	  }

	  return code;
	}

	function withSign(flag, baseval) {
	  return flag & 1 ? baseval : -baseval;
	}

	function decodeTriplet(flags, glyphs, nPoints) {
	  var y = void 0;
	  var x = y = 0;
	  var res = [];

	  for (var i = 0; i < nPoints; i++) {
	    var dx = 0,
	        dy = 0;
	    var flag = flags.readUInt8();
	    var onCurve = !(flag >> 7);
	    flag &= 0x7f;

	    if (flag < 10) {
	      dx = 0;
	      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
	    } else if (flag < 20) {
	      dx = withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
	      dy = 0;
	    } else if (flag < 84) {
	      var b0 = flag - 20;
	      var b1 = glyphs.readUInt8();
	      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));
	      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));
	    } else if (flag < 120) {
	      var b0 = flag - 84;
	      dx = withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
	      dy = withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
	    } else if (flag < 124) {
	      var b1 = glyphs.readUInt8();
	      var b2 = glyphs.readUInt8();
	      dx = withSign(flag, (b1 << 4) + (b2 >> 4));
	      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());
	    } else {
	      dx = withSign(flag, glyphs.readUInt16BE());
	      dy = withSign(flag >> 1, glyphs.readUInt16BE());
	    }

	    x += dx;
	    y += dy;
	    res.push(new Point(onCurve, false, x, y));
	  }

	  return res;
	}

	var TTCHeader = new r.VersionedStruct(r.uint32, {
	  0x00010000: {
	    numFonts: r.uint32,
	    offsets: new r.Array(r.uint32, 'numFonts')
	  },
	  0x00020000: {
	    numFonts: r.uint32,
	    offsets: new r.Array(r.uint32, 'numFonts'),
	    dsigTag: r.uint32,
	    dsigLength: r.uint32,
	    dsigOffset: r.uint32
	  }
	});

	var TrueTypeCollection = function () {
	  _createClass(TrueTypeCollection, null, [{
	    key: 'probe',
	    value: function probe(buffer) {
	      return buffer.toString('ascii', 0, 4) === 'ttcf';
	    }
	  }]);

	  function TrueTypeCollection(stream) {
	    _classCallCheck(this, TrueTypeCollection);

	    this.stream = stream;
	    if (stream.readString(4) !== 'ttcf') {
	      throw new Error('Not a TrueType collection');
	    }

	    this.header = TTCHeader.decode(stream);
	  }

	  _createClass(TrueTypeCollection, [{
	    key: 'getFont',
	    value: function getFont(name) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(this.header.offsets), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var offset = _step.value;

	          var stream = new r.DecodeStream(this.stream.buffer);
	          stream.pos = offset;
	          var font = new TTFFont(stream);
	          if (font.postscriptName === name) {
	            return font;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return null;
	    }
	  }, {
	    key: 'fonts',
	    get: function get() {
	      var fonts = [];
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = _getIterator(this.header.offsets), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var offset = _step2.value;

	          var stream = new r.DecodeStream(this.stream.buffer);
	          stream.pos = offset;
	          fonts.push(new TTFFont(stream));
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return fonts;
	    }
	  }]);

	  return TrueTypeCollection;
	}();

	var DFontName = new r.String(r.uint8);
	var DFontData = new r.Struct({
	  len: r.uint32,
	  buf: new r.Buffer('len')
	});

	var Ref = new r.Struct({
	  id: r.uint16,
	  nameOffset: r.int16,
	  attr: r.uint8,
	  dataOffset: r.uint24,
	  handle: r.uint32
	});

	var Type = new r.Struct({
	  name: new r.String(4),
	  maxTypeIndex: r.uint16,
	  refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {
	    return t.maxTypeIndex + 1;
	  }), { type: 'parent' })
	});

	var TypeList = new r.Struct({
	  length: r.uint16,
	  types: new r.Array(Type, function (t) {
	    return t.length + 1;
	  })
	});

	var DFontMap = new r.Struct({
	  reserved: new r.Reserved(r.uint8, 24),
	  typeList: new r.Pointer(r.uint16, TypeList),
	  nameListOffset: new r.Pointer(r.uint16, 'void')
	});

	var DFontHeader = new r.Struct({
	  dataOffset: r.uint32,
	  map: new r.Pointer(r.uint32, DFontMap),
	  dataLength: r.uint32,
	  mapLength: r.uint32
	});

	var DFont = function () {
	  _createClass(DFont, null, [{
	    key: 'probe',
	    value: function probe(buffer) {
	      var stream = new r.DecodeStream(buffer);

	      try {
	        var header = DFontHeader.decode(stream);
	      } catch (e) {
	        return false;
	      }

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = _getIterator(header.map.typeList.types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var type = _step.value;

	          if (type.name === 'sfnt') {
	            return true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return false;
	    }
	  }]);

	  function DFont(stream) {
	    _classCallCheck(this, DFont);

	    this.stream = stream;
	    this.header = DFontHeader.decode(this.stream);

	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	      for (var _iterator2 = _getIterator(this.header.map.typeList.types), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	        var type = _step2.value;
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = _getIterator(type.refList), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var ref = _step3.value;

	            if (ref.nameOffset >= 0) {
	              this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
	              ref.name = DFontName.decode(this.stream);
	            } else {
	              ref.name = null;
	            }
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }

	        if (type.name === 'sfnt') {
	          this.sfnt = type;
	        }
	      }
	    } catch (err) {
	      _didIteratorError2 = true;
	      _iteratorError2 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	          _iterator2.return();
	        }
	      } finally {
	        if (_didIteratorError2) {
	          throw _iteratorError2;
	        }
	      }
	    }
	  }

	  _createClass(DFont, [{
	    key: 'getFont',
	    value: function getFont(name) {
	      if (!this.sfnt) {
	        return null;
	      }

	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = _getIterator(this.sfnt.refList), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var ref = _step4.value;

	          var pos = this.header.dataOffset + ref.dataOffset + 4;
	          var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
	          var font = new TTFFont(stream);
	          if (font.postscriptName === name) {
	            return font;
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }

	      return null;
	    }
	  }, {
	    key: 'fonts',
	    get: function get() {
	      var fonts = [];
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;

	      try {
	        for (var _iterator5 = _getIterator(this.sfnt.refList), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          var ref = _step5.value;

	          var pos = this.header.dataOffset + ref.dataOffset + 4;
	          var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
	          fonts.push(new TTFFont(stream));
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }

	      return fonts;
	    }
	  }]);

	  return DFont;
	}();

	// Register font formats
	fontkit.registerFormat(TTFFont);
	fontkit.registerFormat(WOFFFont);
	fontkit.registerFormat(WOFF2Font);
	fontkit.registerFormat(TrueTypeCollection);
	fontkit.registerFormat(DFont);

	module.exports = fontkit;
	//# sourceMappingURL=index.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(36)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var key, val, _ref, _ref1;

	  exports.EncodeStream = __webpack_require__(38);

	  exports.DecodeStream = __webpack_require__(39);

	  exports.Array = __webpack_require__(41);

	  exports.LazyArray = __webpack_require__(44);

	  exports.Bitfield = __webpack_require__(46);

	  exports.Boolean = __webpack_require__(47);

	  exports.Buffer = __webpack_require__(48);

	  exports.Enum = __webpack_require__(49);

	  exports.Optional = __webpack_require__(50);

	  exports.Reserved = __webpack_require__(51);

	  exports.String = __webpack_require__(52);

	  exports.Struct = __webpack_require__(53);

	  exports.VersionedStruct = __webpack_require__(54);

	  _ref = __webpack_require__(42);
	  for (key in _ref) {
	    val = _ref[key];
	    exports[key] = val;
	  }

	  _ref1 = __webpack_require__(55);
	  for (key in _ref1) {
	    val = _ref1[key];
	    exports[key] = val;
	  }

	}).call(this);


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var DecodeStream, EncodeStream, iconv, stream,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	  stream = __webpack_require__(24);

	  DecodeStream = __webpack_require__(39);

	  try {
	    iconv = __webpack_require__(40);
	  } catch (_error) {}

	  EncodeStream = (function(_super) {
	    var key;

	    __extends(EncodeStream, _super);

	    function EncodeStream(bufferSize) {
	      if (bufferSize == null) {
	        bufferSize = 65536;
	      }
	      EncodeStream.__super__.constructor.apply(this, arguments);
	      this.buffer = new Buffer(bufferSize);
	      this.bufferOffset = 0;
	      this.pos = 0;
	    }

	    for (key in Buffer.prototype) {
	      if (key.slice(0, 5) === 'write') {
	        (function(key) {
	          var bytes;
	          bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, '')];
	          return EncodeStream.prototype[key] = function(value) {
	            this.ensure(bytes);
	            this.buffer[key](value, this.bufferOffset);
	            this.bufferOffset += bytes;
	            return this.pos += bytes;
	          };
	        })(key);
	      }
	    }

	    EncodeStream.prototype._read = function() {};

	    EncodeStream.prototype.ensure = function(bytes) {
	      if (this.bufferOffset + bytes > this.buffer.length) {
	        return this.flush();
	      }
	    };

	    EncodeStream.prototype.flush = function() {
	      if (this.bufferOffset > 0) {
	        this.push(new Buffer(this.buffer.slice(0, this.bufferOffset)));
	        return this.bufferOffset = 0;
	      }
	    };

	    EncodeStream.prototype.writeBuffer = function(buffer) {
	      this.flush();
	      this.push(buffer);
	      return this.pos += buffer.length;
	    };

	    EncodeStream.prototype.writeString = function(string, encoding) {
	      var buf, byte, i, _i, _ref;
	      if (encoding == null) {
	        encoding = 'ascii';
	      }
	      switch (encoding) {
	        case 'utf16le':
	        case 'ucs2':
	        case 'utf8':
	        case 'ascii':
	          return this.writeBuffer(new Buffer(string, encoding));
	        case 'utf16be':
	          buf = new Buffer(string, 'utf16le');
	          for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
	            byte = buf[i];
	            buf[i] = buf[i + 1];
	            buf[i + 1] = byte;
	          }
	          return this.writeBuffer(buf);
	        default:
	          if (iconv) {
	            return this.writeBuffer(iconv.encode(string, encoding));
	          } else {
	            throw new Error('Install iconv-lite to enable additional string encodings.');
	          }
	      }
	    };

	    EncodeStream.prototype.writeUInt24BE = function(val) {
	      this.ensure(3);
	      this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
	      this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
	      this.buffer[this.bufferOffset++] = val & 0xff;
	      return this.pos += 3;
	    };

	    EncodeStream.prototype.writeUInt24LE = function(val) {
	      this.ensure(3);
	      this.buffer[this.bufferOffset++] = val & 0xff;
	      this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
	      this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
	      return this.pos += 3;
	    };

	    EncodeStream.prototype.writeInt24BE = function(val) {
	      if (val >= 0) {
	        return this.writeUInt24BE(val);
	      } else {
	        return this.writeUInt24BE(val + 0xffffff + 1);
	      }
	    };

	    EncodeStream.prototype.writeInt24LE = function(val) {
	      if (val >= 0) {
	        return this.writeUInt24LE(val);
	      } else {
	        return this.writeUInt24LE(val + 0xffffff + 1);
	      }
	    };

	    EncodeStream.prototype.fill = function(val, length) {
	      var buf;
	      if (length < this.buffer.length) {
	        this.ensure(length);
	        this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
	        this.bufferOffset += length;
	        return this.pos += length;
	      } else {
	        buf = new Buffer(length);
	        buf.fill(val);
	        return this.writeBuffer(buf);
	      }
	    };

	    EncodeStream.prototype.end = function() {
	      this.flush();
	      return this.push(null);
	    };

	    return EncodeStream;

	  })(stream.Readable);

	  module.exports = EncodeStream;

	}).call(this);


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var DecodeStream, iconv;

	  try {
	    iconv = __webpack_require__(40);
	  } catch (_error) {}

	  DecodeStream = (function() {
	    var key;

	    function DecodeStream(buffer) {
	      this.buffer = buffer;
	      this.pos = 0;
	      this.length = this.buffer.length;
	    }

	    DecodeStream.TYPES = {
	      UInt8: 1,
	      UInt16: 2,
	      UInt24: 3,
	      UInt32: 4,
	      Int8: 1,
	      Int16: 2,
	      Int24: 3,
	      Int32: 4,
	      Float: 4,
	      Double: 8
	    };

	    for (key in Buffer.prototype) {
	      if (key.slice(0, 4) === 'read') {
	        (function(key) {
	          var bytes;
	          bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];
	          return DecodeStream.prototype[key] = function() {
	            var ret;
	            ret = this.buffer[key](this.pos);
	            this.pos += bytes;
	            return ret;
	          };
	        })(key);
	      }
	    }

	    DecodeStream.prototype.readString = function(length, encoding) {
	      var buf, byte, i, _i, _ref;
	      if (encoding == null) {
	        encoding = 'ascii';
	      }
	      switch (encoding) {
	        case 'utf16le':
	        case 'ucs2':
	        case 'utf8':
	        case 'ascii':
	          return this.buffer.toString(encoding, this.pos, this.pos += length);
	        case 'utf16be':
	          buf = new Buffer(this.readBuffer(length));
	          for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
	            byte = buf[i];
	            buf[i] = buf[i + 1];
	            buf[i + 1] = byte;
	          }
	          return buf.toString('utf16le');
	        default:
	          buf = this.readBuffer(length);
	          if (iconv) {
	            return iconv.decode(buf, encoding);
	          }
	          return buf;
	      }
	    };

	    DecodeStream.prototype.readBuffer = function(length) {
	      return this.buffer.slice(this.pos, this.pos += length);
	    };

	    DecodeStream.prototype.readUInt24BE = function() {
	      return (this.readUInt16BE() << 8) + this.readUInt8();
	    };

	    DecodeStream.prototype.readUInt24LE = function() {
	      return this.readUInt16LE() + (this.readUInt8() << 16);
	    };

	    DecodeStream.prototype.readInt24BE = function() {
	      return (this.readInt16BE() << 8) + this.readUInt8();
	    };

	    DecodeStream.prototype.readInt24LE = function() {
	      return this.readUInt16LE() + (this.readInt8() << 16);
	    };

	    return DecodeStream;

	  })();

	  module.exports = DecodeStream;

	}).call(this);


/***/ },
/* 40 */
/***/ function(module, exports) {

	if(typeof __WEBPACK_EXTERNAL_MODULE_40__ === 'undefined') {var e = new Error("Cannot find module \"iconv-lite\""); e.code = 'MODULE_NOT_FOUND'; throw e;}
	module.exports = __WEBPACK_EXTERNAL_MODULE_40__;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var ArrayT, NumberT, utils;

	  NumberT = __webpack_require__(42).Number;

	  utils = __webpack_require__(43);

	  ArrayT = (function() {
	    function ArrayT(type, length, lengthType) {
	      this.type = type;
	      this.length = length;
	      this.lengthType = lengthType != null ? lengthType : 'count';
	    }

	    ArrayT.prototype.decode = function(stream, parent) {
	      var ctx, i, length, pos, res, target, _i;
	      pos = stream.pos;
	      res = [];
	      ctx = parent;
	      if (this.length != null) {
	        length = utils.resolveLength(this.length, stream, parent);
	      }
	      if (this.length instanceof NumberT) {
	        Object.defineProperties(res, {
	          parent: {
	            value: parent
	          },
	          _startOffset: {
	            value: pos
	          },
	          _currentOffset: {
	            value: 0,
	            writable: true
	          },
	          _length: {
	            value: length
	          }
	        });
	        ctx = res;
	      }
	      if ((length == null) || this.lengthType === 'bytes') {
	        target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;
	        while (stream.pos < target) {
	          res.push(this.type.decode(stream, ctx));
	        }
	      } else {
	        for (i = _i = 0; _i < length; i = _i += 1) {
	          res.push(this.type.decode(stream, ctx));
	        }
	      }
	      return res;
	    };

	    ArrayT.prototype.size = function(array, ctx) {
	      var item, size, _i, _len;
	      if (!array) {
	        return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
	      }
	      size = 0;
	      if (this.length instanceof NumberT) {
	        size += this.length.size();
	        ctx = {
	          parent: ctx
	        };
	      }
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        item = array[_i];
	        size += this.type.size(item, ctx);
	      }
	      return size;
	    };

	    ArrayT.prototype.encode = function(stream, array, parent) {
	      var ctx, i, item, ptr, _i, _len;
	      ctx = parent;
	      if (this.length instanceof NumberT) {
	        ctx = {
	          pointers: [],
	          startOffset: stream.pos,
	          parent: parent
	        };
	        ctx.pointerOffset = stream.pos + this.size(array, ctx);
	        this.length.encode(stream, array.length);
	      }
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        item = array[_i];
	        this.type.encode(stream, item, ctx);
	      }
	      if (this.length instanceof NumberT) {
	        i = 0;
	        while (i < ctx.pointers.length) {
	          ptr = ctx.pointers[i++];
	          ptr.type.encode(stream, ptr.val);
	        }
	      }
	    };

	    return ArrayT;

	  })();

	  module.exports = ArrayT;

	}).call(this);


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var DecodeStream, Fixed, NumberT,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	  DecodeStream = __webpack_require__(39);

	  NumberT = (function() {
	    function NumberT(type, endian) {
	      this.type = type;
	      this.endian = endian != null ? endian : 'BE';
	      this.fn = this.type;
	      if (this.type[this.type.length - 1] !== '8') {
	        this.fn += this.endian;
	      }
	    }

	    NumberT.prototype.size = function() {
	      return DecodeStream.TYPES[this.type];
	    };

	    NumberT.prototype.decode = function(stream) {
	      return stream['read' + this.fn]();
	    };

	    NumberT.prototype.encode = function(stream, val) {
	      return stream['write' + this.fn](val);
	    };

	    return NumberT;

	  })();

	  exports.Number = NumberT;

	  exports.uint8 = new NumberT('UInt8');

	  exports.uint16be = exports.uint16 = new NumberT('UInt16', 'BE');

	  exports.uint16le = new NumberT('UInt16', 'LE');

	  exports.uint24be = exports.uint24 = new NumberT('UInt24', 'BE');

	  exports.uint24le = new NumberT('UInt24', 'LE');

	  exports.uint32be = exports.uint32 = new NumberT('UInt32', 'BE');

	  exports.uint32le = new NumberT('UInt32', 'LE');

	  exports.int8 = new NumberT('Int8');

	  exports.int16be = exports.int16 = new NumberT('Int16', 'BE');

	  exports.int16le = new NumberT('Int16', 'LE');

	  exports.int24be = exports.int24 = new NumberT('Int24', 'BE');

	  exports.int24le = new NumberT('Int24', 'LE');

	  exports.int32be = exports.int32 = new NumberT('Int32', 'BE');

	  exports.int32le = new NumberT('Int32', 'LE');

	  exports.floatbe = exports.float = new NumberT('Float', 'BE');

	  exports.floatle = new NumberT('Float', 'LE');

	  exports.doublebe = exports.double = new NumberT('Double', 'BE');

	  exports.doublele = new NumberT('Double', 'LE');

	  Fixed = (function(_super) {
	    __extends(Fixed, _super);

	    function Fixed(size, endian, fracBits) {
	      if (fracBits == null) {
	        fracBits = size >> 1;
	      }
	      Fixed.__super__.constructor.call(this, "Int" + size, endian);
	      this._point = 1 << fracBits;
	    }

	    Fixed.prototype.decode = function(stream) {
	      return Fixed.__super__.decode.call(this, stream) / this._point;
	    };

	    Fixed.prototype.encode = function(stream, val) {
	      return Fixed.__super__.encode.call(this, stream, val * this._point | 0);
	    };

	    return Fixed;

	  })(NumberT);

	  exports.Fixed = Fixed;

	  exports.fixed16be = exports.fixed16 = new Fixed(16, 'BE');

	  exports.fixed16le = new Fixed(16, 'LE');

	  exports.fixed32be = exports.fixed32 = new Fixed(32, 'BE');

	  exports.fixed32le = new Fixed(32, 'LE');

	}).call(this);


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var NumberT, PropertyDescriptor;

	  NumberT = __webpack_require__(42).Number;

	  exports.resolveLength = function(length, stream, parent) {
	    var res;
	    if (typeof length === 'number') {
	      res = length;
	    } else if (typeof length === 'function') {
	      res = length.call(parent, parent);
	    } else if (parent && typeof length === 'string') {
	      res = parent[length];
	    } else if (stream && length instanceof NumberT) {
	      res = length.decode(stream);
	    }
	    if (isNaN(res)) {
	      throw new Error('Not a fixed size');
	    }
	    return res;
	  };

	  PropertyDescriptor = (function() {
	    function PropertyDescriptor(opts) {
	      var key, val;
	      if (opts == null) {
	        opts = {};
	      }
	      this.enumerable = true;
	      this.configurable = true;
	      for (key in opts) {
	        val = opts[key];
	        this[key] = val;
	      }
	    }

	    return PropertyDescriptor;

	  })();

	  exports.PropertyDescriptor = PropertyDescriptor;

	}).call(this);


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var ArrayT, LazyArray, LazyArrayT, NumberT, inspect, utils,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	  ArrayT = __webpack_require__(41);

	  NumberT = __webpack_require__(42).Number;

	  utils = __webpack_require__(43);

	  inspect = __webpack_require__(45).inspect;

	  LazyArrayT = (function(_super) {
	    __extends(LazyArrayT, _super);

	    function LazyArrayT() {
	      return LazyArrayT.__super__.constructor.apply(this, arguments);
	    }

	    LazyArrayT.prototype.decode = function(stream, parent) {
	      var length, pos, res;
	      pos = stream.pos;
	      length = utils.resolveLength(this.length, stream, parent);
	      if (this.length instanceof NumberT) {
	        parent = {
	          parent: parent,
	          _startOffset: pos,
	          _currentOffset: 0,
	          _length: length
	        };
	      }
	      res = new LazyArray(this.type, length, stream, parent);
	      stream.pos += length * this.type.size(null, parent);
	      return res;
	    };

	    LazyArrayT.prototype.size = function(val, ctx) {
	      if (val instanceof LazyArray) {
	        val = val.toArray();
	      }
	      return LazyArrayT.__super__.size.call(this, val, ctx);
	    };

	    LazyArrayT.prototype.encode = function(stream, val, ctx) {
	      if (val instanceof LazyArray) {
	        val = val.toArray();
	      }
	      return LazyArrayT.__super__.encode.call(this, stream, val, ctx);
	    };

	    return LazyArrayT;

	  })(ArrayT);

	  LazyArray = (function() {
	    function LazyArray(type, length, stream, ctx) {
	      this.type = type;
	      this.length = length;
	      this.stream = stream;
	      this.ctx = ctx;
	      this.base = this.stream.pos;
	      this.items = [];
	    }

	    LazyArray.prototype.get = function(index) {
	      var pos;
	      if (index < 0 || index >= this.length) {
	        return void 0;
	      }
	      if (this.items[index] == null) {
	        pos = this.stream.pos;
	        this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
	        this.items[index] = this.type.decode(this.stream, this.ctx);
	        this.stream.pos = pos;
	      }
	      return this.items[index];
	    };

	    LazyArray.prototype.toArray = function() {
	      var i, _i, _ref, _results;
	      _results = [];
	      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {
	        _results.push(this.get(i));
	      }
	      return _results;
	    };

	    LazyArray.prototype.inspect = function() {
	      return inspect(this.toArray());
	    };

	    return LazyArray;

	  })();

	  module.exports = LazyArrayT;

	}).call(this);


/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_45__;

/***/ },
/* 46 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Bitfield;

	  Bitfield = (function() {
	    function Bitfield(type, flags) {
	      this.type = type;
	      this.flags = flags != null ? flags : [];
	    }

	    Bitfield.prototype.decode = function(stream) {
	      var flag, i, res, val, _i, _len, _ref;
	      val = this.type.decode(stream);
	      res = {};
	      _ref = this.flags;
	      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
	        flag = _ref[i];
	        if (flag != null) {
	          res[flag] = !!(val & (1 << i));
	        }
	      }
	      return res;
	    };

	    Bitfield.prototype.size = function() {
	      return this.type.size();
	    };

	    Bitfield.prototype.encode = function(stream, keys) {
	      var flag, i, val, _i, _len, _ref;
	      val = 0;
	      _ref = this.flags;
	      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
	        flag = _ref[i];
	        if (flag != null) {
	          if (keys[flag]) {
	            val |= 1 << i;
	          }
	        }
	      }
	      return this.type.encode(stream, val);
	    };

	    return Bitfield;

	  })();

	  module.exports = Bitfield;

	}).call(this);


/***/ },
/* 47 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var BooleanT;

	  BooleanT = (function() {
	    function BooleanT(type) {
	      this.type = type;
	    }

	    BooleanT.prototype.decode = function(stream, parent) {
	      return !!this.type.decode(stream, parent);
	    };

	    BooleanT.prototype.size = function(val, parent) {
	      return this.type.size(val, parent);
	    };

	    BooleanT.prototype.encode = function(stream, val, parent) {
	      return this.type.encode(stream, +val, parent);
	    };

	    return BooleanT;

	  })();

	  module.exports = BooleanT;

	}).call(this);


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var BufferT, NumberT, utils;

	  utils = __webpack_require__(43);

	  NumberT = __webpack_require__(42).Number;

	  BufferT = (function() {
	    function BufferT(length) {
	      this.length = length;
	    }

	    BufferT.prototype.decode = function(stream, parent) {
	      var length;
	      length = utils.resolveLength(this.length, stream, parent);
	      return stream.readBuffer(length);
	    };

	    BufferT.prototype.size = function(val, parent) {
	      if (!val) {
	        return utils.resolveLength(this.length, null, parent);
	      }
	      return val.length;
	    };

	    BufferT.prototype.encode = function(stream, buf, parent) {
	      if (this.length instanceof NumberT) {
	        this.length.encode(stream, buf.length);
	      }
	      return stream.writeBuffer(buf);
	    };

	    return BufferT;

	  })();

	  module.exports = BufferT;

	}).call(this);


/***/ },
/* 49 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Enum;

	  Enum = (function() {
	    function Enum(type, options) {
	      this.type = type;
	      this.options = options != null ? options : [];
	    }

	    Enum.prototype.decode = function(stream) {
	      var index;
	      index = this.type.decode(stream);
	      return this.options[index] || index;
	    };

	    Enum.prototype.size = function() {
	      return this.type.size();
	    };

	    Enum.prototype.encode = function(stream, val) {
	      var index;
	      index = this.options.indexOf(val);
	      if (index === -1) {
	        throw new Error("Unknown option in enum: " + val);
	      }
	      return this.type.encode(stream, index);
	    };

	    return Enum;

	  })();

	  module.exports = Enum;

	}).call(this);


/***/ },
/* 50 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Optional;

	  Optional = (function() {
	    function Optional(type, condition) {
	      this.type = type;
	      this.condition = condition != null ? condition : true;
	    }

	    Optional.prototype.decode = function(stream, parent) {
	      var condition;
	      condition = this.condition;
	      if (typeof condition === 'function') {
	        condition = condition.call(parent, parent);
	      }
	      if (condition) {
	        return this.type.decode(stream, parent);
	      }
	    };

	    Optional.prototype.size = function(val, parent) {
	      var condition;
	      condition = this.condition;
	      if (typeof condition === 'function') {
	        condition = condition.call(parent, parent);
	      }
	      if (condition) {
	        return this.type.size(val, parent);
	      } else {
	        return 0;
	      }
	    };

	    Optional.prototype.encode = function(stream, val, parent) {
	      var condition;
	      condition = this.condition;
	      if (typeof condition === 'function') {
	        condition = condition.call(parent, parent);
	      }
	      if (condition) {
	        return this.type.encode(stream, val, parent);
	      }
	    };

	    return Optional;

	  })();

	  module.exports = Optional;

	}).call(this);


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Reserved, utils;

	  utils = __webpack_require__(43);

	  Reserved = (function() {
	    function Reserved(type, count) {
	      this.type = type;
	      this.count = count != null ? count : 1;
	    }

	    Reserved.prototype.decode = function(stream, parent) {
	      stream.pos += this.size(null, parent);
	      return void 0;
	    };

	    Reserved.prototype.size = function(data, parent) {
	      var count;
	      count = utils.resolveLength(this.count, null, parent);
	      return this.type.size() * count;
	    };

	    Reserved.prototype.encode = function(stream, val, parent) {
	      return stream.fill(0, this.size(val, parent));
	    };

	    return Reserved;

	  })();

	  module.exports = Reserved;

	}).call(this);


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var NumberT, StringT, utils;

	  NumberT = __webpack_require__(42).Number;

	  utils = __webpack_require__(43);

	  StringT = (function() {
	    function StringT(length, encoding) {
	      this.length = length;
	      this.encoding = encoding != null ? encoding : 'ascii';
	    }

	    StringT.prototype.decode = function(stream, parent) {
	      var buffer, encoding, length, pos, string;
	      length = (function() {
	        if (this.length != null) {
	          return utils.resolveLength(this.length, stream, parent);
	        } else {
	          buffer = stream.buffer, length = stream.length, pos = stream.pos;
	          while (pos < length && buffer[pos] !== 0x00) {
	            ++pos;
	          }
	          return pos - stream.pos;
	        }
	      }).call(this);
	      encoding = this.encoding;
	      if (typeof encoding === 'function') {
	        encoding = encoding.call(parent, parent) || 'ascii';
	      }
	      string = stream.readString(length, encoding);
	      if ((this.length == null) && stream.pos < stream.length) {
	        stream.pos++;
	      }
	      return string;
	    };

	    StringT.prototype.size = function(val, parent) {
	      var encoding, size;
	      if (!val) {
	        return utils.resolveLength(this.length, null, parent);
	      }
	      encoding = this.encoding;
	      if (typeof encoding === 'function') {
	        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
	      }
	      if (encoding === 'utf16be') {
	        encoding = 'utf16le';
	      }
	      size = Buffer.byteLength(val, encoding);
	      if (this.length instanceof NumberT) {
	        size += this.length.size();
	      }
	      if (this.length == null) {
	        size++;
	      }
	      return size;
	    };

	    StringT.prototype.encode = function(stream, val, parent) {
	      var encoding;
	      encoding = this.encoding;
	      if (typeof encoding === 'function') {
	        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
	      }
	      if (this.length instanceof NumberT) {
	        this.length.encode(stream, Buffer.byteLength(val, encoding));
	      }
	      stream.writeString(val, encoding);
	      if (this.length == null) {
	        return stream.writeUInt8(0x00);
	      }
	    };

	    return StringT;

	  })();

	  module.exports = StringT;

	}).call(this);


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Struct, utils;

	  utils = __webpack_require__(43);

	  Struct = (function() {
	    function Struct(fields) {
	      this.fields = fields != null ? fields : {};
	    }

	    Struct.prototype.decode = function(stream, parent, length) {
	      var res, _ref;
	      if (length == null) {
	        length = 0;
	      }
	      res = this._setup(stream, parent, length);
	      this._parseFields(stream, res, this.fields);
	      if ((_ref = this.process) != null) {
	        _ref.call(res, stream);
	      }
	      return res;
	    };

	    Struct.prototype._setup = function(stream, parent, length) {
	      var res;
	      res = {};
	      Object.defineProperties(res, {
	        parent: {
	          value: parent
	        },
	        _startOffset: {
	          value: stream.pos
	        },
	        _currentOffset: {
	          value: 0,
	          writable: true
	        },
	        _length: {
	          value: length
	        }
	      });
	      return res;
	    };

	    Struct.prototype._parseFields = function(stream, res, fields) {
	      var key, type, val;
	      for (key in fields) {
	        type = fields[key];
	        if (typeof type === 'function') {
	          val = type.call(res, res);
	        } else {
	          val = type.decode(stream, res);
	        }
	        if (val !== void 0) {
	          if (val instanceof utils.PropertyDescriptor) {
	            Object.defineProperty(res, key, val);
	          } else {
	            res[key] = val;
	          }
	        }
	        res._currentOffset = stream.pos - res._startOffset;
	      }
	    };

	    Struct.prototype.size = function(val, parent, includePointers) {
	      var ctx, key, size, type, _ref;
	      if (val == null) {
	        val = {};
	      }
	      if (includePointers == null) {
	        includePointers = true;
	      }
	      ctx = {
	        parent: parent,
	        val: val,
	        pointerSize: 0
	      };
	      size = 0;
	      _ref = this.fields;
	      for (key in _ref) {
	        type = _ref[key];
	        if (type.size != null) {
	          size += type.size(val[key], ctx);
	        }
	      }
	      if (includePointers) {
	        size += ctx.pointerSize;
	      }
	      return size;
	    };

	    Struct.prototype.encode = function(stream, val, parent) {
	      var ctx, i, key, ptr, type, _ref, _ref1;
	      if ((_ref = this.preEncode) != null) {
	        _ref.call(val, stream);
	      }
	      ctx = {
	        pointers: [],
	        startOffset: stream.pos,
	        parent: parent,
	        val: val,
	        pointerSize: 0
	      };
	      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
	      _ref1 = this.fields;
	      for (key in _ref1) {
	        type = _ref1[key];
	        if (type.encode != null) {
	          type.encode(stream, val[key], ctx);
	        }
	      }
	      i = 0;
	      while (i < ctx.pointers.length) {
	        ptr = ctx.pointers[i++];
	        ptr.type.encode(stream, ptr.val, ptr.parent);
	      }
	    };

	    return Struct;

	  })();

	  module.exports = Struct;

	}).call(this);


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Struct, VersionedStruct,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	  Struct = __webpack_require__(53);

	  VersionedStruct = (function(_super) {
	    __extends(VersionedStruct, _super);

	    function VersionedStruct(type, versions) {
	      this.type = type;
	      this.versions = versions != null ? versions : {};
	      if (typeof this.type === 'string') {
	        this.versionGetter = new Function('parent', "return parent." + this.type);
	        this.versionSetter = new Function('parent', 'version', "return parent." + this.type + " = version");
	      }
	    }

	    VersionedStruct.prototype.decode = function(stream, parent, length) {
	      var fields, res, _ref;
	      if (length == null) {
	        length = 0;
	      }
	      res = this._setup(stream, parent, length);
	      if (typeof this.type === 'string') {
	        res.version = this.versionGetter(parent);
	      } else {
	        res.version = this.type.decode(stream);
	      }
	      if (this.versions.header) {
	        this._parseFields(stream, res, this.versions.header);
	      }
	      fields = this.versions[res.version];
	      if (fields == null) {
	        throw new Error("Unknown version " + res.version);
	      }
	      if (fields instanceof VersionedStruct) {
	        return fields.decode(stream, parent);
	      }
	      this._parseFields(stream, res, fields);
	      if ((_ref = this.process) != null) {
	        _ref.call(res, stream);
	      }
	      return res;
	    };

	    VersionedStruct.prototype.size = function(val, parent, includePointers) {
	      var ctx, fields, key, size, type, _ref;
	      if (includePointers == null) {
	        includePointers = true;
	      }
	      if (!val) {
	        throw new Error('Not a fixed size');
	      }
	      ctx = {
	        parent: parent,
	        val: val,
	        pointerSize: 0
	      };
	      size = 0;
	      if (typeof this.type !== 'string') {
	        size += this.type.size(val.version, ctx);
	      }
	      if (this.versions.header) {
	        _ref = this.versions.header;
	        for (key in _ref) {
	          type = _ref[key];
	          if (type.size != null) {
	            size += type.size(val[key], ctx);
	          }
	        }
	      }
	      fields = this.versions[val.version];
	      if (fields == null) {
	        throw new Error("Unknown version " + val.version);
	      }
	      for (key in fields) {
	        type = fields[key];
	        if (type.size != null) {
	          size += type.size(val[key], ctx);
	        }
	      }
	      if (includePointers) {
	        size += ctx.pointerSize;
	      }
	      return size;
	    };

	    VersionedStruct.prototype.encode = function(stream, val, parent) {
	      var ctx, fields, i, key, ptr, type, _ref, _ref1;
	      if ((_ref = this.preEncode) != null) {
	        _ref.call(val, stream);
	      }
	      ctx = {
	        pointers: [],
	        startOffset: stream.pos,
	        parent: parent,
	        val: val,
	        pointerSize: 0
	      };
	      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
	      if (typeof this.type !== 'string') {
	        this.type.encode(stream, val.version);
	      }
	      if (this.versions.header) {
	        _ref1 = this.versions.header;
	        for (key in _ref1) {
	          type = _ref1[key];
	          if (type.encode != null) {
	            type.encode(stream, val[key], ctx);
	          }
	        }
	      }
	      fields = this.versions[val.version];
	      for (key in fields) {
	        type = fields[key];
	        if (type.encode != null) {
	          type.encode(stream, val[key], ctx);
	        }
	      }
	      i = 0;
	      while (i < ctx.pointers.length) {
	        ptr = ctx.pointers[i++];
	        ptr.type.encode(stream, ptr.val, ptr.parent);
	      }
	    };

	    return VersionedStruct;

	  })(Struct);

	  module.exports = VersionedStruct;

	}).call(this);


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var Pointer, VoidPointer, utils;

	  utils = __webpack_require__(43);

	  Pointer = (function() {
	    function Pointer(offsetType, type, options) {
	      var _base, _base1, _base2, _base3;
	      this.offsetType = offsetType;
	      this.type = type;
	      this.options = options != null ? options : {};
	      if (this.type === 'void') {
	        this.type = null;
	      }
	      if ((_base = this.options).type == null) {
	        _base.type = 'local';
	      }
	      if ((_base1 = this.options).allowNull == null) {
	        _base1.allowNull = true;
	      }
	      if ((_base2 = this.options).nullValue == null) {
	        _base2.nullValue = 0;
	      }
	      if ((_base3 = this.options).lazy == null) {
	        _base3.lazy = false;
	      }
	      if (this.options.relativeTo) {
	        this.relativeToGetter = new Function('ctx', "return ctx." + this.options.relativeTo);
	      }
	    }

	    Pointer.prototype.decode = function(stream, ctx) {
	      var c, decodeValue, offset, ptr, relative, val;
	      offset = this.offsetType.decode(stream, ctx);
	      if (offset === this.options.nullValue && this.options.allowNull) {
	        return null;
	      }
	      relative = (function() {
	        switch (this.options.type) {
	          case 'local':
	            return ctx._startOffset;
	          case 'immediate':
	            return stream.pos - this.offsetType.size();
	          case 'parent':
	            return ctx.parent._startOffset;
	          default:
	            c = ctx;
	            while (c.parent) {
	              c = c.parent;
	            }
	            return c._startOffset || 0;
	        }
	      }).call(this);
	      if (this.options.relativeTo) {
	        relative += this.relativeToGetter(ctx);
	      }
	      ptr = offset + relative;
	      if (this.type != null) {
	        val = null;
	        decodeValue = (function(_this) {
	          return function() {
	            var pos;
	            if (val != null) {
	              return val;
	            }
	            pos = stream.pos;
	            stream.pos = ptr;
	            val = _this.type.decode(stream, ctx);
	            stream.pos = pos;
	            return val;
	          };
	        })(this);
	        if (this.options.lazy) {
	          return new utils.PropertyDescriptor({
	            get: decodeValue
	          });
	        }
	        return decodeValue();
	      } else {
	        return ptr;
	      }
	    };

	    Pointer.prototype.size = function(val, ctx) {
	      var parent, type;
	      parent = ctx;
	      switch (this.options.type) {
	        case 'local':
	        case 'immediate':
	          break;
	        case 'parent':
	          ctx = ctx.parent;
	          break;
	        default:
	          while (ctx.parent) {
	            ctx = ctx.parent;
	          }
	      }
	      type = this.type;
	      if (type == null) {
	        if (!(val instanceof VoidPointer)) {
	          throw new Error("Must be a VoidPointer");
	        }
	        type = val.type;
	        val = val.value;
	      }
	      if (val && ctx) {
	        ctx.pointerSize += type.size(val, parent);
	      }
	      return this.offsetType.size();
	    };

	    Pointer.prototype.encode = function(stream, val, ctx) {
	      var parent, relative, type;
	      parent = ctx;
	      if (val == null) {
	        this.offsetType.encode(stream, this.options.nullValue);
	        return;
	      }
	      switch (this.options.type) {
	        case 'local':
	          relative = ctx.startOffset;
	          break;
	        case 'immediate':
	          relative = stream.pos + this.offsetType.size(val, parent);
	          break;
	        case 'parent':
	          ctx = ctx.parent;
	          relative = ctx.startOffset;
	          break;
	        default:
	          relative = 0;
	          while (ctx.parent) {
	            ctx = ctx.parent;
	          }
	      }
	      if (this.options.relativeTo) {
	        relative += this.relativeToGetter(parent.val);
	      }
	      this.offsetType.encode(stream, ctx.pointerOffset - relative);
	      type = this.type;
	      if (type == null) {
	        if (!(val instanceof VoidPointer)) {
	          throw new Error("Must be a VoidPointer");
	        }
	        type = val.type;
	        val = val.value;
	      }
	      ctx.pointers.push({
	        type: type,
	        val: val,
	        parent: parent
	      });
	      return ctx.pointerOffset += type.size(val, parent);
	    };

	    return Pointer;

	  })();

	  VoidPointer = (function() {
	    function VoidPointer(type, value) {
	      this.type = type;
	      this.value = value;
	    }

	    return VoidPointer;

	  })();

	  exports.Pointer = Pointer;

	  exports.VoidPointer = VoidPointer;

	}).call(this);


/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_56__;

/***/ },
/* 57 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_57__;

/***/ },
/* 58 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_58__;

/***/ },
/* 59 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_59__;

/***/ },
/* 60 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_60__;

/***/ },
/* 61 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_61__;

/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_62__;

/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_63__;

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_64__;

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_65__;

/***/ },
/* 66 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_66__;

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_67__;

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_68__;

/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_69__;

/***/ },
/* 70 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_70__;

/***/ },
/* 71 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_71__;

/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_72__;

/***/ },
/* 73 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_73__;

/***/ },
/* 74 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_74__;

/***/ },
/* 75 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_75__;

/***/ },
/* 76 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_76__;

/***/ },
/* 77 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_77__;

/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_78__;

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_79__;

/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_80__;

/***/ },
/* 81 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_81__;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {// Generated by CoffeeScript 1.10.0
	(function() {
	  var AFMFont, PDFFont, StandardFont, fs,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  AFMFont = __webpack_require__(83);

	  PDFFont = __webpack_require__(34);

	  fs = __webpack_require__(10);

	  StandardFont = (function(superClass) {
	    var STANDARD_FONTS;

	    extend(StandardFont, superClass);

	    function StandardFont(document, name1, id) {
	      var ref;
	      this.document = document;
	      this.name = name1;
	      this.id = id;
	      this.font = new AFMFont(STANDARD_FONTS[this.name]());
	      ref = this.font, this.ascender = ref.ascender, this.descender = ref.descender, this.bbox = ref.bbox, this.lineGap = ref.lineGap;
	    }

	    StandardFont.prototype.embed = function() {
	      this.dictionary.data = {
	        Type: 'Font',
	        BaseFont: this.name,
	        Subtype: 'Type1',
	        Encoding: 'WinAnsiEncoding'
	      };
	      return this.dictionary.end();
	    };

	    StandardFont.prototype.encode = function(text) {
	      var advances, encoded, glyph, glyphs, i, j, len, positions;
	      encoded = this.font.encodeText(text);
	      glyphs = this.font.glyphsForString('' + text);
	      advances = this.font.advancesForGlyphs(glyphs);
	      positions = [];
	      for (i = j = 0, len = glyphs.length; j < len; i = ++j) {
	        glyph = glyphs[i];
	        positions.push({
	          xAdvance: advances[i],
	          yAdvance: 0,
	          xOffset: 0,
	          yOffset: 0,
	          advanceWidth: this.font.widthOfGlyph(glyph)
	        });
	      }
	      return [encoded, positions];
	    };

	    StandardFont.prototype.widthOfString = function(string, size) {
	      var advance, advances, glyphs, j, len, scale, width;
	      glyphs = this.font.glyphsForString('' + string);
	      advances = this.font.advancesForGlyphs(glyphs);
	      width = 0;
	      for (j = 0, len = advances.length; j < len; j++) {
	        advance = advances[j];
	        width += advance;
	      }
	      scale = size / 1000;
	      return width * scale;
	    };

	    StandardFont.isStandardFont = function(name) {
	      return name in STANDARD_FONTS;
	    };

	    STANDARD_FONTS = {
	      "Courier": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Courier.afm", 'utf8');
	      },
	      "Courier-Bold": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Courier-Bold.afm", 'utf8');
	      },
	      "Courier-Oblique": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Courier-Oblique.afm", 'utf8');
	      },
	      "Courier-BoldOblique": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Courier-BoldOblique.afm", 'utf8');
	      },
	      "Helvetica": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Helvetica.afm", 'utf8');
	      },
	      "Helvetica-Bold": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Helvetica-Bold.afm", 'utf8');
	      },
	      "Helvetica-Oblique": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Helvetica-Oblique.afm", 'utf8');
	      },
	      "Helvetica-BoldOblique": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Helvetica-BoldOblique.afm", 'utf8');
	      },
	      "Times-Roman": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Times-Roman.afm", 'utf8');
	      },
	      "Times-Bold": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Times-Bold.afm", 'utf8');
	      },
	      "Times-Italic": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Times-Italic.afm", 'utf8');
	      },
	      "Times-BoldItalic": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Times-BoldItalic.afm", 'utf8');
	      },
	      "Symbol": function() {
	        return fs.readFileSync(__dirname + "/../font/data/Symbol.afm", 'utf8');
	      },
	      "ZapfDingbats": function() {
	        return fs.readFileSync(__dirname + "/../font/data/ZapfDingbats.afm", 'utf8');
	      }
	    };

	    return StandardFont;

	  })(PDFFont);

	  module.exports = StandardFont;

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var AFMFont, fs;

	  fs = __webpack_require__(10);

	  AFMFont = (function() {
	    var WIN_ANSI_MAP, characters;

	    AFMFont.open = function(filename) {
	      return new AFMFont(fs.readFileSync(filename, 'utf8'));
	    };

	    function AFMFont(contents) {
	      var e, i;
	      this.contents = contents;
	      this.attributes = {};
	      this.glyphWidths = {};
	      this.boundingBoxes = {};
	      this.kernPairs = {};
	      this.parse();
	      this.charWidths = (function() {
	        var j, results;
	        results = [];
	        for (i = j = 0; j <= 255; i = ++j) {
	          results.push(this.glyphWidths[characters[i]]);
	        }
	        return results;
	      }).call(this);
	      this.bbox = (function() {
	        var j, len, ref, results;
	        ref = this.attributes['FontBBox'].split(/\s+/);
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          e = ref[j];
	          results.push(+e);
	        }
	        return results;
	      }).call(this);
	      this.ascender = +(this.attributes['Ascender'] || 0);
	      this.descender = +(this.attributes['Descender'] || 0);
	      this.lineGap = (this.bbox[3] - this.bbox[1]) - (this.ascender - this.descender);
	    }

	    AFMFont.prototype.parse = function() {
	      var a, j, key, len, line, match, name, ref, section, value;
	      section = '';
	      ref = this.contents.split('\n');
	      for (j = 0, len = ref.length; j < len; j++) {
	        line = ref[j];
	        if (match = line.match(/^Start(\w+)/)) {
	          section = match[1];
	          continue;
	        } else if (match = line.match(/^End(\w+)/)) {
	          section = '';
	          continue;
	        }
	        switch (section) {
	          case 'FontMetrics':
	            match = line.match(/(^\w+)\s+(.*)/);
	            key = match[1];
	            value = match[2];
	            if (a = this.attributes[key]) {
	              if (!Array.isArray(a)) {
	                a = this.attributes[key] = [a];
	              }
	              a.push(value);
	            } else {
	              this.attributes[key] = value;
	            }
	            break;
	          case 'CharMetrics':
	            if (!/^CH?\s/.test(line)) {
	              continue;
	            }
	            name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
	            this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
	            break;
	          case 'KernPairs':
	            match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
	            if (match) {
	              this.kernPairs[match[1] + '\0' + match[2]] = parseInt(match[3]);
	            }
	        }
	      }
	    };

	    WIN_ANSI_MAP = {
	      402: 131,
	      8211: 150,
	      8212: 151,
	      8216: 145,
	      8217: 146,
	      8218: 130,
	      8220: 147,
	      8221: 148,
	      8222: 132,
	      8224: 134,
	      8225: 135,
	      8226: 149,
	      8230: 133,
	      8364: 128,
	      8240: 137,
	      8249: 139,
	      8250: 155,
	      710: 136,
	      8482: 153,
	      338: 140,
	      339: 156,
	      732: 152,
	      352: 138,
	      353: 154,
	      376: 159,
	      381: 142,
	      382: 158
	    };

	    AFMFont.prototype.encodeText = function(text) {
	      var char, i, j, ref, res;
	      res = [];
	      for (i = j = 0, ref = text.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        char = text.charCodeAt(i);
	        char = WIN_ANSI_MAP[char] || char;
	        res.push(char.toString(16));
	      }
	      return res;
	    };

	    AFMFont.prototype.glyphsForString = function(string) {
	      var charCode, glyphs, i, j, ref;
	      glyphs = [];
	      for (i = j = 0, ref = string.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        charCode = string.charCodeAt(i);
	        glyphs.push(this.characterToGlyph(charCode));
	      }
	      return glyphs;
	    };

	    AFMFont.prototype.characterToGlyph = function(character) {
	      return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
	    };

	    AFMFont.prototype.widthOfGlyph = function(glyph) {
	      return this.glyphWidths[glyph] || 0;
	    };

	    AFMFont.prototype.getKernPair = function(left, right) {
	      return this.kernPairs[left + '\0' + right] || 0;
	    };

	    AFMFont.prototype.advancesForGlyphs = function(glyphs) {
	      var advances, index, j, left, len, right;
	      advances = [];
	      for (index = j = 0, len = glyphs.length; j < len; index = ++j) {
	        left = glyphs[index];
	        right = glyphs[index + 1];
	        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
	      }
	      return advances;
	    };

	    characters = '.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis'.split(/\s+/);

	    return AFMFont;

	  })();

	  module.exports = AFMFont;

	}).call(this);


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var EmbeddedFont, PDFFont, PDFObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty,
	    slice = [].slice;

	  PDFFont = __webpack_require__(34);

	  PDFObject = __webpack_require__(25);

	  EmbeddedFont = (function(superClass) {
	    var toHex;

	    extend(EmbeddedFont, superClass);

	    function EmbeddedFont(document, font, id) {
	      this.document = document;
	      this.font = font;
	      this.id = id;
	      this.subset = this.font.createSubset();
	      this.unicode = [[0]];
	      this.widths = [this.font.getGlyph(0).advanceWidth];
	      this.name = this.font.postscriptName;
	      this.scale = 1000 / this.font.unitsPerEm;
	      this.ascender = this.font.ascent * this.scale;
	      this.descender = this.font.descent * this.scale;
	      this.lineGap = this.font.lineGap * this.scale;
	      this.bbox = this.font.bbox;
	    }

	    EmbeddedFont.prototype.encode = function(text, features) {
	      var base, base1, gid, glyph, glyphs, i, j, key, len, positions, ref, res;
	      ref = this.font.layout(text, features), glyphs = ref.glyphs, positions = ref.positions;
	      res = [];
	      for (i = j = 0, len = glyphs.length; j < len; i = ++j) {
	        glyph = glyphs[i];
	        gid = this.subset.includeGlyph(glyph.id);
	        res.push(('0000' + gid.toString(16)).slice(-4));
	        if ((base = this.widths)[gid] == null) {
	          base[gid] = glyph.advanceWidth * this.scale;
	        }
	        if ((base1 = this.unicode)[gid] == null) {
	          base1[gid] = glyph.codePoints;
	        }
	        for (key in positions[i]) {
	          positions[i][key] *= this.scale;
	        }
	        positions[i].advanceWidth = glyph.advanceWidth * this.scale;
	      }
	      return [res, positions];
	    };

	    EmbeddedFont.prototype.widthOfString = function(string, size, features) {
	      var scale, width;
	      width = this.font.layout(string, features).advanceWidth;
	      scale = size / this.font.unitsPerEm;
	      return width * scale;
	    };

	    EmbeddedFont.prototype.embed = function() {
	      var bbox, descendantFont, descriptor, familyClass, flags, fontFile, i, isCFF, name, ref, tag;
	      isCFF = this.subset.cff != null;
	      fontFile = this.document.ref();
	      if (isCFF) {
	        fontFile.data.Subtype = 'CIDFontType0C';
	      }
	      this.subset.encodeStream().pipe(fontFile);
	      familyClass = (((ref = this.font['OS/2']) != null ? ref.sFamilyClass : void 0) || 0) >> 8;
	      flags = 0;
	      if (this.font.post.isFixedPitch) {
	        flags |= 1 << 0;
	      }
	      if ((1 <= familyClass && familyClass <= 7)) {
	        flags |= 1 << 1;
	      }
	      flags |= 1 << 2;
	      if (familyClass === 10) {
	        flags |= 1 << 3;
	      }
	      if (this.font.head.macStyle.italic) {
	        flags |= 1 << 6;
	      }
	      tag = ((function() {
	        var j, results;
	        results = [];
	        for (i = j = 0; j < 6; i = ++j) {
	          results.push(String.fromCharCode(Math.random() * 26 + 65));
	        }
	        return results;
	      })()).join('');
	      name = tag + '+' + this.font.postscriptName;
	      bbox = this.font.bbox;
	      descriptor = this.document.ref({
	        Type: 'FontDescriptor',
	        FontName: name,
	        Flags: flags,
	        FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
	        ItalicAngle: this.font.italicAngle,
	        Ascent: this.ascender,
	        Descent: this.descender,
	        CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
	        XHeight: (this.font.xHeight || 0) * this.scale,
	        StemV: 0
	      });
	      if (isCFF) {
	        descriptor.data.FontFile3 = fontFile;
	      } else {
	        descriptor.data.FontFile2 = fontFile;
	      }
	      descriptor.end();
	      descendantFont = this.document.ref({
	        Type: 'Font',
	        Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',
	        BaseFont: name,
	        CIDSystemInfo: {
	          Registry: new String('Adobe'),
	          Ordering: new String('Identity'),
	          Supplement: 0
	        },
	        FontDescriptor: descriptor,
	        W: [0, this.widths]
	      });
	      descendantFont.end();
	      this.dictionary.data = {
	        Type: 'Font',
	        Subtype: 'Type0',
	        BaseFont: name,
	        Encoding: 'Identity-H',
	        DescendantFonts: [descendantFont],
	        ToUnicode: this.toUnicodeCmap()
	      };
	      return this.dictionary.end();
	    };

	    toHex = function() {
	      var code, codePoints, codes;
	      codePoints = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	      codes = (function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = codePoints.length; j < len; j++) {
	          code = codePoints[j];
	          results.push(('0000' + code.toString(16)).slice(-4));
	        }
	        return results;
	      })();
	      return codes.join('');
	    };

	    EmbeddedFont.prototype.toUnicodeCmap = function() {
	      var cmap, codePoints, encoded, entries, j, k, len, len1, ref, value;
	      cmap = this.document.ref();
	      entries = [];
	      ref = this.unicode;
	      for (j = 0, len = ref.length; j < len; j++) {
	        codePoints = ref[j];
	        encoded = [];
	        for (k = 0, len1 = codePoints.length; k < len1; k++) {
	          value = codePoints[k];
	          if (value > 0xffff) {
	            value -= 0x10000;
	            encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
	            value = 0xdc00 | value & 0x3ff;
	          }
	          encoded.push(toHex(value));
	        }
	        entries.push("<" + (encoded.join(' ')) + ">");
	      }
	      cmap.end("/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n1 beginbfrange\n<0000> <" + (toHex(entries.length - 1)) + "> [" + (entries.join(' ')) + "]\nendbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend");
	      return cmap;
	    };

	    return EmbeddedFont;

	  })(PDFFont);

	  module.exports = EmbeddedFont;

	}).call(this);


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var LineWrapper;

	  LineWrapper = __webpack_require__(86);

	  module.exports = {
	    initText: function() {
	      this.x = 0;
	      this.y = 0;
	      return this._lineGap = 0;
	    },
	    lineGap: function(_lineGap) {
	      this._lineGap = _lineGap;
	      return this;
	    },
	    moveDown: function(lines) {
	      if (lines == null) {
	        lines = 1;
	      }
	      this.y += this.currentLineHeight(true) * lines + this._lineGap;
	      return this;
	    },
	    moveUp: function(lines) {
	      if (lines == null) {
	        lines = 1;
	      }
	      this.y -= this.currentLineHeight(true) * lines + this._lineGap;
	      return this;
	    },
	    _text: function(text, x, y, options, lineCallback) {
	      var j, len, line, ref, wrapper;
	      options = this._initOptions(x, y, options);
	      text = '' + text;
	      if (options.wordSpacing) {
	        text = text.replace(/\s{2,}/g, ' ');
	      }
	      if (options.width) {
	        wrapper = this._wrapper;
	        if (!wrapper) {
	          wrapper = new LineWrapper(this, options);
	          wrapper.on('line', lineCallback);
	        }
	        this._wrapper = options.continued ? wrapper : null;
	        this._textOptions = options.continued ? options : null;
	        wrapper.wrap(text, options);
	      } else {
	        ref = text.split('\n');
	        for (j = 0, len = ref.length; j < len; j++) {
	          line = ref[j];
	          lineCallback(line, options);
	        }
	      }
	      return this;
	    },
	    text: function(text, x, y, options) {
	      return this._text(text, x, y, options, this._line.bind(this));
	    },
	    widthOfString: function(string, options) {
	      if (options == null) {
	        options = {};
	      }
	      return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
	    },
	    heightOfString: function(text, options) {
	      var height, lineGap, x, y;
	      if (options == null) {
	        options = {};
	      }
	      x = this.x, y = this.y;
	      options = this._initOptions(options);
	      options.height = Infinity;
	      lineGap = options.lineGap || this._lineGap || 0;
	      this._text(text, this.x, this.y, options, (function(_this) {
	        return function(line, options) {
	          return _this.y += _this.currentLineHeight(true) + lineGap;
	        };
	      })(this));
	      height = this.y - y;
	      this.x = x;
	      this.y = y;
	      return height;
	    },
	    list: function(list, x, y, options, wrapper) {
	      var flatten, i, indent, itemIndent, items, level, levels, r;
	      options = this._initOptions(x, y, options);
	      r = Math.round((this._font.ascender / 1000 * this._fontSize) / 3);
	      indent = options.textIndent || r * 5;
	      itemIndent = options.bulletIndent || r * 8;
	      level = 1;
	      items = [];
	      levels = [];
	      flatten = function(list) {
	        var i, item, j, len, results;
	        results = [];
	        for (i = j = 0, len = list.length; j < len; i = ++j) {
	          item = list[i];
	          if (Array.isArray(item)) {
	            level++;
	            flatten(item);
	            results.push(level--);
	          } else {
	            items.push(item);
	            results.push(levels.push(level));
	          }
	        }
	        return results;
	      };
	      flatten(list);
	      wrapper = new LineWrapper(this, options);
	      wrapper.on('line', this._line.bind(this));
	      level = 1;
	      i = 0;
	      wrapper.on('firstLine', (function(_this) {
	        return function() {
	          var diff, l;
	          if ((l = levels[i++]) !== level) {
	            diff = itemIndent * (l - level);
	            _this.x += diff;
	            wrapper.lineWidth -= diff;
	            level = l;
	          }
	          _this.circle(_this.x - indent + r, _this.y + r + (r / 2), r);
	          return _this.fill();
	        };
	      })(this));
	      wrapper.on('sectionStart', (function(_this) {
	        return function() {
	          var pos;
	          pos = indent + itemIndent * (level - 1);
	          _this.x += pos;
	          return wrapper.lineWidth -= pos;
	        };
	      })(this));
	      wrapper.on('sectionEnd', (function(_this) {
	        return function() {
	          var pos;
	          pos = indent + itemIndent * (level - 1);
	          _this.x -= pos;
	          return wrapper.lineWidth += pos;
	        };
	      })(this));
	      wrapper.wrap(items.join('\n'), options);
	      return this;
	    },
	    _initOptions: function(x, y, options) {
	      var key, margins, ref, val;
	      if (x == null) {
	        x = {};
	      }
	      if (options == null) {
	        options = {};
	      }
	      if (typeof x === 'object') {
	        options = x;
	        x = null;
	      }
	      options = (function() {
	        var k, opts, v;
	        opts = {};
	        for (k in options) {
	          v = options[k];
	          opts[k] = v;
	        }
	        return opts;
	      })();
	      if (this._textOptions) {
	        ref = this._textOptions;
	        for (key in ref) {
	          val = ref[key];
	          if (key !== 'continued') {
	            if (options[key] == null) {
	              options[key] = val;
	            }
	          }
	        }
	      }
	      if (x != null) {
	        this.x = x;
	      }
	      if (y != null) {
	        this.y = y;
	      }
	      if (options.lineBreak !== false) {
	        margins = this.page.margins;
	        if (options.width == null) {
	          options.width = this.page.width - this.x - margins.right;
	        }
	      }
	      options.columns || (options.columns = 0);
	      if (options.columnGap == null) {
	        options.columnGap = 18;
	      }
	      return options;
	    },
	    _line: function(text, options, wrapper) {
	      var lineGap;
	      if (options == null) {
	        options = {};
	      }
	      this._fragment(text, this.x, this.y, options);
	      lineGap = options.lineGap || this._lineGap || 0;
	      if (!wrapper) {
	        return this.x += this.widthOfString(text);
	      } else {
	        return this.y += this.currentLineHeight(true) + lineGap;
	      }
	    },
	    _fragment: function(text, x, y, options) {
	      var addSegment, align, base, characterSpacing, commands, d, encoded, encodedWord, flush, hadOffset, i, j, last, len, len1, lineWidth, lineY, m, mode, name, pos, positions, positionsWord, ref, ref1, renderedWidth, scale, spaceWidth, textWidth, word, wordSpacing, words;
	      text = ('' + text).replace(/\n/g, '');
	      if (text.length === 0) {
	        return;
	      }
	      align = options.align || 'left';
	      wordSpacing = options.wordSpacing || 0;
	      characterSpacing = options.characterSpacing || 0;
	      if (options.width) {
	        switch (align) {
	          case 'right':
	            textWidth = this.widthOfString(text.replace(/\s+$/, ''), options);
	            x += options.lineWidth - textWidth;
	            break;
	          case 'center':
	            x += options.lineWidth / 2 - options.textWidth / 2;
	            break;
	          case 'justify':
	            words = text.trim().split(/\s+/);
	            textWidth = this.widthOfString(text.replace(/\s+/g, ''), options);
	            spaceWidth = this.widthOfString(' ') + characterSpacing;
	            wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
	        }
	      }
	      renderedWidth = options.textWidth + (wordSpacing * (options.wordCount - 1)) + (characterSpacing * (text.length - 1));
	      if (options.link) {
	        this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
	      }
	      if (options.underline || options.strike) {
	        this.save();
	        if (!options.stroke) {
	          this.strokeColor.apply(this, this._fillColor);
	        }
	        lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
	        this.lineWidth(lineWidth);
	        d = options.underline ? 1 : 2;
	        lineY = y + this.currentLineHeight() / d;
	        if (options.underline) {
	          lineY -= lineWidth;
	        }
	        this.moveTo(x, lineY);
	        this.lineTo(x + renderedWidth, lineY);
	        this.stroke();
	        this.restore();
	      }
	      this.save();
	      this.transform(1, 0, 0, -1, 0, this.page.height);
	      y = this.page.height - y - (this._font.ascender / 1000 * this._fontSize);
	      if ((base = this.page.fonts)[name = this._font.id] == null) {
	        base[name] = this._font.ref();
	      }
	      this.addContent("BT");
	      this.addContent("1 0 0 1 " + x + " " + y + " Tm");
	      this.addContent("/" + this._font.id + " " + this._fontSize + " Tf");
	      mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
	      if (mode) {
	        this.addContent(mode + " Tr");
	      }
	      if (characterSpacing) {
	        this.addContent(characterSpacing + " Tc");
	      }
	      if (wordSpacing) {
	        words = text.trim().split(/\s+/);
	        wordSpacing += this.widthOfString(' ') + characterSpacing;
	        wordSpacing *= 1000 / this._fontSize;
	        encoded = [];
	        positions = [];
	        for (j = 0, len = words.length; j < len; j++) {
	          word = words[j];
	          ref = this._font.encode(word, options.features), encodedWord = ref[0], positionsWord = ref[1];
	          encoded.push.apply(encoded, encodedWord);
	          positions.push.apply(positions, positionsWord);
	          positions[positions.length - 1].xAdvance += wordSpacing;
	        }
	      } else {
	        ref1 = this._font.encode(text, options.features), encoded = ref1[0], positions = ref1[1];
	      }
	      scale = this._fontSize / 1000;
	      commands = [];
	      last = 0;
	      hadOffset = false;
	      addSegment = (function(_this) {
	        return function(cur) {
	          var advance, hex;
	          if (last < cur) {
	            hex = encoded.slice(last, cur).join('');
	            advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
	            commands.push("<" + hex + "> " + (-advance));
	          }
	          return last = cur;
	        };
	      })(this);
	      flush = (function(_this) {
	        return function(i) {
	          addSegment(i);
	          if (commands.length > 0) {
	            _this.addContent("[" + (commands.join(' ')) + "] TJ");
	            return commands.length = 0;
	          }
	        };
	      })(this);
	      for (i = m = 0, len1 = positions.length; m < len1; i = ++m) {
	        pos = positions[i];
	        if (pos.xOffset || pos.yOffset) {
	          flush(i);
	          this.addContent("1 0 0 1 " + (x + pos.xOffset * scale) + " " + (y + pos.yOffset * scale) + " Tm");
	          flush(i + 1);
	          hadOffset = true;
	        } else {
	          if (hadOffset) {
	            this.addContent("1 0 0 1 " + x + " " + y + " Tm");
	            hadOffset = false;
	          }
	          if (pos.xAdvance - pos.advanceWidth !== 0) {
	            addSegment(i + 1);
	          }
	        }
	        x += pos.xAdvance * scale;
	      }
	      flush(i);
	      this.addContent("ET");
	      return this.restore();
	    }
	  };

	}).call(this);


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var EventEmitter, LineBreaker, LineWrapper,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  EventEmitter = __webpack_require__(87).EventEmitter;

	  LineBreaker = __webpack_require__(88);

	  LineWrapper = (function(superClass) {
	    extend(LineWrapper, superClass);

	    function LineWrapper(document, options) {
	      var ref;
	      this.document = document;
	      this.indent = options.indent || 0;
	      this.characterSpacing = options.characterSpacing || 0;
	      this.wordSpacing = options.wordSpacing === 0;
	      this.columns = options.columns || 1;
	      this.columnGap = (ref = options.columnGap) != null ? ref : 18;
	      this.lineWidth = (options.width - (this.columnGap * (this.columns - 1))) / this.columns;
	      this.spaceLeft = this.lineWidth;
	      this.startX = this.document.x;
	      this.startY = this.document.y;
	      this.column = 1;
	      this.ellipsis = options.ellipsis;
	      this.continuedX = 0;
	      this.features = options.features;
	      if (options.height != null) {
	        this.height = options.height;
	        this.maxY = this.startY + options.height;
	      } else {
	        this.maxY = this.document.page.maxY();
	      }
	      this.on('firstLine', (function(_this) {
	        return function(options) {
	          var indent;
	          indent = _this.continuedX || _this.indent;
	          _this.document.x += indent;
	          _this.lineWidth -= indent;
	          return _this.once('line', function() {
	            _this.document.x -= indent;
	            _this.lineWidth += indent;
	            if (options.continued && !_this.continuedX) {
	              _this.continuedX = _this.indent;
	            }
	            if (!options.continued) {
	              return _this.continuedX = 0;
	            }
	          });
	        };
	      })(this));
	      this.on('lastLine', (function(_this) {
	        return function(options) {
	          var align;
	          align = options.align;
	          if (align === 'justify') {
	            options.align = 'left';
	          }
	          _this.lastLine = true;
	          return _this.once('line', function() {
	            _this.document.y += options.paragraphGap || 0;
	            options.align = align;
	            return _this.lastLine = false;
	          });
	        };
	      })(this));
	    }

	    LineWrapper.prototype.wordWidth = function(word) {
	      return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
	    };

	    LineWrapper.prototype.eachWord = function(text, fn) {
	      var bk, breaker, fbk, l, last, lbk, shouldContinue, w, word, wordWidths;
	      breaker = new LineBreaker(text);
	      last = null;
	      wordWidths = Object.create(null);
	      while (bk = breaker.nextBreak()) {
	        word = text.slice((last != null ? last.position : void 0) || 0, bk.position);
	        w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
	        if (w > this.lineWidth + this.continuedX) {
	          lbk = last;
	          fbk = {};
	          while (word.length) {
	            l = word.length;
	            while (w > this.spaceLeft) {
	              w = this.wordWidth(word.slice(0, --l));
	            }
	            fbk.required = l < word.length;
	            shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
	            lbk = {
	              required: false
	            };
	            word = word.slice(l);
	            w = this.wordWidth(word);
	            if (shouldContinue === false) {
	              break;
	            }
	          }
	        } else {
	          shouldContinue = fn(word, w, bk, last);
	        }
	        if (shouldContinue === false) {
	          break;
	        }
	        last = bk;
	      }
	    };

	    LineWrapper.prototype.wrap = function(text, options) {
	      var buffer, emitLine, lc, nextY, textWidth, wc, y;
	      if (options.indent != null) {
	        this.indent = options.indent;
	      }
	      if (options.characterSpacing != null) {
	        this.characterSpacing = options.characterSpacing;
	      }
	      if (options.wordSpacing != null) {
	        this.wordSpacing = options.wordSpacing;
	      }
	      if (options.ellipsis != null) {
	        this.ellipsis = options.ellipsis;
	      }
	      nextY = this.document.y + this.document.currentLineHeight(true);
	      if (this.document.y > this.maxY || nextY > this.maxY) {
	        this.nextSection();
	      }
	      buffer = '';
	      textWidth = 0;
	      wc = 0;
	      lc = 0;
	      y = this.document.y;
	      emitLine = (function(_this) {
	        return function() {
	          options.textWidth = textWidth + _this.wordSpacing * (wc - 1);
	          options.wordCount = wc;
	          options.lineWidth = _this.lineWidth;
	          y = _this.document.y;
	          _this.emit('line', buffer, options, _this);
	          return lc++;
	        };
	      })(this);
	      this.emit('sectionStart', options, this);
	      this.eachWord(text, (function(_this) {
	        return function(word, w, bk, last) {
	          var lh, shouldContinue;
	          if ((last == null) || last.required) {
	            _this.emit('firstLine', options, _this);
	            _this.spaceLeft = _this.lineWidth;
	          }
	          if (w <= _this.spaceLeft) {
	            buffer += word;
	            textWidth += w;
	            wc++;
	          }
	          if (bk.required || w > _this.spaceLeft) {
	            if (bk.required) {
	              _this.emit('lastLine', options, _this);
	            }
	            lh = _this.document.currentLineHeight(true);
	            if ((_this.height != null) && _this.ellipsis && _this.document.y + lh * 2 > _this.maxY && _this.column >= _this.columns) {
	              if (_this.ellipsis === true) {
	                _this.ellipsis = '…';
	              }
	              buffer = buffer.replace(/\s+$/, '');
	              textWidth = _this.wordWidth(buffer + _this.ellipsis);
	              while (textWidth > _this.lineWidth) {
	                buffer = buffer.slice(0, -1).replace(/\s+$/, '');
	                textWidth = _this.wordWidth(buffer + _this.ellipsis);
	              }
	              buffer = buffer + _this.ellipsis;
	            }
	            emitLine();
	            if (_this.document.y + lh > _this.maxY) {
	              shouldContinue = _this.nextSection();
	              if (!shouldContinue) {
	                wc = 0;
	                buffer = '';
	                return false;
	              }
	            }
	            if (bk.required) {
	              if (w > _this.spaceLeft) {
	                buffer = word;
	                textWidth = w;
	                wc = 1;
	                emitLine();
	              }
	              _this.spaceLeft = _this.lineWidth;
	              buffer = '';
	              textWidth = 0;
	              return wc = 0;
	            } else {
	              _this.spaceLeft = _this.lineWidth - w;
	              buffer = word;
	              textWidth = w;
	              return wc = 1;
	            }
	          } else {
	            return _this.spaceLeft -= w;
	          }
	        };
	      })(this));
	      if (wc > 0) {
	        this.emit('lastLine', options, this);
	        emitLine();
	      }
	      this.emit('sectionEnd', options, this);
	      if (options.continued === true) {
	        if (lc > 1) {
	          this.continuedX = 0;
	        }
	        this.continuedX += options.textWidth;
	        return this.document.y = y;
	      } else {
	        return this.document.x = this.startX;
	      }
	    };

	    LineWrapper.prototype.nextSection = function(options) {
	      var ref;
	      this.emit('sectionEnd', options, this);
	      if (++this.column > this.columns) {
	        if (this.height != null) {
	          return false;
	        }
	        this.document.addPage();
	        this.column = 1;
	        this.startY = this.document.page.margins.top;
	        this.maxY = this.document.page.maxY();
	        this.document.x = this.startX;
	        if (this.document._fillColor) {
	          (ref = this.document).fillColor.apply(ref, this.document._fillColor);
	        }
	        this.emit('pageBreak', options, this);
	      } else {
	        this.document.x += this.lineWidth + this.columnGap;
	        this.document.y = this.startY;
	        this.emit('columnBreak', options, this);
	      }
	      this.emit('sectionStart', options, this);
	      return true;
	    };

	    return LineWrapper;

	  })(EventEmitter);

	  module.exports = LineWrapper;

	}).call(this);


/***/ },
/* 87 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_87__;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, characterClasses, classTrie, pairTable, _ref, _ref1;

	  UnicodeTrie = __webpack_require__(9);

	  classTrie = new UnicodeTrie(__webpack_require__(89));

	  _ref = __webpack_require__(90), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;

	  _ref1 = __webpack_require__(91), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;

	  LineBreaker = (function() {
	    var Break, mapClass, mapFirst;

	    function LineBreaker(string) {
	      this.string = string;
	      this.pos = 0;
	      this.lastPos = 0;
	      this.curClass = null;
	      this.nextClass = null;
	    }

	    LineBreaker.prototype.nextCodePoint = function() {
	      var code, next;
	      code = this.string.charCodeAt(this.pos++);
	      next = this.string.charCodeAt(this.pos);
	      if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {
	        this.pos++;
	        return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;
	      }
	      return code;
	    };

	    mapClass = function(c) {
	      switch (c) {
	        case AI:
	          return AL;
	        case SA:
	        case SG:
	        case XX:
	          return AL;
	        case CJ:
	          return NS;
	        default:
	          return c;
	      }
	    };

	    mapFirst = function(c) {
	      switch (c) {
	        case LF:
	        case NL:
	          return BK;
	        case CB:
	          return BA;
	        case SP:
	          return WJ;
	        default:
	          return c;
	      }
	    };

	    LineBreaker.prototype.nextCharClass = function(first) {
	      if (first == null) {
	        first = false;
	      }
	      return mapClass(classTrie.get(this.nextCodePoint()));
	    };

	    Break = (function() {
	      function Break(position, required) {
	        this.position = position;
	        this.required = required != null ? required : false;
	      }

	      return Break;

	    })();

	    LineBreaker.prototype.nextBreak = function() {
	      var cur, lastClass, shouldBreak;
	      if (this.curClass == null) {
	        this.curClass = mapFirst(this.nextCharClass());
	      }
	      while (this.pos < this.string.length) {
	        this.lastPos = this.pos;
	        lastClass = this.nextClass;
	        this.nextClass = this.nextCharClass();
	        if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {
	          this.curClass = mapFirst(mapClass(this.nextClass));
	          return new Break(this.lastPos, true);
	        }
	        cur = (function() {
	          switch (this.nextClass) {
	            case SP:
	              return this.curClass;
	            case BK:
	            case LF:
	            case NL:
	              return BK;
	            case CR:
	              return CR;
	            case CB:
	              return BA;
	          }
	        }).call(this);
	        if (cur != null) {
	          this.curClass = cur;
	          if (this.nextClass === CB) {
	            return new Break(this.lastPos);
	          }
	          continue;
	        }
	        shouldBreak = false;
	        switch (pairTable[this.curClass][this.nextClass]) {
	          case DI_BRK:
	            shouldBreak = true;
	            break;
	          case IN_BRK:
	            shouldBreak = lastClass === SP;
	            break;
	          case CI_BRK:
	            shouldBreak = lastClass === SP;
	            if (!shouldBreak) {
	              continue;
	            }
	            break;
	          case CP_BRK:
	            if (lastClass !== SP) {
	              continue;
	            }
	        }
	        this.curClass = this.nextClass;
	        if (shouldBreak) {
	          return new Break(this.lastPos);
	        }
	      }
	      if (this.pos >= this.string.length) {
	        if (this.lastPos < this.string.length) {
	          this.lastPos = this.string.length;
	          return new Break(this.string.length);
	        } else {
	          return null;
	        }
	      }
	    };

	    return LineBreaker;

	  })();

	  module.exports = LineBreaker;

	}).call(this);


/***/ },
/* 89 */
/***/ function(module, exports) {

	module.exports = {
		"data": [
			1961,
			1969,
			1977,
			1985,
			2025,
			2033,
			2041,
			2049,
			2057,
			2065,
			2073,
			2081,
			2089,
			2097,
			2105,
			2113,
			2121,
			2129,
			2137,
			2145,
			2153,
			2161,
			2169,
			2177,
			2185,
			2193,
			2201,
			2209,
			2217,
			2225,
			2233,
			2241,
			2249,
			2257,
			2265,
			2273,
			2281,
			2289,
			2297,
			2305,
			2313,
			2321,
			2329,
			2337,
			2345,
			2353,
			2361,
			2369,
			2377,
			2385,
			2393,
			2401,
			2409,
			2417,
			2425,
			2433,
			2441,
			2449,
			2457,
			2465,
			2473,
			2481,
			2489,
			2497,
			2505,
			2513,
			2521,
			2529,
			2529,
			2537,
			2009,
			2545,
			2553,
			2561,
			2569,
			2577,
			2585,
			2593,
			2601,
			2609,
			2617,
			2625,
			2633,
			2641,
			2649,
			2657,
			2665,
			2673,
			2681,
			2689,
			2697,
			2705,
			2713,
			2721,
			2729,
			2737,
			2745,
			2753,
			2761,
			2769,
			2777,
			2785,
			2793,
			2801,
			2809,
			2817,
			2825,
			2833,
			2841,
			2849,
			2857,
			2865,
			2873,
			2881,
			2889,
			2009,
			2897,
			2905,
			2913,
			2009,
			2921,
			2929,
			2937,
			2945,
			2953,
			2961,
			2969,
			2009,
			2977,
			2977,
			2985,
			2993,
			3001,
			3009,
			3009,
			3009,
			3017,
			3017,
			3017,
			3025,
			3025,
			3033,
			3041,
			3041,
			3049,
			3049,
			3049,
			3049,
			3049,
			3049,
			3049,
			3049,
			3049,
			3049,
			3057,
			3065,
			3073,
			3073,
			3073,
			3081,
			3089,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3097,
			3105,
			3113,
			3113,
			3121,
			3129,
			3137,
			3145,
			3153,
			3161,
			3161,
			3169,
			3177,
			3185,
			3193,
			3193,
			3193,
			3193,
			3201,
			3209,
			3209,
			3217,
			3225,
			3233,
			3241,
			3241,
			3241,
			3249,
			3257,
			3265,
			3273,
			3273,
			3281,
			3289,
			3297,
			2009,
			2009,
			3305,
			3313,
			3321,
			3329,
			3337,
			3345,
			3353,
			3361,
			3369,
			3377,
			3385,
			3393,
			2009,
			2009,
			3401,
			3409,
			3417,
			3417,
			3417,
			3417,
			3417,
			3417,
			3425,
			3425,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3433,
			3441,
			3449,
			3457,
			3465,
			3473,
			3481,
			3489,
			3497,
			3505,
			3513,
			3521,
			3529,
			3537,
			3545,
			3553,
			3561,
			3569,
			3577,
			3585,
			3593,
			3601,
			3609,
			3617,
			3625,
			3625,
			3633,
			3641,
			3649,
			3649,
			3649,
			3649,
			3649,
			3657,
			3665,
			3665,
			3673,
			3681,
			3681,
			3681,
			3681,
			3689,
			3697,
			3697,
			3705,
			3713,
			3721,
			3729,
			3737,
			3745,
			3753,
			3761,
			3769,
			3777,
			3785,
			3793,
			3801,
			3809,
			3817,
			3825,
			3833,
			3841,
			3849,
			3857,
			3865,
			3873,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3881,
			3889,
			3897,
			3905,
			3913,
			3921,
			3921,
			3921,
			3921,
			3921,
			3921,
			3921,
			3921,
			3921,
			3921,
			3929,
			2009,
			2009,
			2009,
			2009,
			2009,
			3937,
			3937,
			3937,
			3937,
			3937,
			3937,
			3937,
			3945,
			3953,
			3953,
			3953,
			3961,
			3969,
			3969,
			3977,
			3985,
			3993,
			4001,
			2009,
			2009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4009,
			4017,
			4025,
			4033,
			4041,
			4049,
			4057,
			4065,
			4073,
			4081,
			4081,
			4081,
			4081,
			4081,
			4081,
			4081,
			4089,
			4097,
			4097,
			4105,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4113,
			4121,
			4121,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4129,
			4137,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4145,
			4153,
			4161,
			4169,
			4169,
			4169,
			4169,
			4169,
			4169,
			4169,
			4169,
			4177,
			4185,
			4193,
			4201,
			4209,
			4217,
			4217,
			4225,
			4233,
			4233,
			4233,
			4233,
			4233,
			4233,
			4233,
			4233,
			4241,
			4249,
			4257,
			4265,
			4273,
			4281,
			4289,
			4297,
			4305,
			4313,
			4321,
			4329,
			4337,
			4345,
			4353,
			4361,
			4361,
			4369,
			4377,
			4385,
			4385,
			4385,
			4385,
			4393,
			4401,
			4409,
			4409,
			4409,
			4409,
			4409,
			4409,
			4417,
			4425,
			4433,
			4441,
			4449,
			4457,
			4465,
			4473,
			4481,
			4489,
			4497,
			4505,
			4513,
			4521,
			4529,
			4537,
			4545,
			4553,
			4561,
			4569,
			4577,
			4585,
			4593,
			4601,
			4609,
			4617,
			4625,
			4633,
			4641,
			4649,
			4657,
			4665,
			4673,
			4681,
			4689,
			4697,
			4705,
			4713,
			4721,
			4729,
			4737,
			4745,
			4753,
			4761,
			4769,
			4777,
			4785,
			4793,
			4801,
			4809,
			4817,
			4825,
			4833,
			4841,
			4849,
			4857,
			4865,
			4873,
			4881,
			4889,
			4897,
			4905,
			4913,
			4921,
			4929,
			4937,
			4945,
			4953,
			4961,
			4969,
			4977,
			4985,
			4993,
			5001,
			5009,
			5017,
			5025,
			5033,
			5041,
			5049,
			5057,
			5065,
			5073,
			5081,
			5089,
			5097,
			5105,
			5113,
			5121,
			5129,
			5137,
			5145,
			5153,
			5161,
			5169,
			5177,
			5185,
			5193,
			5201,
			5209,
			5217,
			5225,
			5233,
			5241,
			5249,
			5257,
			5265,
			5273,
			5281,
			5289,
			5297,
			5305,
			5313,
			5321,
			5329,
			5337,
			5345,
			5353,
			5361,
			5369,
			5377,
			5385,
			5393,
			5401,
			5409,
			5417,
			5425,
			5433,
			5441,
			5449,
			5457,
			5465,
			5473,
			5481,
			5489,
			5497,
			5505,
			5513,
			5521,
			5529,
			5537,
			5545,
			5553,
			5561,
			5569,
			5577,
			5585,
			5593,
			5601,
			5609,
			5617,
			5625,
			5633,
			5641,
			5649,
			5657,
			5665,
			5673,
			5681,
			5689,
			5697,
			5705,
			5713,
			5721,
			5729,
			5737,
			5745,
			5753,
			5761,
			5769,
			5777,
			5785,
			5793,
			5801,
			5809,
			5817,
			5825,
			5833,
			5841,
			5849,
			5857,
			5865,
			5873,
			5881,
			5889,
			5897,
			5905,
			5913,
			5921,
			5929,
			5937,
			5945,
			5953,
			5961,
			5969,
			5977,
			5985,
			5993,
			6001,
			6009,
			6017,
			6025,
			6033,
			6041,
			6049,
			6057,
			6065,
			6073,
			6081,
			6089,
			6097,
			6105,
			6113,
			6121,
			6129,
			6137,
			6145,
			6153,
			6161,
			6169,
			6177,
			6185,
			6193,
			6201,
			6209,
			6217,
			6225,
			6233,
			6241,
			6249,
			6257,
			6265,
			6273,
			6281,
			6289,
			6297,
			6305,
			6313,
			6321,
			6329,
			6337,
			6345,
			6353,
			6361,
			6369,
			6377,
			6385,
			6393,
			6401,
			6409,
			6417,
			6425,
			6433,
			6441,
			6449,
			6457,
			6465,
			6473,
			6481,
			6489,
			6497,
			6505,
			6513,
			6521,
			6529,
			6537,
			6545,
			6553,
			6561,
			6569,
			6577,
			6585,
			6593,
			6601,
			6609,
			6617,
			6625,
			6633,
			6641,
			6649,
			6657,
			6665,
			6673,
			6681,
			6689,
			6697,
			6705,
			6713,
			6721,
			6729,
			6737,
			6745,
			6753,
			6761,
			6769,
			6777,
			6785,
			6793,
			6801,
			6809,
			6817,
			6825,
			6833,
			6841,
			6849,
			6857,
			6865,
			6873,
			6881,
			6889,
			6897,
			6905,
			6913,
			6921,
			6929,
			6937,
			6945,
			6953,
			6961,
			6969,
			6977,
			6985,
			6993,
			7001,
			7009,
			7017,
			7025,
			7033,
			7041,
			7049,
			7057,
			7065,
			7073,
			7081,
			7089,
			7097,
			7105,
			7113,
			7121,
			7129,
			7137,
			7145,
			7153,
			7161,
			7169,
			7177,
			7185,
			7193,
			7201,
			7209,
			7217,
			7225,
			7233,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7249,
			7257,
			7265,
			7273,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7281,
			7289,
			7297,
			7305,
			7305,
			7305,
			7305,
			7313,
			7321,
			7329,
			7337,
			7345,
			7353,
			7353,
			7353,
			7361,
			7369,
			7377,
			7385,
			7393,
			7401,
			7409,
			7417,
			7425,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7241,
			7972,
			7972,
			8100,
			8164,
			8228,
			8292,
			8356,
			8420,
			8484,
			8548,
			8612,
			8676,
			8740,
			8804,
			8868,
			8932,
			8996,
			9060,
			9124,
			9188,
			9252,
			9316,
			9380,
			9444,
			9508,
			9572,
			9636,
			9700,
			9764,
			9828,
			9892,
			9956,
			2593,
			2657,
			2721,
			2529,
			2785,
			2529,
			2849,
			2913,
			2977,
			3041,
			3105,
			3169,
			3233,
			3297,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			3361,
			2529,
			2529,
			2529,
			3425,
			2529,
			2529,
			3489,
			3553,
			2529,
			3617,
			3681,
			3745,
			3809,
			3873,
			3937,
			4001,
			4065,
			4129,
			4193,
			4257,
			4321,
			4385,
			4449,
			4513,
			4577,
			4641,
			4705,
			4769,
			4833,
			4897,
			4961,
			5025,
			5089,
			5153,
			5217,
			5281,
			5345,
			5409,
			5473,
			5537,
			5601,
			5665,
			5729,
			5793,
			5857,
			5921,
			5985,
			6049,
			6113,
			6177,
			6241,
			6305,
			6369,
			6433,
			6497,
			6561,
			6625,
			6689,
			6753,
			6817,
			6881,
			6945,
			7009,
			7073,
			7137,
			7201,
			7265,
			7329,
			7393,
			7457,
			7521,
			7585,
			7649,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			2529,
			7713,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7433,
			7433,
			7433,
			7433,
			7433,
			7433,
			7433,
			7441,
			7449,
			7457,
			7457,
			7457,
			7457,
			7457,
			7457,
			7465,
			2009,
			2009,
			2009,
			2009,
			7473,
			7473,
			7473,
			7473,
			7473,
			7473,
			7473,
			7473,
			7481,
			7489,
			7497,
			7505,
			7505,
			7505,
			7505,
			7505,
			7513,
			7521,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7529,
			7529,
			7537,
			7545,
			7545,
			7545,
			7545,
			7545,
			7553,
			7561,
			7561,
			7561,
			7561,
			7561,
			7561,
			7561,
			7569,
			7577,
			7585,
			7593,
			7593,
			7593,
			7593,
			7593,
			7593,
			7601,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7609,
			7617,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7625,
			7633,
			7641,
			7649,
			7657,
			7665,
			7673,
			7681,
			7689,
			7697,
			7705,
			2009,
			7713,
			7721,
			7729,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7737,
			7745,
			7753,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7761,
			7769,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7777,
			7785,
			7793,
			7801,
			7809,
			7809,
			7809,
			7809,
			7809,
			7809,
			7817,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7825,
			7833,
			7841,
			7849,
			2009,
			2009,
			2009,
			7857,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7865,
			7873,
			7881,
			7889,
			7897,
			7897,
			7897,
			7897,
			7905,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7913,
			7921,
			7929,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7937,
			7937,
			7937,
			7937,
			7937,
			7937,
			7937,
			7945,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			7953,
			7953,
			7953,
			7953,
			7953,
			7953,
			7953,
			2009,
			7961,
			7969,
			7977,
			7985,
			7993,
			2009,
			2009,
			8001,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8009,
			8017,
			8025,
			8025,
			8025,
			8025,
			8025,
			8025,
			8025,
			8033,
			8041,
			8049,
			8057,
			8065,
			8073,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8081,
			8089,
			2009,
			8097,
			8097,
			8097,
			8105,
			2009,
			2009,
			2009,
			2009,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8113,
			8121,
			8129,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8137,
			8145,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			2009,
			67496,
			67496,
			67496,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			34,
			30,
			30,
			33,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			38,
			6,
			3,
			12,
			9,
			10,
			12,
			3,
			0,
			2,
			12,
			9,
			8,
			16,
			8,
			7,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			8,
			8,
			12,
			12,
			12,
			6,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			9,
			2,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			17,
			1,
			12,
			21,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			35,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			4,
			0,
			10,
			9,
			9,
			9,
			12,
			29,
			29,
			12,
			29,
			3,
			12,
			17,
			12,
			12,
			10,
			9,
			29,
			29,
			18,
			12,
			29,
			29,
			29,
			29,
			29,
			3,
			29,
			29,
			29,
			0,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			18,
			29,
			29,
			29,
			18,
			29,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			29,
			12,
			18,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			4,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			8,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			8,
			17,
			39,
			39,
			39,
			39,
			9,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			21,
			12,
			21,
			21,
			12,
			21,
			21,
			6,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			10,
			10,
			10,
			8,
			8,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			6,
			6,
			6,
			6,
			6,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			10,
			11,
			11,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			6,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			8,
			6,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			17,
			17,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			10,
			10,
			12,
			12,
			12,
			12,
			12,
			10,
			12,
			9,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			21,
			21,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			9,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			9,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			10,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			21,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			39,
			39,
			39,
			39,
			9,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			36,
			36,
			36,
			36,
			12,
			18,
			18,
			18,
			18,
			12,
			18,
			18,
			4,
			18,
			18,
			17,
			4,
			6,
			6,
			6,
			6,
			6,
			4,
			12,
			6,
			12,
			12,
			12,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			21,
			12,
			21,
			12,
			21,
			0,
			1,
			0,
			1,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			21,
			21,
			21,
			21,
			21,
			17,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			18,
			18,
			17,
			18,
			12,
			12,
			12,
			12,
			12,
			4,
			4,
			39,
			39,
			39,
			39,
			39,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			17,
			17,
			12,
			12,
			12,
			12,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			36,
			36,
			36,
			36,
			36,
			36,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			21,
			21,
			21,
			12,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			17,
			17,
			5,
			36,
			17,
			12,
			17,
			9,
			36,
			36,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			6,
			6,
			17,
			17,
			18,
			12,
			6,
			6,
			12,
			21,
			21,
			21,
			4,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			12,
			39,
			39,
			39,
			6,
			6,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			36,
			36,
			36,
			36,
			36,
			36,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			12,
			12,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			39,
			39,
			21,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			17,
			17,
			12,
			17,
			17,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			17,
			17,
			17,
			17,
			17,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			12,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			18,
			12,
			39,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			4,
			17,
			17,
			17,
			20,
			21,
			21,
			21,
			21,
			17,
			4,
			17,
			17,
			19,
			29,
			29,
			12,
			3,
			3,
			0,
			3,
			3,
			3,
			0,
			3,
			29,
			29,
			12,
			12,
			15,
			15,
			15,
			17,
			30,
			30,
			21,
			21,
			21,
			21,
			21,
			4,
			10,
			10,
			10,
			10,
			10,
			10,
			10,
			10,
			12,
			3,
			3,
			29,
			5,
			5,
			12,
			12,
			12,
			12,
			12,
			12,
			8,
			0,
			1,
			5,
			5,
			5,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			12,
			17,
			17,
			17,
			17,
			12,
			17,
			17,
			17,
			22,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			39,
			39,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			29,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			10,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			9,
			10,
			9,
			9,
			9,
			9,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			10,
			12,
			29,
			12,
			12,
			12,
			10,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			9,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			29,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			29,
			29,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			12,
			12,
			12,
			29,
			12,
			29,
			9,
			9,
			12,
			29,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			29,
			12,
			29,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			12,
			12,
			29,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			12,
			29,
			29,
			12,
			12,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			14,
			14,
			29,
			29,
			14,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			29,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			29,
			29,
			29,
			12,
			29,
			14,
			29,
			29,
			12,
			29,
			29,
			12,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			29,
			29,
			29,
			29,
			14,
			12,
			14,
			14,
			14,
			29,
			14,
			14,
			29,
			29,
			29,
			14,
			14,
			29,
			29,
			14,
			29,
			29,
			14,
			14,
			14,
			12,
			29,
			12,
			12,
			12,
			12,
			29,
			29,
			14,
			29,
			29,
			29,
			29,
			29,
			29,
			14,
			14,
			14,
			14,
			14,
			29,
			14,
			14,
			14,
			14,
			29,
			29,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			12,
			12,
			12,
			3,
			3,
			3,
			3,
			12,
			12,
			12,
			6,
			6,
			12,
			12,
			12,
			12,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			29,
			29,
			29,
			29,
			29,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			6,
			17,
			17,
			17,
			12,
			6,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			12,
			17,
			0,
			17,
			12,
			12,
			3,
			3,
			12,
			12,
			3,
			3,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			17,
			17,
			17,
			17,
			6,
			12,
			17,
			17,
			12,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			19,
			19,
			39,
			39,
			39,
			39,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			1,
			1,
			14,
			14,
			5,
			14,
			14,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			14,
			14,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			5,
			0,
			1,
			1,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			21,
			21,
			21,
			21,
			21,
			21,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			5,
			5,
			14,
			14,
			14,
			39,
			32,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			32,
			39,
			39,
			21,
			21,
			5,
			5,
			5,
			5,
			14,
			5,
			32,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			32,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			32,
			32,
			14,
			14,
			14,
			14,
			5,
			32,
			5,
			5,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			5,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			6,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			12,
			17,
			17,
			17,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			10,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			18,
			18,
			6,
			6,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			17,
			17,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			25,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			12,
			17,
			17,
			17,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			36,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			17,
			17,
			12,
			12,
			12,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			21,
			21,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			23,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			24,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			26,
			39,
			39,
			39,
			39,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			27,
			39,
			39,
			39,
			39,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			37,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			13,
			21,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			12,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			13,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			10,
			12,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			8,
			1,
			1,
			8,
			8,
			6,
			6,
			0,
			1,
			15,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			14,
			14,
			14,
			14,
			14,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			0,
			1,
			14,
			14,
			0,
			1,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			1,
			14,
			1,
			39,
			5,
			5,
			6,
			6,
			14,
			0,
			1,
			0,
			1,
			0,
			1,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			9,
			10,
			14,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			22,
			39,
			6,
			14,
			14,
			9,
			10,
			14,
			14,
			0,
			1,
			14,
			14,
			1,
			14,
			1,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			5,
			5,
			14,
			14,
			14,
			6,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			0,
			14,
			1,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			0,
			14,
			1,
			14,
			0,
			1,
			1,
			0,
			1,
			1,
			5,
			12,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			5,
			5,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			10,
			9,
			14,
			14,
			14,
			9,
			9,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			31,
			29,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			17,
			17,
			17,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			17,
			17,
			17,
			17,
			17,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			17,
			17,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			17,
			17,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			17,
			17,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			17,
			17,
			12,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			17,
			17,
			17,
			17,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			0,
			0,
			1,
			1,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			1,
			12,
			12,
			12,
			0,
			1,
			0,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			0,
			1,
			1,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			21,
			21,
			21,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			39,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			12,
			12,
			39,
			39,
			39,
			39,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			29,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			28,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			14,
			12,
			14,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			14,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			12,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			14,
			39,
			39,
			39,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			21,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39,
			39
		],
		"highStart": 919552,
		"errorValue": 0
	};

/***/ },
/* 90 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;

	  exports.OP = OP = 0;

	  exports.CL = CL = 1;

	  exports.CP = CP = 2;

	  exports.QU = QU = 3;

	  exports.GL = GL = 4;

	  exports.NS = NS = 5;

	  exports.EX = EX = 6;

	  exports.SY = SY = 7;

	  exports.IS = IS = 8;

	  exports.PR = PR = 9;

	  exports.PO = PO = 10;

	  exports.NU = NU = 11;

	  exports.AL = AL = 12;

	  exports.HL = HL = 13;

	  exports.ID = ID = 14;

	  exports.IN = IN = 15;

	  exports.HY = HY = 16;

	  exports.BA = BA = 17;

	  exports.BB = BB = 18;

	  exports.B2 = B2 = 19;

	  exports.ZW = ZW = 20;

	  exports.CM = CM = 21;

	  exports.WJ = WJ = 22;

	  exports.H2 = H2 = 23;

	  exports.H3 = H3 = 24;

	  exports.JL = JL = 25;

	  exports.JV = JV = 26;

	  exports.JT = JT = 27;

	  exports.RI = RI = 28;

	  exports.AI = AI = 29;

	  exports.BK = BK = 30;

	  exports.CB = CB = 31;

	  exports.CJ = CJ = 32;

	  exports.CR = CR = 33;

	  exports.LF = LF = 34;

	  exports.NL = NL = 35;

	  exports.SA = SA = 36;

	  exports.SG = SG = 37;

	  exports.SP = SP = 38;

	  exports.XX = XX = 39;

	}).call(this);


/***/ },
/* 91 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.7.1
	(function() {
	  var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;

	  exports.DI_BRK = DI_BRK = 0;

	  exports.IN_BRK = IN_BRK = 1;

	  exports.CI_BRK = CI_BRK = 2;

	  exports.CP_BRK = CP_BRK = 3;

	  exports.PR_BRK = PR_BRK = 4;

	  exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];

	}).call(this);


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var PDFImage;

	  PDFImage = __webpack_require__(93);

	  module.exports = {
	    initImages: function() {
	      this._imageRegistry = {};
	      return this._imageCount = 0;
	    },
	    image: function(src, x, y, options) {
	      var base, bh, bp, bw, h, hp, image, ip, name, ref, ref1, ref2, w, wp;
	      if (options == null) {
	        options = {};
	      }
	      if (typeof x === 'object') {
	        options = x;
	        x = null;
	      }
	      x = (ref = x != null ? x : options.x) != null ? ref : this.x;
	      y = (ref1 = y != null ? y : options.y) != null ? ref1 : this.y;
	      if (!Buffer.isBuffer(src)) {
	        image = this._imageRegistry[src];
	      }
	      if (!image) {
	        image = PDFImage.open(src, 'I' + (++this._imageCount));
	        image.embed(this);
	        if (!Buffer.isBuffer(src)) {
	          this._imageRegistry[src] = image;
	        }
	      }
	      if ((base = this.page.xobjects)[name = image.label] == null) {
	        base[name] = image.obj;
	      }
	      w = options.width || image.width;
	      h = options.height || image.height;
	      if (options.width && !options.height) {
	        wp = w / image.width;
	        w = image.width * wp;
	        h = image.height * wp;
	      } else if (options.height && !options.width) {
	        hp = h / image.height;
	        w = image.width * hp;
	        h = image.height * hp;
	      } else if (options.scale) {
	        w = image.width * options.scale;
	        h = image.height * options.scale;
	      } else if (options.fit) {
	        ref2 = options.fit, bw = ref2[0], bh = ref2[1];
	        bp = bw / bh;
	        ip = image.width / image.height;
	        if (ip > bp) {
	          w = bw;
	          h = bw / ip;
	        } else {
	          h = bh;
	          w = bh * ip;
	        }
	        if (options.align === 'center') {
	          x = x + bw / 2 - w / 2;
	        } else if (options.align === 'right') {
	          x = x + bw - w;
	        }
	        if (options.valign === 'center') {
	          y = y + bh / 2 - h / 2;
	        } else if (options.valign === 'bottom') {
	          y = y + bh - h;
	        }
	      }
	      if (this.y === y) {
	        this.y += h;
	      }
	      this.save();
	      this.transform(w, 0, 0, -h, x, y + h);
	      this.addContent("/" + image.label + " Do");
	      this.restore();
	      return this;
	    }
	  };

	}).call(this);


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/*
	PDFImage - embeds images in PDF documents
	By Devon Govett
	 */

	(function() {
	  var Data, JPEG, PDFImage, PNG, fs;

	  fs = __webpack_require__(10);

	  Data = __webpack_require__(94);

	  JPEG = __webpack_require__(95);

	  PNG = __webpack_require__(96);

	  PDFImage = (function() {
	    function PDFImage() {}

	    PDFImage.open = function(src, label) {
	      var data, match;
	      if (Buffer.isBuffer(src)) {
	        data = src;
	      } else if (src instanceof ArrayBuffer) {
	        data = new Buffer(new Uint8Array(src));
	      } else {
	        if (match = /^data:.+;base64,(.*)$/.exec(src)) {
	          data = new Buffer(match[1], 'base64');
	        } else {
	          data = fs.readFileSync(src);
	          if (!data) {
	            return;
	          }
	        }
	      }
	      if (data[0] === 0xff && data[1] === 0xd8) {
	        return new JPEG(data, label);
	      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {
	        return new PNG(data, label);
	      } else {
	        throw new Error('Unknown image format.');
	      }
	    };

	    return PDFImage;

	  })();

	  module.exports = PDFImage;

	}).call(this);


/***/ },
/* 94 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var Data;

	  Data = (function() {
	    function Data(data) {
	      this.data = data != null ? data : [];
	      this.pos = 0;
	      this.length = this.data.length;
	    }

	    Data.prototype.readByte = function() {
	      return this.data[this.pos++];
	    };

	    Data.prototype.writeByte = function(byte) {
	      return this.data[this.pos++] = byte;
	    };

	    Data.prototype.byteAt = function(index) {
	      return this.data[index];
	    };

	    Data.prototype.readBool = function() {
	      return !!this.readByte();
	    };

	    Data.prototype.writeBool = function(val) {
	      return this.writeByte(val ? 1 : 0);
	    };

	    Data.prototype.readUInt32 = function() {
	      var b1, b2, b3, b4;
	      b1 = this.readByte() * 0x1000000;
	      b2 = this.readByte() << 16;
	      b3 = this.readByte() << 8;
	      b4 = this.readByte();
	      return b1 + b2 + b3 + b4;
	    };

	    Data.prototype.writeUInt32 = function(val) {
	      this.writeByte((val >>> 24) & 0xff);
	      this.writeByte((val >> 16) & 0xff);
	      this.writeByte((val >> 8) & 0xff);
	      return this.writeByte(val & 0xff);
	    };

	    Data.prototype.readInt32 = function() {
	      var int;
	      int = this.readUInt32();
	      if (int >= 0x80000000) {
	        return int - 0x100000000;
	      } else {
	        return int;
	      }
	    };

	    Data.prototype.writeInt32 = function(val) {
	      if (val < 0) {
	        val += 0x100000000;
	      }
	      return this.writeUInt32(val);
	    };

	    Data.prototype.readUInt16 = function() {
	      var b1, b2;
	      b1 = this.readByte() << 8;
	      b2 = this.readByte();
	      return b1 | b2;
	    };

	    Data.prototype.writeUInt16 = function(val) {
	      this.writeByte((val >> 8) & 0xff);
	      return this.writeByte(val & 0xff);
	    };

	    Data.prototype.readInt16 = function() {
	      var int;
	      int = this.readUInt16();
	      if (int >= 0x8000) {
	        return int - 0x10000;
	      } else {
	        return int;
	      }
	    };

	    Data.prototype.writeInt16 = function(val) {
	      if (val < 0) {
	        val += 0x10000;
	      }
	      return this.writeUInt16(val);
	    };

	    Data.prototype.readString = function(length) {
	      var i, j, ref, ret;
	      ret = [];
	      for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        ret[i] = String.fromCharCode(this.readByte());
	      }
	      return ret.join('');
	    };

	    Data.prototype.writeString = function(val) {
	      var i, j, ref, results;
	      results = [];
	      for (i = j = 0, ref = val.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        results.push(this.writeByte(val.charCodeAt(i)));
	      }
	      return results;
	    };

	    Data.prototype.stringAt = function(pos, length) {
	      this.pos = pos;
	      return this.readString(length);
	    };

	    Data.prototype.readShort = function() {
	      return this.readInt16();
	    };

	    Data.prototype.writeShort = function(val) {
	      return this.writeInt16(val);
	    };

	    Data.prototype.readLongLong = function() {
	      var b1, b2, b3, b4, b5, b6, b7, b8;
	      b1 = this.readByte();
	      b2 = this.readByte();
	      b3 = this.readByte();
	      b4 = this.readByte();
	      b5 = this.readByte();
	      b6 = this.readByte();
	      b7 = this.readByte();
	      b8 = this.readByte();
	      if (b1 & 0x80) {
	        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;
	      }
	      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;
	    };

	    Data.prototype.writeLongLong = function(val) {
	      var high, low;
	      high = Math.floor(val / 0x100000000);
	      low = val & 0xffffffff;
	      this.writeByte((high >> 24) & 0xff);
	      this.writeByte((high >> 16) & 0xff);
	      this.writeByte((high >> 8) & 0xff);
	      this.writeByte(high & 0xff);
	      this.writeByte((low >> 24) & 0xff);
	      this.writeByte((low >> 16) & 0xff);
	      this.writeByte((low >> 8) & 0xff);
	      return this.writeByte(low & 0xff);
	    };

	    Data.prototype.readInt = function() {
	      return this.readInt32();
	    };

	    Data.prototype.writeInt = function(val) {
	      return this.writeInt32(val);
	    };

	    Data.prototype.slice = function(start, end) {
	      return this.data.slice(start, end);
	    };

	    Data.prototype.read = function(bytes) {
	      var buf, i, j, ref;
	      buf = [];
	      for (i = j = 0, ref = bytes; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        buf.push(this.readByte());
	      }
	      return buf;
	    };

	    Data.prototype.write = function(bytes) {
	      var byte, j, len, results;
	      results = [];
	      for (j = 0, len = bytes.length; j < len; j++) {
	        byte = bytes[j];
	        results.push(this.writeByte(byte));
	      }
	      return results;
	    };

	    return Data;

	  })();

	  module.exports = Data;

	}).call(this);


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var JPEG, fs,
	    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	  fs = __webpack_require__(10);

	  JPEG = (function() {
	    var MARKERS;

	    MARKERS = [0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC5, 0xFFC6, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF];

	    function JPEG(data, label) {
	      var channels, marker, pos;
	      this.data = data;
	      this.label = label;
	      if (this.data.readUInt16BE(0) !== 0xFFD8) {
	        throw "SOI not found in JPEG";
	      }
	      pos = 2;
	      while (pos < this.data.length) {
	        marker = this.data.readUInt16BE(pos);
	        pos += 2;
	        if (indexOf.call(MARKERS, marker) >= 0) {
	          break;
	        }
	        pos += this.data.readUInt16BE(pos);
	      }
	      if (indexOf.call(MARKERS, marker) < 0) {
	        throw "Invalid JPEG.";
	      }
	      pos += 2;
	      this.bits = this.data[pos++];
	      this.height = this.data.readUInt16BE(pos);
	      pos += 2;
	      this.width = this.data.readUInt16BE(pos);
	      pos += 2;
	      channels = this.data[pos++];
	      this.colorSpace = (function() {
	        switch (channels) {
	          case 1:
	            return 'DeviceGray';
	          case 3:
	            return 'DeviceRGB';
	          case 4:
	            return 'DeviceCMYK';
	        }
	      })();
	      this.obj = null;
	    }

	    JPEG.prototype.embed = function(document) {
	      if (this.obj) {
	        return;
	      }
	      this.obj = document.ref({
	        Type: 'XObject',
	        Subtype: 'Image',
	        BitsPerComponent: this.bits,
	        Width: this.width,
	        Height: this.height,
	        ColorSpace: this.colorSpace,
	        Filter: 'DCTDecode'
	      });
	      if (this.colorSpace === 'DeviceCMYK') {
	        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];
	      }
	      this.obj.end(this.data);
	      return this.data = null;
	    };

	    return JPEG;

	  })();

	  module.exports = JPEG;

	}).call(this);


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var PNG, PNGImage, zlib;

	  zlib = __webpack_require__(27);

	  PNG = __webpack_require__(97);

	  PNGImage = (function() {
	    function PNGImage(data, label) {
	      this.label = label;
	      this.image = new PNG(data);
	      this.width = this.image.width;
	      this.height = this.image.height;
	      this.imgData = this.image.imgData;
	      this.obj = null;
	    }

	    PNGImage.prototype.embed = function(document) {
	      var k, len1, mask, palette, params, rgb, val, x;
	      this.document = document;
	      if (this.obj) {
	        return;
	      }
	      this.obj = this.document.ref({
	        Type: 'XObject',
	        Subtype: 'Image',
	        BitsPerComponent: this.image.bits,
	        Width: this.width,
	        Height: this.height,
	        Filter: 'FlateDecode'
	      });
	      if (!this.image.hasAlphaChannel) {
	        params = this.document.ref({
	          Predictor: 15,
	          Colors: this.image.colors,
	          BitsPerComponent: this.image.bits,
	          Columns: this.width
	        });
	        this.obj.data['DecodeParms'] = params;
	        params.end();
	      }
	      if (this.image.palette.length === 0) {
	        this.obj.data['ColorSpace'] = this.image.colorSpace;
	      } else {
	        palette = this.document.ref();
	        palette.end(new Buffer(this.image.palette));
	        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', (this.image.palette.length / 3) - 1, palette];
	      }
	      if (this.image.transparency.grayscale) {
	        val = this.image.transparency.greyscale;
	        return this.obj.data['Mask'] = [val, val];
	      } else if (this.image.transparency.rgb) {
	        rgb = this.image.transparency.rgb;
	        mask = [];
	        for (k = 0, len1 = rgb.length; k < len1; k++) {
	          x = rgb[k];
	          mask.push(x, x);
	        }
	        return this.obj.data['Mask'] = mask;
	      } else if (this.image.transparency.indexed) {
	        return this.loadIndexedAlphaChannel();
	      } else if (this.image.hasAlphaChannel) {
	        return this.splitAlphaChannel();
	      } else {
	        return this.finalize();
	      }
	    };

	    PNGImage.prototype.finalize = function() {
	      var sMask;
	      if (this.alphaChannel) {
	        sMask = this.document.ref({
	          Type: 'XObject',
	          Subtype: 'Image',
	          Height: this.height,
	          Width: this.width,
	          BitsPerComponent: 8,
	          Filter: 'FlateDecode',
	          ColorSpace: 'DeviceGray',
	          Decode: [0, 1]
	        });
	        sMask.end(this.alphaChannel);
	        this.obj.data['SMask'] = sMask;
	      }
	      this.obj.end(this.imgData);
	      this.image = null;
	      return this.imgData = null;
	    };

	    PNGImage.prototype.splitAlphaChannel = function() {
	      return this.image.decodePixels((function(_this) {
	        return function(pixels) {
	          var a, alphaChannel, colorByteSize, done, i, imgData, len, p, pixelCount;
	          colorByteSize = _this.image.colors * _this.image.bits / 8;
	          pixelCount = _this.width * _this.height;
	          imgData = new Buffer(pixelCount * colorByteSize);
	          alphaChannel = new Buffer(pixelCount);
	          i = p = a = 0;
	          len = pixels.length;
	          while (i < len) {
	            imgData[p++] = pixels[i++];
	            imgData[p++] = pixels[i++];
	            imgData[p++] = pixels[i++];
	            alphaChannel[a++] = pixels[i++];
	          }
	          done = 0;
	          zlib.deflate(imgData, function(err, imgData1) {
	            _this.imgData = imgData1;
	            if (err) {
	              throw err;
	            }
	            if (++done === 2) {
	              return _this.finalize();
	            }
	          });
	          return zlib.deflate(alphaChannel, function(err, alphaChannel1) {
	            _this.alphaChannel = alphaChannel1;
	            if (err) {
	              throw err;
	            }
	            if (++done === 2) {
	              return _this.finalize();
	            }
	          });
	        };
	      })(this));
	    };

	    PNGImage.prototype.loadIndexedAlphaChannel = function(fn) {
	      var transparency;
	      transparency = this.image.transparency.indexed;
	      return this.image.decodePixels((function(_this) {
	        return function(pixels) {
	          var alphaChannel, i, j, k, ref;
	          alphaChannel = new Buffer(_this.width * _this.height);
	          i = 0;
	          for (j = k = 0, ref = pixels.length; k < ref; j = k += 1) {
	            alphaChannel[i++] = transparency[pixels[j]];
	          }
	          return zlib.deflate(alphaChannel, function(err, alphaChannel1) {
	            _this.alphaChannel = alphaChannel1;
	            if (err) {
	              throw err;
	            }
	            return _this.finalize();
	          });
	        };
	      })(this));
	    };

	    return PNGImage;

	  })();

	  module.exports = PNGImage;

	}).call(this);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.4.0

	/*
	# MIT LICENSE
	# Copyright (c) 2011 Devon Govett
	# 
	# Permission is hereby granted, free of charge, to any person obtaining a copy of this 
	# software and associated documentation files (the "Software"), to deal in the Software 
	# without restriction, including without limitation the rights to use, copy, modify, merge, 
	# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
	# to whom the Software is furnished to do so, subject to the following conditions:
	# 
	# The above copyright notice and this permission notice shall be included in all copies or 
	# substantial portions of the Software.
	# 
	# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
	# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
	# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
	# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
	# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	*/


	(function() {
	  var PNG, fs, zlib;

	  fs = __webpack_require__(10);

	  zlib = __webpack_require__(27);

	  module.exports = PNG = (function() {

	    PNG.decode = function(path, fn) {
	      return fs.readFile(path, function(err, file) {
	        var png;
	        png = new PNG(file);
	        return png.decode(function(pixels) {
	          return fn(pixels);
	        });
	      });
	    };

	    PNG.load = function(path) {
	      var file;
	      file = fs.readFileSync(path);
	      return new PNG(file);
	    };

	    function PNG(data) {
	      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;
	      this.data = data;
	      this.pos = 8;
	      this.palette = [];
	      this.imgData = [];
	      this.transparency = {};
	      this.text = {};
	      while (true) {
	        chunkSize = this.readUInt32();
	        section = ((function() {
	          var _i, _results;
	          _results = [];
	          for (i = _i = 0; _i < 4; i = ++_i) {
	            _results.push(String.fromCharCode(this.data[this.pos++]));
	          }
	          return _results;
	        }).call(this)).join('');
	        switch (section) {
	          case 'IHDR':
	            this.width = this.readUInt32();
	            this.height = this.readUInt32();
	            this.bits = this.data[this.pos++];
	            this.colorType = this.data[this.pos++];
	            this.compressionMethod = this.data[this.pos++];
	            this.filterMethod = this.data[this.pos++];
	            this.interlaceMethod = this.data[this.pos++];
	            break;
	          case 'PLTE':
	            this.palette = this.read(chunkSize);
	            break;
	          case 'IDAT':
	            for (i = _i = 0; _i < chunkSize; i = _i += 1) {
	              this.imgData.push(this.data[this.pos++]);
	            }
	            break;
	          case 'tRNS':
	            this.transparency = {};
	            switch (this.colorType) {
	              case 3:
	                this.transparency.indexed = this.read(chunkSize);
	                short = 255 - this.transparency.indexed.length;
	                if (short > 0) {
	                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {
	                    this.transparency.indexed.push(255);
	                  }
	                }
	                break;
	              case 0:
	                this.transparency.grayscale = this.read(chunkSize)[0];
	                break;
	              case 2:
	                this.transparency.rgb = this.read(chunkSize);
	            }
	            break;
	          case 'tEXt':
	            text = this.read(chunkSize);
	            index = text.indexOf(0);
	            key = String.fromCharCode.apply(String, text.slice(0, index));
	            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
	            break;
	          case 'IEND':
	            this.colors = (function() {
	              switch (this.colorType) {
	                case 0:
	                case 3:
	                case 4:
	                  return 1;
	                case 2:
	                case 6:
	                  return 3;
	              }
	            }).call(this);
	            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;
	            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
	            this.pixelBitlength = this.bits * colors;
	            this.colorSpace = (function() {
	              switch (this.colors) {
	                case 1:
	                  return 'DeviceGray';
	                case 3:
	                  return 'DeviceRGB';
	              }
	            }).call(this);
	            this.imgData = new Buffer(this.imgData);
	            return;
	          default:
	            this.pos += chunkSize;
	        }
	        this.pos += 4;
	        if (this.pos > this.data.length) {
	          throw new Error("Incomplete or corrupt PNG file");
	        }
	      }
	      return;
	    }

	    PNG.prototype.read = function(bytes) {
	      var i, _i, _results;
	      _results = [];
	      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {
	        _results.push(this.data[this.pos++]);
	      }
	      return _results;
	    };

	    PNG.prototype.readUInt32 = function() {
	      var b1, b2, b3, b4;
	      b1 = this.data[this.pos++] << 24;
	      b2 = this.data[this.pos++] << 16;
	      b3 = this.data[this.pos++] << 8;
	      b4 = this.data[this.pos++];
	      return b1 | b2 | b3 | b4;
	    };

	    PNG.prototype.readUInt16 = function() {
	      var b1, b2;
	      b1 = this.data[this.pos++] << 8;
	      b2 = this.data[this.pos++];
	      return b1 | b2;
	    };

	    PNG.prototype.decodePixels = function(fn) {
	      var _this = this;
	      return zlib.inflate(this.imgData, function(err, data) {
	        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;
	        if (err) {
	          throw err;
	        }
	        pixelBytes = _this.pixelBitlength / 8;
	        scanlineLength = pixelBytes * _this.width;
	        pixels = new Buffer(scanlineLength * _this.height);
	        length = data.length;
	        row = 0;
	        pos = 0;
	        c = 0;
	        while (pos < length) {
	          switch (data[pos++]) {
	            case 0:
	              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {
	                pixels[c++] = data[pos++];
	              }
	              break;
	            case 1:
	              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {
	                byte = data[pos++];
	                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
	                pixels[c++] = (byte + left) % 256;
	              }
	              break;
	            case 2:
	              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {
	                byte = data[pos++];
	                col = (i - (i % pixelBytes)) / pixelBytes;
	                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
	                pixels[c++] = (upper + byte) % 256;
	              }
	              break;
	            case 3:
	              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {
	                byte = data[pos++];
	                col = (i - (i % pixelBytes)) / pixelBytes;
	                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
	                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
	                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
	              }
	              break;
	            case 4:
	              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {
	                byte = data[pos++];
	                col = (i - (i % pixelBytes)) / pixelBytes;
	                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
	                if (row === 0) {
	                  upper = upperLeft = 0;
	                } else {
	                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
	                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];
	                }
	                p = left + upper - upperLeft;
	                pa = Math.abs(p - left);
	                pb = Math.abs(p - upper);
	                pc = Math.abs(p - upperLeft);
	                if (pa <= pb && pa <= pc) {
	                  paeth = left;
	                } else if (pb <= pc) {
	                  paeth = upper;
	                } else {
	                  paeth = upperLeft;
	                }
	                pixels[c++] = (byte + paeth) % 256;
	              }
	              break;
	            default:
	              throw new Error("Invalid filter algorithm: " + data[pos - 1]);
	          }
	          row++;
	        }
	        return fn(pixels);
	      });
	    };

	    PNG.prototype.decodePalette = function() {
	      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;
	      palette = this.palette;
	      transparency = this.transparency.indexed || [];
	      ret = new Buffer(transparency.length + palette.length);
	      pos = 0;
	      length = palette.length;
	      c = 0;
	      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {
	        ret[pos++] = palette[i];
	        ret[pos++] = palette[i + 1];
	        ret[pos++] = palette[i + 2];
	        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;
	      }
	      return ret;
	    };

	    PNG.prototype.copyToImageData = function(imageData, pixels) {
	      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;
	      colors = this.colors;
	      palette = null;
	      alpha = this.hasAlphaChannel;
	      if (this.palette.length) {
	        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();
	        colors = 4;
	        alpha = true;
	      }
	      data = (imageData != null ? imageData.data : void 0) || imageData;
	      length = data.length;
	      input = palette || pixels;
	      i = j = 0;
	      if (colors === 1) {
	        while (i < length) {
	          k = palette ? pixels[i / 4] * 4 : j;
	          v = input[k++];
	          data[i++] = v;
	          data[i++] = v;
	          data[i++] = v;
	          data[i++] = alpha ? input[k++] : 255;
	          j = k;
	        }
	      } else {
	        while (i < length) {
	          k = palette ? pixels[i / 4] * 4 : j;
	          data[i++] = input[k++];
	          data[i++] = input[k++];
	          data[i++] = input[k++];
	          data[i++] = alpha ? input[k++] : 255;
	          j = k;
	        }
	      }
	    };

	    PNG.prototype.decode = function(fn) {
	      var ret,
	        _this = this;
	      ret = new Buffer(this.width * this.height * 4);
	      return this.decodePixels(function(pixels) {
	        _this.copyToImageData(ret, pixels);
	        return fn(ret);
	      });
	    };

	    return PNG;

	  })();

	}).call(this);


/***/ },
/* 98 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = {
	    annotate: function(x, y, w, h, options) {
	      var key, ref, val;
	      options.Type = 'Annot';
	      options.Rect = this._convertRect(x, y, w, h);
	      options.Border = [0, 0, 0];
	      if (options.Subtype !== 'Link') {
	        if (options.C == null) {
	          options.C = this._normalizeColor(options.color || [0, 0, 0]);
	        }
	      }
	      delete options.color;
	      if (typeof options.Dest === 'string') {
	        options.Dest = new String(options.Dest);
	      }
	      for (key in options) {
	        val = options[key];
	        options[key[0].toUpperCase() + key.slice(1)] = val;
	      }
	      ref = this.ref(options);
	      this.page.annotations.push(ref);
	      ref.end();
	      return this;
	    },
	    note: function(x, y, w, h, contents, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Text';
	      options.Contents = new String(contents);
	      options.Name = 'Comment';
	      if (options.color == null) {
	        options.color = [243, 223, 92];
	      }
	      return this.annotate(x, y, w, h, options);
	    },
	    link: function(x, y, w, h, url, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Link';
	      options.A = this.ref({
	        S: 'URI',
	        URI: new String(url)
	      });
	      options.A.end();
	      return this.annotate(x, y, w, h, options);
	    },
	    _markup: function(x, y, w, h, options) {
	      var ref1, x1, x2, y1, y2;
	      if (options == null) {
	        options = {};
	      }
	      ref1 = this._convertRect(x, y, w, h), x1 = ref1[0], y1 = ref1[1], x2 = ref1[2], y2 = ref1[3];
	      options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
	      options.Contents = new String;
	      return this.annotate(x, y, w, h, options);
	    },
	    highlight: function(x, y, w, h, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Highlight';
	      if (options.color == null) {
	        options.color = [241, 238, 148];
	      }
	      return this._markup(x, y, w, h, options);
	    },
	    underline: function(x, y, w, h, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Underline';
	      return this._markup(x, y, w, h, options);
	    },
	    strike: function(x, y, w, h, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'StrikeOut';
	      return this._markup(x, y, w, h, options);
	    },
	    lineAnnotation: function(x1, y1, x2, y2, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Line';
	      options.Contents = new String;
	      options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
	      return this.annotate(x1, y1, x2, y2, options);
	    },
	    rectAnnotation: function(x, y, w, h, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Square';
	      options.Contents = new String;
	      return this.annotate(x, y, w, h, options);
	    },
	    ellipseAnnotation: function(x, y, w, h, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'Circle';
	      options.Contents = new String;
	      return this.annotate(x, y, w, h, options);
	    },
	    textAnnotation: function(x, y, w, h, text, options) {
	      if (options == null) {
	        options = {};
	      }
	      options.Subtype = 'FreeText';
	      options.Contents = new String(text);
	      options.DA = new String;
	      return this.annotate(x, y, w, h, options);
	    },
	    _convertRect: function(x1, y1, w, h) {
	      var m0, m1, m2, m3, m4, m5, ref1, x2, y2;
	      y2 = y1;
	      y1 += h;
	      x2 = x1 + w;
	      ref1 = this._ctm, m0 = ref1[0], m1 = ref1[1], m2 = ref1[2], m3 = ref1[3], m4 = ref1[4], m5 = ref1[5];
	      x1 = m0 * x1 + m2 * y1 + m4;
	      y1 = m1 * x1 + m3 * y1 + m5;
	      x2 = m0 * x2 + m2 * y2 + m4;
	      y2 = m1 * x2 + m3 * y2 + m5;
	      return [x1, y1, x2, y2];
	    }
	  };

	}).call(this);


/***/ },
/* 99 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	module.exports = {
		'4A0': [4767.87, 6740.79],
		'2A0': [3370.39, 4767.87],
		A0: [2383.94, 3370.39],
		A1: [1683.78, 2383.94],
		A2: [1190.55, 1683.78],
		A3: [841.89, 1190.55],
		A4: [595.28, 841.89],
		A5: [419.53, 595.28],
		A6: [297.64, 419.53],
		A7: [209.76, 297.64],
		A8: [147.40, 209.76],
		A9: [104.88, 147.40],
		A10: [73.70, 104.88],
		B0: [2834.65, 4008.19],
		B1: [2004.09, 2834.65],
		B2: [1417.32, 2004.09],
		B3: [1000.63, 1417.32],
		B4: [708.66, 1000.63],
		B5: [498.90, 708.66],
		B6: [354.33, 498.90],
		B7: [249.45, 354.33],
		B8: [175.75, 249.45],
		B9: [124.72, 175.75],
		B10: [87.87, 124.72],
		C0: [2599.37, 3676.54],
		C1: [1836.85, 2599.37],
		C2: [1298.27, 1836.85],
		C3: [918.43, 1298.27],
		C4: [649.13, 918.43],
		C5: [459.21, 649.13],
		C6: [323.15, 459.21],
		C7: [229.61, 323.15],
		C8: [161.57, 229.61],
		C9: [113.39, 161.57],
		C10: [79.37, 113.39],
		RA0: [2437.80, 3458.27],
		RA1: [1729.13, 2437.80],
		RA2: [1218.90, 1729.13],
		RA3: [864.57, 1218.90],
		RA4: [609.45, 864.57],
		SRA0: [2551.18, 3628.35],
		SRA1: [1814.17, 2551.18],
		SRA2: [1275.59, 1814.17],
		SRA3: [907.09, 1275.59],
		SRA4: [637.80, 907.09],
		EXECUTIVE: [521.86, 756.00],
		FOLIO: [612.00, 936.00],
		LEGAL: [612.00, 1008.00],
		LETTER: [612.00, 792.00],
		TABLOID: [792.00, 1224.00]
	};


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint node: true */
	'use strict';

	var PDFImage = __webpack_require__(93);

	function ImageMeasure(pdfKitDoc, imageDictionary) {
		this.pdfKitDoc = pdfKitDoc;
		this.imageDictionary = imageDictionary || {};
	}

	ImageMeasure.prototype.measureImage = function (src) {
		var image, label;
		var that = this;

		if (!this.pdfKitDoc._imageRegistry[src]) {
			label = 'I' + (++this.pdfKitDoc._imageCount);
			try {
				image = PDFImage.open(realImageSrc(src), label);
			} catch (error) {
				image = null;
			}
			if (image === null || image === undefined) {
				throw 'invalid image, images dictionary should contain dataURL entries (or local file paths in node.js)';
			}
			image.embed(this.pdfKitDoc);
			this.pdfKitDoc._imageRegistry[src] = image;
		} else {
			image = this.pdfKitDoc._imageRegistry[src];
		}

		return {width: image.width, height: image.height};

		function realImageSrc(src) {
			var img = that.imageDictionary[src];

			if (!img) {
				return src;
			}

			var index = img.indexOf('base64,');
			if (index < 0) {
				return that.imageDictionary[src];
			}

			return new Buffer(img.substring(index + 7), 'base64');
		}
	};

	module.exports = ImageMeasure;


/***/ },
/* 101 */
/***/ function(module, exports) {

	/* jslint node: true */
	'use strict';

	function groupDecorations(line) {
		var groups = [], curGroup = null;
		for (var i = 0, l = line.inlines.length; i < l; i++) {
			var inline = line.inlines[i];
			var decoration = inline.decoration;
			if (!decoration) {
				curGroup = null;
				continue;
			}
			var color = inline.decorationColor || inline.color || 'black';
			var style = inline.decorationStyle || 'solid';
			decoration = Array.isArray(decoration) ? decoration : [decoration];
			for (var ii = 0, ll = decoration.length; ii < ll; ii++) {
				var deco = decoration[ii];
				if (!curGroup || deco !== curGroup.decoration ||
					style !== curGroup.decorationStyle || color !== curGroup.decorationColor ||
					deco === 'lineThrough') {

					curGroup = {
						line: line,
						decoration: deco,
						decorationColor: color,
						decorationStyle: style,
						inlines: [inline]
					};
					groups.push(curGroup);
				} else {
					curGroup.inlines.push(inline);
				}
			}
		}

		return groups;
	}

	function drawDecoration(group, x, y, pdfKitDoc) {
		function maxInline() {
			var max = 0;
			for (var i = 0, l = group.inlines.length; i < l; i++) {
				var inl = group.inlines[i];
				max = inl.fontSize > max ? i : max;
			}
			return group.inlines[max];
		}
		function width() {
			var sum = 0;
			for (var i = 0, l = group.inlines.length; i < l; i++) {
				sum += group.inlines[i].width;
			}
			return sum;
		}
		var firstInline = group.inlines[0],
			biggerInline = maxInline(),
			totalWidth = width(),
			lineAscent = group.line.getAscenderHeight(),
			ascent = biggerInline.font.ascender / 1000 * biggerInline.fontSize,
			height = biggerInline.height,
			descent = height - ascent;

		var lw = 0.5 + Math.floor(Math.max(biggerInline.fontSize - 8, 0) / 2) * 0.12;

		switch (group.decoration) {
			case 'underline':
				y += lineAscent + descent * 0.45;
				break;
			case 'overline':
				y += lineAscent - (ascent * 0.85);
				break;
			case 'lineThrough':
				y += lineAscent - (ascent * 0.25);
				break;
			default:
				throw 'Unkown decoration : ' + group.decoration;
		}
		pdfKitDoc.save();

		if (group.decorationStyle === 'double') {
			var gap = Math.max(0.5, lw * 2);
			pdfKitDoc.fillColor(group.decorationColor)
				.rect(x + firstInline.x, y - lw / 2, totalWidth, lw / 2).fill()
				.rect(x + firstInline.x, y + gap - lw / 2, totalWidth, lw / 2).fill();
		} else if (group.decorationStyle === 'dashed') {
			var nbDashes = Math.ceil(totalWidth / (3.96 + 2.84));
			var rdx = x + firstInline.x;
			pdfKitDoc.rect(rdx, y, totalWidth, lw).clip();
			pdfKitDoc.fillColor(group.decorationColor);
			for (var i = 0; i < nbDashes; i++) {
				pdfKitDoc.rect(rdx, y - lw / 2, 3.96, lw).fill();
				rdx += 3.96 + 2.84;
			}
		} else if (group.decorationStyle === 'dotted') {
			var nbDots = Math.ceil(totalWidth / (lw * 3));
			var rx = x + firstInline.x;
			pdfKitDoc.rect(rx, y, totalWidth, lw).clip();
			pdfKitDoc.fillColor(group.decorationColor);
			for (var ii = 0; ii < nbDots; ii++) {
				pdfKitDoc.rect(rx, y - lw / 2, lw, lw).fill();
				rx += (lw * 3);
			}
		} else if (group.decorationStyle === 'wavy') {
			var sh = 0.7, sv = 1;
			var nbWaves = Math.ceil(totalWidth / (sh * 2)) + 1;
			var rwx = x + firstInline.x - 1;
			pdfKitDoc.rect(x + firstInline.x, y - sv, totalWidth, y + sv).clip();
			pdfKitDoc.lineWidth(0.24);
			pdfKitDoc.moveTo(rwx, y);
			for (var iii = 0; iii < nbWaves; iii++) {
				pdfKitDoc.bezierCurveTo(rwx + sh, y - sv, rwx + sh * 2, y - sv, rwx + sh * 3, y)
					.bezierCurveTo(rwx + sh * 4, y + sv, rwx + sh * 5, y + sv, rwx + sh * 6, y);
				rwx += sh * 6;
			}
			pdfKitDoc.stroke(group.decorationColor);

		} else {
			pdfKitDoc.fillColor(group.decorationColor)
				.rect(x + firstInline.x, y - lw / 2, totalWidth, lw)
				.fill();
		}
		pdfKitDoc.restore();
	}

	function drawDecorations(line, x, y, pdfKitDoc) {
		var groups = groupDecorations(line);
		for (var i = 0, l = groups.length; i < l; i++) {
			drawDecoration(groups[i], x, y, pdfKitDoc);
		}
	}

	function drawBackground(line, x, y, pdfKitDoc) {
		var height = line.getHeight();
		for (var i = 0, l = line.inlines.length; i < l; i++) {
			var inline = line.inlines[i];
			if (inline.background) {
				pdfKitDoc.fillColor(inline.background)
					.rect(x + inline.x, y, inline.width, height)
					.fill();
			}
		}
	}

	module.exports = {
		drawBackground: drawBackground,
		drawDecorations: drawDecorations
	};

/***/ }
/******/ ])
});
;